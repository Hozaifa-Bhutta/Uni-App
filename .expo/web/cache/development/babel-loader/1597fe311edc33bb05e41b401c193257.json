{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.KEYS = void 0;\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar KEYS = {\n  FIX_ALL_ISSUES: 'f',\n  FIX_ERRORS: 'e',\n  FIX_WARNINGS: 'w',\n  EXIT: '\\r'\n};\nexports.KEYS = KEYS;\n\nvar printOption = function printOption(option) {\n  return _cliTools().logger.log(\" \\u203A \" + option);\n};\n\nvar printOptions = function printOptions() {\n  _cliTools().logger.log();\n\n  _cliTools().logger.log(_chalk().default.bold('Usage'));\n\n  printOption(_chalk().default.dim('Press') + \" \" + KEYS.FIX_ALL_ISSUES + \" \" + _chalk().default.dim('to try to fix issues.'));\n  printOption(_chalk().default.dim('Press') + \" \" + KEYS.FIX_ERRORS + \" \" + _chalk().default.dim('to try to fix errors.'));\n  printOption(_chalk().default.dim('Press') + \" \" + KEYS.FIX_WARNINGS + \" \" + _chalk().default.dim('to try to fix warnings.'));\n  printOption(_chalk().default.dim('Press') + \" Enter \" + _chalk().default.dim('to exit.'));\n};\n\nvar _default = function _default(_ref) {\n  var onKeyPress = _ref.onKeyPress;\n  printOptions();\n\n  if (process.stdin.setRawMode) {\n    process.stdin.setRawMode(true);\n  }\n\n  process.stdin.resume();\n  process.stdin.setEncoding('utf8');\n  process.stdin.on('data', onKeyPress);\n};\n\nexports.default = _default;","map":{"version":3,"sources":["../../src/tools/printFixOptions.ts"],"names":["KEYS","FIX_ALL_ISSUES","FIX_ERRORS","FIX_WARNINGS","EXIT","printOption","option","logger","printOptions","chalk","onKeyPress","process"],"mappings":";;;;;;;AAAA,SAAA,MAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;EAAA,MAAA,GAAA,kBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;;;;;;;AAEA,IAAMA,IAAI,GAAG;EACXC,cAAc,EADH,GAAA;EAEXC,UAAU,EAFC,GAAA;EAGXC,YAAY,EAHD,GAAA;EAIXC,IAAI,EAAE;AAJK,CAAb;;;AAOA,IAAMC,WAAW,GAAIC,SAAfD,WAAeC,CAAAA,MAAD;EAAA,OAAoBC,SAAAA,GAAAA,MAAAA,CAAAA,GAAAA,cAAxC,MAAwCA,CAApB;AAAA,CAApB;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;EACzBD,SAAAA,GAAAA,MAAAA,CAAAA,GAAAA;;EACAA,SAAAA,GAAAA,MAAAA,CAAAA,GAAAA,CAAWE,MAAAA,GAAAA,OAAAA,CAAAA,IAAAA,CAAXF,OAAWE,CAAXF;;EACAF,WAAW,CACNI,MAAAA,GAAAA,OAAAA,CAAAA,GAAAA,CAAAA,OAAAA,CADM,SACgBT,IAAI,CAACC,cADrB,SACuCQ,MAAAA,GAAAA,OAAAA,CAAAA,GAAAA,CADlDJ,uBACkDI,CADvC,CAAXJ;EAKAA,WAAW,CACNI,MAAAA,GAAAA,OAAAA,CAAAA,GAAAA,CAAAA,OAAAA,CADM,SACgBT,IAAI,CAACE,UADrB,SACmCO,MAAAA,GAAAA,OAAAA,CAAAA,GAAAA,CAD9CJ,uBAC8CI,CADnC,CAAXJ;EAKAA,WAAW,CACNI,MAAAA,GAAAA,OAAAA,CAAAA,GAAAA,CAAAA,OAAAA,CADM,SACgBT,IAAI,CAACG,YADrB,SACqCM,MAAAA,GAAAA,OAAAA,CAAAA,GAAAA,CADhDJ,yBACgDI,CADrC,CAAXJ;EAKAA,WAAW,CAAII,MAAAA,GAAAA,OAAAA,CAAAA,GAAAA,CAAAA,OAAAA,CAAJ,eAAgCA,MAAAA,GAAAA,OAAAA,CAAAA,GAAAA,CAA3CJ,UAA2CI,CAAhC,CAAXJ;AAlBF,CAAA;;eAsBe,S,QAAA,OAA0D;EAAA,IAAxDK,UAAwD,QAAxDA,UAAwD;EACvEF,YAAY;;EAEZ,IAAIG,OAAO,CAAPA,KAAAA,CAAJ,UAAA,EAA8B;IAC5BA,OAAO,CAAPA,KAAAA,CAAAA,UAAAA,CAAAA,IAAAA;EACD;;EACDA,OAAO,CAAPA,KAAAA,CAAAA,MAAAA;EACAA,OAAO,CAAPA,KAAAA,CAAAA,WAAAA,CAAAA,MAAAA;EACAA,OAAO,CAAPA,KAAAA,CAAAA,EAAAA,CAAAA,MAAAA,EAAAA,UAAAA","sourcesContent":["import chalk from 'chalk';\nimport {logger} from '@react-native-community/cli-tools';\n\nconst KEYS = {\n  FIX_ALL_ISSUES: 'f',\n  FIX_ERRORS: 'e',\n  FIX_WARNINGS: 'w',\n  EXIT: '\\r',\n};\n\nconst printOption = (option: string) => logger.log(` \\u203A ${option}`);\nconst printOptions = () => {\n  logger.log();\n  logger.log(chalk.bold('Usage'));\n  printOption(\n    `${chalk.dim('Press')} ${KEYS.FIX_ALL_ISSUES} ${chalk.dim(\n      'to try to fix issues.',\n    )}`,\n  );\n  printOption(\n    `${chalk.dim('Press')} ${KEYS.FIX_ERRORS} ${chalk.dim(\n      'to try to fix errors.',\n    )}`,\n  );\n  printOption(\n    `${chalk.dim('Press')} ${KEYS.FIX_WARNINGS} ${chalk.dim(\n      'to try to fix warnings.',\n    )}`,\n  );\n  printOption(`${chalk.dim('Press')} Enter ${chalk.dim('to exit.')}`);\n};\n\nexport {KEYS};\nexport default ({onKeyPress}: {onKeyPress: (...args: any[]) => void}) => {\n  printOptions();\n\n  if (process.stdin.setRawMode) {\n    process.stdin.setRawMode(true);\n  }\n  process.stdin.resume();\n  process.stdin.setEncoding('utf8');\n  process.stdin.on('data', onKeyPress);\n};\n"]},"metadata":{},"sourceType":"script"}