{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _adb = _interopRequireDefault(require(\"./adb\"));\n\nvar _runOnAllDevices = _interopRequireDefault(require(\"./runOnAllDevices\"));\n\nvar _tryRunAdbReverse = _interopRequireDefault(require(\"./tryRunAdbReverse\"));\n\nvar _tryLaunchAppOnDevice = _interopRequireDefault(require(\"./tryLaunchAppOnDevice\"));\n\nvar _getAdbPath = _interopRequireDefault(require(\"./getAdbPath\"));\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _getAndroidProject = require(\"../../config/getAndroidProject\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction runAndroid(_argv, config, args) {\n  var androidProject;\n  return _regeneratorRuntime.async(function runAndroid$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          androidProject = (0, _getAndroidProject.getAndroidProject)(config);\n\n          if (!args.jetifier) {\n            _context.next = 11;\n            break;\n          }\n\n          _cliTools().logger.info(\"Running \" + _chalk().default.bold('jetifier') + \" to migrate libraries to AndroidX. \" + _chalk().default.dim('You can disable it using \"--no-jetifier\" flag.'));\n\n          _context.prev = 3;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap((0, _execa().default)(require.resolve('jetifier/bin/jetify'), {\n            stdio: 'inherit'\n          }));\n\n        case 6:\n          _context.next = 11;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](3);\n          throw new (_cliTools().CLIError)('Failed to run jetifier.', _context.t0);\n\n        case 11:\n          if (args.packager) {\n            _context.next = 13;\n            break;\n          }\n\n          return _context.abrupt(\"return\", buildAndRun(args, androidProject));\n\n        case 13:\n          return _context.abrupt(\"return\", (0, _cliTools().isPackagerRunning)(args.port).then(function (result) {\n            if (result === 'running') {\n              _cliTools().logger.info('JS server already running.');\n            } else if (result === 'unrecognized') {\n              _cliTools().logger.warn('JS server not recognized, continuing with build...');\n            } else {\n              _cliTools().logger.info('Starting JS server...');\n\n              try {\n                startServerInNewWindow(args.port, args.terminal, config.reactNativePath);\n              } catch (error) {\n                _cliTools().logger.warn(\"Failed to automatically start the packager server. Please run \\\"react-native start\\\" manually. Error details: \" + error.message);\n              }\n            }\n\n            return buildAndRun(args, androidProject);\n          }));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[3, 8]], Promise);\n}\n\nfunction buildAndRun(args, androidProject) {\n  process.chdir(androidProject.sourceDir);\n  var cmd = process.platform.startsWith('win') ? 'gradlew.bat' : './gradlew';\n  var adbPath = (0, _getAdbPath.default)();\n\n  if (args.deviceId) {\n    return runOnSpecificDevice(args, cmd, adbPath, androidProject);\n  } else {\n    return (0, _runOnAllDevices.default)(args, cmd, adbPath, androidProject);\n  }\n}\n\nfunction runOnSpecificDevice(args, gradlew, adbPath, androidProject) {\n  var devices = _adb.default.getDevices(adbPath);\n\n  var deviceId = args.deviceId;\n\n  if (devices.length > 0 && deviceId) {\n    if (devices.indexOf(deviceId) !== -1) {\n      buildApk(gradlew, androidProject.sourceDir);\n      installAndLaunchOnDevice(args, deviceId, adbPath, androidProject);\n    } else {\n      var _cliTools$logger;\n\n      (_cliTools$logger = _cliTools().logger).error.apply(_cliTools$logger, [\"Could not find device with the id: \\\"\" + deviceId + \"\\\". Please choose one of the following:\"].concat(_toConsumableArray(devices)));\n    }\n  } else {\n    _cliTools().logger.error('No Android device or emulator connected.');\n  }\n}\n\nfunction buildApk(gradlew, sourceDir) {\n  try {\n    var gradleArgs = ['build', '-x', 'lint'];\n\n    _cliTools().logger.info('Building the app...');\n\n    _cliTools().logger.debug(\"Running command \\\"\" + gradlew + \" \" + gradleArgs.join(' ') + \"\\\"\");\n\n    _execa().default.sync(gradlew, gradleArgs, {\n      stdio: 'inherit',\n      cwd: sourceDir\n    });\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Failed to build the app.', error);\n  }\n}\n\nfunction tryInstallAppOnDevice(args, adbPath, device, androidProject) {\n  try {\n    var appName = androidProject.appName,\n        sourceDir = androidProject.sourceDir;\n    var variant = args.variant.toLowerCase();\n    var buildDirectory = sourceDir + \"/\" + appName + \"/build/outputs/apk/\" + variant;\n    var apkFile = getInstallApkName(appName, adbPath, variant, device, buildDirectory);\n    var pathToApk = buildDirectory + \"/\" + apkFile;\n    var adbArgs = ['-s', device, 'install', '-r', '-d', pathToApk];\n\n    _cliTools().logger.info(\"Installing the app on the device \\\"\" + device + \"\\\"...\");\n\n    _cliTools().logger.debug(\"Running command \\\"cd android && adb -s \" + device + \" install -r -d \" + pathToApk + \"\\\"\");\n\n    _execa().default.sync(adbPath, adbArgs, {\n      stdio: 'inherit'\n    });\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Failed to install the app on the device.', error);\n  }\n}\n\nfunction getInstallApkName(appName, adbPath, variant, device, buildDirectory) {\n  var availableCPUs = _adb.default.getAvailableCPUs(adbPath, device);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(availableCPUs.concat('universal')), _step; !(_step = _iterator()).done;) {\n    var availableCPU = _step.value;\n\n    var _apkName = appName + \"-\" + availableCPU + \"-\" + variant + \".apk\";\n\n    if (_fs().default.existsSync(buildDirectory + \"/\" + _apkName)) {\n      return _apkName;\n    }\n  }\n\n  var apkName = appName + \"-\" + variant + \".apk\";\n\n  if (_fs().default.existsSync(buildDirectory + \"/\" + apkName)) {\n    return apkName;\n  }\n\n  throw new (_cliTools().CLIError)('Could not find the correct install APK file.');\n}\n\nfunction installAndLaunchOnDevice(args, selectedDevice, adbPath, androidProject) {\n  (0, _tryRunAdbReverse.default)(args.port, selectedDevice);\n  tryInstallAppOnDevice(args, adbPath, selectedDevice, androidProject);\n  (0, _tryLaunchAppOnDevice.default)(selectedDevice, androidProject.packageName, adbPath, args);\n}\n\nfunction startServerInNewWindow(port, terminal, reactNativePath) {\n  var isWindows = /^win/.test(process.platform);\n  var scriptFile = isWindows ? 'launchPackager.bat' : 'launchPackager.command';\n  var packagerEnvFilename = isWindows ? '.packager.bat' : '.packager.env';\n  var portExportContent = isWindows ? \"set RCT_METRO_PORT=\" + port : \"export RCT_METRO_PORT=\" + port;\n\n  var launchPackagerScript = _path().default.join(reactNativePath, \"scripts/\" + scriptFile);\n\n  var scriptsDir = _path().default.dirname(launchPackagerScript);\n\n  var packagerEnvFile = _path().default.join(scriptsDir, packagerEnvFilename);\n\n  var procConfig = {\n    cwd: scriptsDir\n  };\n\n  _fs().default.writeFileSync(packagerEnvFile, portExportContent, {\n    encoding: 'utf8',\n    flag: 'w'\n  });\n\n  if (process.platform === 'darwin') {\n    try {\n      return _execa().default.sync('open', ['-a', terminal, launchPackagerScript], procConfig);\n    } catch (error) {\n      return _execa().default.sync('open', [launchPackagerScript], procConfig);\n    }\n  }\n\n  if (process.platform === 'linux') {\n    try {\n      return _execa().default.sync(terminal, ['-e', \"sh \" + launchPackagerScript], _objectSpread(_objectSpread({}, procConfig), {}, {\n        detached: true\n      }));\n    } catch (error) {\n      return _execa().default.sync('sh', [launchPackagerScript], procConfig);\n    }\n  }\n\n  if (/^win/.test(process.platform)) {\n    return (0, _execa().default)('cmd.exe', ['/C', launchPackagerScript], _objectSpread(_objectSpread({}, procConfig), {}, {\n      detached: true,\n      stdio: 'ignore'\n    }));\n  }\n\n  _cliTools().logger.error(\"Cannot start the packager. Unknown platform \" + process.platform);\n\n  return;\n}\n\nvar _default = {\n  name: 'run-android',\n  description: 'builds your app and starts it on a connected Android emulator or device',\n  func: runAndroid,\n  options: [{\n    name: '--variant <string>',\n    description: \"Specify your app's build variant\",\n    default: 'debug'\n  }, {\n    name: '--appId <string>',\n    description: 'Specify an applicationId to launch after build. If not specified, `package` from AndroidManifest.xml will be used.',\n    default: ''\n  }, {\n    name: '--appIdSuffix <string>',\n    description: 'Specify an applicationIdSuffix to launch after build.',\n    default: ''\n  }, {\n    name: '--main-activity <string>',\n    description: 'Name of the activity to start',\n    default: 'MainActivity'\n  }, {\n    name: '--deviceId <string>',\n    description: 'builds your app and starts it on a specific device/simulator with the ' + 'given device id (listed by running \"adb devices\" on the command line).'\n  }, {\n    name: '--no-packager',\n    description: 'Do not launch packager while building'\n  }, {\n    name: '--port <number>',\n    default: process.env.RCT_METRO_PORT || 8081,\n    parse: Number\n  }, {\n    name: '--terminal <string>',\n    description: 'Launches the Metro Bundler in a new window using the specified terminal path.',\n    default: (0, _cliTools().getDefaultUserTerminal)()\n  }, {\n    name: '--tasks <list>',\n    description: 'Run custom Gradle tasks. By default it\\'s \"installDebug\"',\n    parse: function parse(val) {\n      return val.split(',');\n    }\n  }, {\n    name: '--no-jetifier',\n    description: 'Do not run \"jetifier\" – the AndroidX transition tool. By default it runs before Gradle to ease working with libraries that don\\'t support AndroidX yet. See more at: https://www.npmjs.com/package/jetifier.'\n  }, {\n    name: '--active-arch-only',\n    description: 'Build native libraries only for the current device architecture for debug builds.',\n    default: false\n  }]\n};\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/runAndroid/index.ts"],"names":["androidProject","args","logger","chalk","require","stdio","CLIError","buildAndRun","result","startServerInNewWindow","config","error","process","cmd","adbPath","runOnSpecificDevice","devices","adb","deviceId","buildApk","installAndLaunchOnDevice","gradleArgs","gradlew","execa","cwd","sourceDir","variant","buildDirectory","appName","apkFile","getInstallApkName","pathToApk","adbArgs","device","availableCPUs","apkName","availableCPU","fs","tryInstallAppOnDevice","isWindows","scriptFile","packagerEnvFilename","portExportContent","launchPackagerScript","path","scriptsDir","packagerEnvFile","procConfig","encoding","flag","detached","name","description","func","options","default","parse","Number","val"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport path from 'path';\nimport execa from 'execa';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport {Config} from '@react-native-community/cli-types';\nimport adb from './adb';\nimport runOnAllDevices from './runOnAllDevices';\nimport tryRunAdbReverse from './tryRunAdbReverse';\nimport tryLaunchAppOnDevice from './tryLaunchAppOnDevice';\nimport getAdbPath from './getAdbPath';\nimport {\n  isPackagerRunning,\n  logger,\n  getDefaultUserTerminal,\n  CLIError,\n} from '@react-native-community/cli-tools';\nimport {getAndroidProject} from '../../config/getAndroidProject';\n\nexport interface Flags {\n  tasks?: Array<string>;\n  variant: string;\n  appId: string;\n  appIdSuffix: string;\n  mainActivity: string;\n  deviceId?: string;\n  packager: boolean;\n  port: number;\n  terminal: string;\n  jetifier: boolean;\n  activeArchOnly: boolean;\n}\n\ntype AndroidProject = NonNullable<Config['project']['android']>;\n\n/**\n * Starts the app on a connected Android emulator or device.\n */\nasync function runAndroid(_argv: Array<string>, config: Config, args: Flags) {\n  const androidProject = getAndroidProject(config);\n\n  if (args.jetifier) {\n    logger.info(\n      `Running ${chalk.bold(\n        'jetifier',\n      )} to migrate libraries to AndroidX. ${chalk.dim(\n        'You can disable it using \"--no-jetifier\" flag.',\n      )}`,\n    );\n\n    try {\n      await execa(require.resolve('jetifier/bin/jetify'), {stdio: 'inherit'});\n    } catch (error) {\n      throw new CLIError('Failed to run jetifier.', error);\n    }\n  }\n\n  if (!args.packager) {\n    return buildAndRun(args, androidProject);\n  }\n\n  return isPackagerRunning(args.port).then((result: string) => {\n    if (result === 'running') {\n      logger.info('JS server already running.');\n    } else if (result === 'unrecognized') {\n      logger.warn('JS server not recognized, continuing with build...');\n    } else {\n      // result == 'not_running'\n      logger.info('Starting JS server...');\n      try {\n        startServerInNewWindow(\n          args.port,\n          args.terminal,\n          config.reactNativePath,\n        );\n      } catch (error) {\n        logger.warn(\n          `Failed to automatically start the packager server. Please run \"react-native start\" manually. Error details: ${error.message}`,\n        );\n      }\n    }\n    return buildAndRun(args, androidProject);\n  });\n}\n\n// Builds the app and runs it on a connected emulator / device.\nfunction buildAndRun(args: Flags, androidProject: AndroidProject) {\n  process.chdir(androidProject.sourceDir);\n  const cmd = process.platform.startsWith('win') ? 'gradlew.bat' : './gradlew';\n\n  const adbPath = getAdbPath();\n  if (args.deviceId) {\n    return runOnSpecificDevice(args, cmd, adbPath, androidProject);\n  } else {\n    return runOnAllDevices(args, cmd, adbPath, androidProject);\n  }\n}\n\nfunction runOnSpecificDevice(\n  args: Flags,\n  gradlew: 'gradlew.bat' | './gradlew',\n  adbPath: string,\n  androidProject: AndroidProject,\n) {\n  const devices = adb.getDevices(adbPath);\n  const {deviceId} = args;\n  if (devices.length > 0 && deviceId) {\n    if (devices.indexOf(deviceId) !== -1) {\n      buildApk(gradlew, androidProject.sourceDir);\n      installAndLaunchOnDevice(args, deviceId, adbPath, androidProject);\n    } else {\n      logger.error(\n        `Could not find device with the id: \"${deviceId}\". Please choose one of the following:`,\n        ...devices,\n      );\n    }\n  } else {\n    logger.error('No Android device or emulator connected.');\n  }\n}\n\nfunction buildApk(gradlew: string, sourceDir: string) {\n  try {\n    // using '-x lint' in order to ignore linting errors while building the apk\n    const gradleArgs = ['build', '-x', 'lint'];\n    logger.info('Building the app...');\n    logger.debug(`Running command \"${gradlew} ${gradleArgs.join(' ')}\"`);\n    execa.sync(gradlew, gradleArgs, {stdio: 'inherit', cwd: sourceDir});\n  } catch (error) {\n    throw new CLIError('Failed to build the app.', error);\n  }\n}\n\nfunction tryInstallAppOnDevice(\n  args: Flags,\n  adbPath: string,\n  device: string,\n  androidProject: AndroidProject,\n) {\n  try {\n    // \"app\" is usually the default value for Android apps with only 1 app\n    const {appName, sourceDir} = androidProject;\n    const variant = args.variant.toLowerCase();\n    const buildDirectory = `${sourceDir}/${appName}/build/outputs/apk/${variant}`;\n    const apkFile = getInstallApkName(\n      appName,\n      adbPath,\n      variant,\n      device,\n      buildDirectory,\n    );\n\n    const pathToApk = `${buildDirectory}/${apkFile}`;\n    const adbArgs = ['-s', device, 'install', '-r', '-d', pathToApk];\n    logger.info(`Installing the app on the device \"${device}\"...`);\n    logger.debug(\n      `Running command \"cd android && adb -s ${device} install -r -d ${pathToApk}\"`,\n    );\n    execa.sync(adbPath, adbArgs, {stdio: 'inherit'});\n  } catch (error) {\n    throw new CLIError('Failed to install the app on the device.', error);\n  }\n}\n\nfunction getInstallApkName(\n  appName: string,\n  adbPath: string,\n  variant: string,\n  device: string,\n  buildDirectory: string,\n) {\n  const availableCPUs = adb.getAvailableCPUs(adbPath, device);\n\n  // check if there is an apk file like app-armeabi-v7a-debug.apk\n  for (const availableCPU of availableCPUs.concat('universal')) {\n    const apkName = `${appName}-${availableCPU}-${variant}.apk`;\n    if (fs.existsSync(`${buildDirectory}/${apkName}`)) {\n      return apkName;\n    }\n  }\n\n  // check if there is a default file like app-debug.apk\n  const apkName = `${appName}-${variant}.apk`;\n  if (fs.existsSync(`${buildDirectory}/${apkName}`)) {\n    return apkName;\n  }\n\n  throw new CLIError('Could not find the correct install APK file.');\n}\n\nfunction installAndLaunchOnDevice(\n  args: Flags,\n  selectedDevice: string,\n  adbPath: string,\n  androidProject: AndroidProject,\n) {\n  tryRunAdbReverse(args.port, selectedDevice);\n  tryInstallAppOnDevice(args, adbPath, selectedDevice, androidProject);\n  tryLaunchAppOnDevice(\n    selectedDevice,\n    androidProject.packageName,\n    adbPath,\n    args,\n  );\n}\n\nfunction startServerInNewWindow(\n  port: number,\n  terminal: string,\n  reactNativePath: string,\n) {\n  /**\n   * Set up OS-specific filenames and commands\n   */\n  const isWindows = /^win/.test(process.platform);\n  const scriptFile = isWindows\n    ? 'launchPackager.bat'\n    : 'launchPackager.command';\n  const packagerEnvFilename = isWindows ? '.packager.bat' : '.packager.env';\n  const portExportContent = isWindows\n    ? `set RCT_METRO_PORT=${port}`\n    : `export RCT_METRO_PORT=${port}`;\n\n  /**\n   * Set up the `.packager.(env|bat)` file to ensure the packager starts on the right port.\n   */\n  const launchPackagerScript = path.join(\n    reactNativePath,\n    `scripts/${scriptFile}`,\n  );\n\n  /**\n   * Set up the `launchpackager.(command|bat)` file.\n   * It lives next to `.packager.(bat|env)`\n   */\n  const scriptsDir = path.dirname(launchPackagerScript);\n  const packagerEnvFile = path.join(scriptsDir, packagerEnvFilename);\n  const procConfig: execa.SyncOptions = {cwd: scriptsDir};\n\n  /**\n   * Ensure we overwrite file by passing the `w` flag\n   */\n  fs.writeFileSync(packagerEnvFile, portExportContent, {\n    encoding: 'utf8',\n    flag: 'w',\n  });\n\n  if (process.platform === 'darwin') {\n    try {\n      return execa.sync(\n        'open',\n        ['-a', terminal, launchPackagerScript],\n        procConfig,\n      );\n    } catch (error) {\n      return execa.sync('open', [launchPackagerScript], procConfig);\n    }\n  }\n  if (process.platform === 'linux') {\n    try {\n      return execa.sync(terminal, ['-e', `sh ${launchPackagerScript}`], {\n        ...procConfig,\n        detached: true,\n      });\n    } catch (error) {\n      // By default, the child shell process will be attached to the parent\n      return execa.sync('sh', [launchPackagerScript], procConfig);\n    }\n  }\n  if (/^win/.test(process.platform)) {\n    // Awaiting this causes the CLI to hang indefinitely, so this must execute without await.\n    return execa('cmd.exe', ['/C', launchPackagerScript], {\n      ...procConfig,\n      detached: true,\n      stdio: 'ignore',\n    });\n  }\n  logger.error(\n    `Cannot start the packager. Unknown platform ${process.platform}`,\n  );\n  return;\n}\n\nexport default {\n  name: 'run-android',\n  description:\n    'builds your app and starts it on a connected Android emulator or device',\n  func: runAndroid,\n  options: [\n    {\n      name: '--variant <string>',\n      description: \"Specify your app's build variant\",\n      default: 'debug',\n    },\n    {\n      name: '--appId <string>',\n      description:\n        'Specify an applicationId to launch after build. If not specified, `package` from AndroidManifest.xml will be used.',\n      default: '',\n    },\n    {\n      name: '--appIdSuffix <string>',\n      description: 'Specify an applicationIdSuffix to launch after build.',\n      default: '',\n    },\n    {\n      name: '--main-activity <string>',\n      description: 'Name of the activity to start',\n      default: 'MainActivity',\n    },\n    {\n      name: '--deviceId <string>',\n      description:\n        'builds your app and starts it on a specific device/simulator with the ' +\n        'given device id (listed by running \"adb devices\" on the command line).',\n    },\n    {\n      name: '--no-packager',\n      description: 'Do not launch packager while building',\n    },\n    {\n      name: '--port <number>',\n      default: process.env.RCT_METRO_PORT || 8081,\n      parse: Number,\n    },\n    {\n      name: '--terminal <string>',\n      description:\n        'Launches the Metro Bundler in a new window using the specified terminal path.',\n      default: getDefaultUserTerminal(),\n    },\n    {\n      name: '--tasks <list>',\n      description: 'Run custom Gradle tasks. By default it\\'s \"installDebug\"',\n      parse: (val: string) => val.split(','),\n    },\n    {\n      name: '--no-jetifier',\n      description:\n        'Do not run \"jetifier\" – the AndroidX transition tool. By default it runs before Gradle to ease working with libraries that don\\'t support AndroidX yet. See more at: https://www.npmjs.com/package/jetifier.',\n    },\n    {\n      name: '--active-arch-only',\n      description:\n        'Build native libraries only for the current device architecture for debug builds.',\n      default: false,\n    },\n  ],\n};\n"]},"metadata":{},"sourceType":"script"}