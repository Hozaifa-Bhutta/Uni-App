{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar throttle = require(\"lodash.throttle\");\n\nvar readline = require(\"readline\");\n\nvar tty = require(\"tty\");\n\nvar util = require(\"util\");\n\nfunction clearStringBackwards(stream, str) {\n  readline.moveCursor(stream, -stream.columns, 0);\n  readline.clearLine(stream, 0);\n  var lineCount = (str.match(/\\n/g) || []).length;\n\n  while (lineCount > 0) {\n    readline.moveCursor(stream, 0, -1);\n    readline.clearLine(stream, 0);\n    --lineCount;\n  }\n}\n\nfunction chunkString(str, size) {\n  var ANSI_COLOR = \"\\x1B\\\\[([0-9]{1,2}(;[0-9]{1,2})?)?m\";\n  var SKIP_ANSI = \"(?:\" + ANSI_COLOR + \")*\";\n  return str.match(new RegExp(\"(?:\" + SKIP_ANSI + \".){1,\" + size + \"}\", \"g\")) || [];\n}\n\nfunction getTTYStream(stream) {\n  if (stream instanceof tty.WriteStream && stream.isTTY && stream.columns >= 1) {\n    return stream;\n  }\n\n  return null;\n}\n\nvar Terminal = function () {\n  function Terminal(stream) {\n    _classCallCheck(this, Terminal);\n\n    this._logLines = [];\n    this._nextStatusStr = \"\";\n    this._scheduleUpdate = throttle(this._update, 33);\n    this._statusStr = \"\";\n    this._stream = stream;\n  }\n\n  _createClass(Terminal, [{\n    key: \"_update\",\n    value: function _update() {\n      var _statusStr = this._statusStr,\n          _stream = this._stream;\n      var ttyStream = getTTYStream(_stream);\n\n      if (_statusStr === this._nextStatusStr && this._logLines.length === 0) {\n        return;\n      }\n\n      if (ttyStream != null) {\n        clearStringBackwards(ttyStream, _statusStr);\n      }\n\n      this._logLines.forEach(function (line) {\n        _stream.write(line);\n\n        _stream.write(\"\\n\");\n      });\n\n      this._logLines = [];\n\n      if (ttyStream != null) {\n        this._nextStatusStr = chunkString(this._nextStatusStr, ttyStream.columns).join(\"\\n\");\n\n        _stream.write(this._nextStatusStr);\n      }\n\n      this._statusStr = this._nextStatusStr;\n    }\n  }, {\n    key: \"status\",\n    value: function status(format) {\n      var _nextStatusStr = this._nextStatusStr;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      this._nextStatusStr = util.format.apply(util, [format].concat(args));\n\n      this._scheduleUpdate();\n\n      return _nextStatusStr;\n    }\n  }, {\n    key: \"log\",\n    value: function log(format) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      this._logLines.push(util.format.apply(util, [format].concat(args)));\n\n      this._scheduleUpdate();\n    }\n  }, {\n    key: \"persistStatus\",\n    value: function persistStatus() {\n      this.log(this._nextStatusStr);\n      this._nextStatusStr = \"\";\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      this._scheduleUpdate.flush();\n    }\n  }]);\n\n  return Terminal;\n}();\n\nmodule.exports = Terminal;","map":{"version":3,"names":["throttle","require","readline","tty","util","clearStringBackwards","stream","str","moveCursor","columns","clearLine","lineCount","match","length","chunkString","size","ANSI_COLOR","SKIP_ANSI","RegExp","getTTYStream","WriteStream","isTTY","Terminal","_logLines","_nextStatusStr","_scheduleUpdate","_update","_statusStr","_stream","ttyStream","forEach","line","write","join","format","args","push","log","flush","module","exports"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/metro-core/src/Terminal.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\"use strict\";\n\nconst throttle = require(\"lodash.throttle\");\n\nconst readline = require(\"readline\");\n\nconst tty = require(\"tty\");\n\nconst util = require(\"util\");\n\n/**\n * Clear some text that was previously printed on an interactive stream,\n * without trailing newline character (so we have to move back to the\n * beginning of the line).\n */\nfunction clearStringBackwards(stream, str) {\n  readline.moveCursor(stream, -stream.columns, 0);\n  readline.clearLine(stream, 0);\n  let lineCount = (str.match(/\\n/g) || []).length;\n\n  while (lineCount > 0) {\n    readline.moveCursor(stream, 0, -1);\n    readline.clearLine(stream, 0);\n    --lineCount;\n  }\n}\n/**\n * Cut a string into an array of string of the specific maximum size. A newline\n * ends a chunk immediately (it's not included in the \".\" RexExp operator), and\n * is not included in the result.\n * When counting we should ignore non-printable characters. In particular the\n * ANSI escape sequences (regex: /\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?m/)\n * (Not an exhaustive match, intended to match ANSI color escapes)\n * https://en.wikipedia.org/wiki/ANSI_escape_code\n */\n\nfunction chunkString(str, size) {\n  const ANSI_COLOR = \"\\x1B\\\\[([0-9]{1,2}(;[0-9]{1,2})?)?m\";\n  const SKIP_ANSI = `(?:${ANSI_COLOR})*`;\n  return str.match(new RegExp(`(?:${SKIP_ANSI}.){1,${size}}`, \"g\")) || [];\n}\n/**\n * Get the stream as a TTY if it effectively looks like a valid TTY.\n */\n\nfunction getTTYStream(stream) {\n  if (\n    stream instanceof tty.WriteStream &&\n    stream.isTTY &&\n    stream.columns >= 1\n  ) {\n    return stream;\n  }\n\n  return null;\n}\n/**\n * We don't just print things to the console, sometimes we also want to show\n * and update progress. This utility just ensures the output stays neat: no\n * missing newlines, no mangled log lines.\n *\n *     const terminal = Terminal.default;\n *     terminal.status('Updating... 38%');\n *     terminal.log('warning: Something happened.');\n *     terminal.status('Updating, done.');\n *     terminal.persistStatus();\n *\n * The final output:\n *\n *     warning: Something happened.\n *     Updating, done.\n *\n * Without the status feature, we may get a mangled output:\n *\n *     Updating... 38%warning: Something happened.\n *     Updating, done.\n *\n * This is meant to be user-readable and TTY-oriented. We use stdout by default\n * because it's more about status information than diagnostics/errors (stderr).\n *\n * Do not add any higher-level functionality in this class such as \"warning\" and\n * \"error\" printers, as it is not meant for formatting/reporting. It has the\n * single responsibility of handling status messages.\n */\n\nclass Terminal {\n  constructor(stream) {\n    this._logLines = [];\n    this._nextStatusStr = \"\"; // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n\n    this._scheduleUpdate = throttle(this._update, 33);\n    this._statusStr = \"\";\n    this._stream = stream;\n  }\n  /**\n   * Clear and write the new status, logging in bulk in-between. Doing this in a\n   * throttled way (in a different tick than the calls to `log()` and\n   * `status()`) prevents us from repeatedly rewriting the status in case\n   * `terminal.log()` is called several times.\n   */\n\n  _update() {\n    const { _statusStr, _stream } = this;\n    const ttyStream = getTTYStream(_stream);\n\n    if (_statusStr === this._nextStatusStr && this._logLines.length === 0) {\n      return;\n    }\n\n    if (ttyStream != null) {\n      clearStringBackwards(ttyStream, _statusStr);\n    }\n\n    this._logLines.forEach((line) => {\n      _stream.write(line);\n\n      _stream.write(\"\\n\");\n    });\n\n    this._logLines = [];\n\n    if (ttyStream != null) {\n      this._nextStatusStr = chunkString(\n        this._nextStatusStr,\n        ttyStream.columns\n      ).join(\"\\n\");\n\n      _stream.write(this._nextStatusStr);\n    }\n\n    this._statusStr = this._nextStatusStr;\n  }\n  /**\n   * Shows some text that is meant to be overriden later. Return the previous\n   * status that was shown and is no more. Calling `status()` with no argument\n   * removes the status altogether. The status is never shown in a\n   * non-interactive terminal: for example, if the output is redirected to a\n   * file, then we don't care too much about having a progress bar.\n   */\n\n  status(format, ...args) {\n    const { _nextStatusStr } = this;\n    this._nextStatusStr = util.format(format, ...args);\n\n    this._scheduleUpdate();\n\n    return _nextStatusStr;\n  }\n  /**\n   * Similar to `console.log`, except it moves the status/progress text out of\n   * the way correctly. In non-interactive terminals this is the same as\n   * `console.log`.\n   */\n\n  log(format, ...args) {\n    this._logLines.push(util.format(format, ...args));\n\n    this._scheduleUpdate();\n  }\n  /**\n   * Log the current status and start from scratch. This is useful if the last\n   * status was the last one of a series of updates.\n   */\n\n  persistStatus() {\n    this.log(this._nextStatusStr);\n    this._nextStatusStr = \"\";\n  }\n\n  flush() {\n    // Useful if you're going to start calling console.log/console.error directly\n    // again; otherwise you could end up with mangled output when the queued\n    // update starts writing to stream after a delay.\n\n    /* $FlowFixMe(>=0.99.0 site=react_native_fb) This comment suppresses an\n     * error found when Flow v0.99 was deployed. To see the error, delete this\n     * comment and run Flow. */\n    this._scheduleUpdate.flush();\n  }\n}\n\nmodule.exports = Terminal;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}