{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _child_process() {\n  var data = require(\"child_process\");\n\n  _child_process = function _child_process() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _getAdbPath = _interopRequireDefault(require(\"./getAdbPath\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction tryRunAdbReverse(packagerPort, device) {\n  try {\n    var adbPath = (0, _getAdbPath.default)();\n    var adbArgs = ['reverse', \"tcp:\" + packagerPort, \"tcp:\" + packagerPort];\n\n    if (device) {\n      adbArgs.unshift('-s', device);\n    }\n\n    _cliTools().logger.info('Connecting to the development server...');\n\n    _cliTools().logger.debug(\"Running command \\\"\" + adbPath + \" \" + adbArgs.join(' ') + \"\\\"\");\n\n    (0, _child_process().execFileSync)(adbPath, adbArgs, {\n      stdio: 'inherit'\n    });\n  } catch (e) {\n    _cliTools().logger.warn(\"Failed to connect to development server using \\\"adb reverse\\\": \" + e.message);\n  }\n}\n\nvar _default = tryRunAdbReverse;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/runAndroid/tryRunAdbReverse.ts"],"names":["adbPath","adbArgs","logger","stdio","e","tryRunAdbReverse"],"mappings":";;;;;;;AAQA,SAAA,cAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;EAAA,cAAA,GAAA,0BAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,gBAAA,CAAA;;;;;;;;AAGA,SAAA,gBAAA,CAAA,YAAA,EAAA,MAAA,EAGE;EACA,IAAI;IACF,IAAMA,OAAO,GAAG,CAAA,GAAA,WAAA,CAAhB,OAAgB,GAAhB;IACA,IAAMC,OAAO,GAAG,CAAA,SAAA,WAAA,YAAA,WAFd,YAEc,CAAhB;;IAGA,IAAA,MAAA,EAAY;MACVA,OAAO,CAAPA,OAAAA,CAAAA,IAAAA,EAAAA,MAAAA;IACD;;IAEDC,SAAAA,GAAAA,MAAAA,CAAAA,IAAAA,CAAAA,yCAAAA;;IACAA,SAAAA,GAAAA,MAAAA,CAAAA,KAAAA,wBAAiCF,OAAjCE,SAA4CD,OAAO,CAAPA,IAAAA,CAA5CC,GAA4CD,CAA5CC;;IAEA,CAAA,GAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,OAAA,EAA+B;MAACC,KAAK,EAAE;IAAR,CAA/B;EAZF,CAAA,CAaE,OAAA,CAAA,EAAU;IACVD,SAAAA,GAAAA,MAAAA,CAAAA,IAAAA,qEACkEE,CAAC,CADnEF,OAAAA;EAGD;AACF;;eAEcG,gB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport {execFileSync} from 'child_process';\nimport {logger} from '@react-native-community/cli-tools';\nimport getAdbPath from './getAdbPath';\n\n// Runs ADB reverse tcp:8081 tcp:8081 to allow loading the jsbundle from the packager\nfunction tryRunAdbReverse(\n  packagerPort: number | string,\n  device?: string | void,\n) {\n  try {\n    const adbPath = getAdbPath();\n    const adbArgs = ['reverse', `tcp:${packagerPort}`, `tcp:${packagerPort}`];\n\n    // If a device is specified then tell adb to use it\n    if (device) {\n      adbArgs.unshift('-s', device);\n    }\n\n    logger.info('Connecting to the development server...');\n    logger.debug(`Running command \"${adbPath} ${adbArgs.join(' ')}\"`);\n\n    execFileSync(adbPath, adbArgs, {stdio: 'inherit'});\n  } catch (e) {\n    logger.warn(\n      `Failed to connect to development server using \"adb reverse\": ${e.message}`,\n    );\n  }\n}\n\nexport default tryRunAdbReverse;\n"]},"metadata":{},"sourceType":"script"}