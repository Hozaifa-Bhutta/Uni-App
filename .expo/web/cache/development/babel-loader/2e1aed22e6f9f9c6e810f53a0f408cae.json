{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _HermesParserDecodeUTF8String = _interopRequireDefault(require(\"./HermesParserDecodeUTF8String\"));\n\nvar _HermesParserNodeDeserializers = _interopRequireDefault(require(\"./HermesParserNodeDeserializers\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar HermesParserDeserializer = function () {\n  function HermesParserDeserializer(programBuffer, positionBuffer, positionBufferSize, wasmParser, options) {\n    _classCallCheck(this, HermesParserDeserializer);\n\n    this.programBufferIdx = void 0;\n    this.positionBufferIdx = void 0;\n    this.positionBufferSize = void 0;\n    this.locMap = void 0;\n    this.HEAPU8 = void 0;\n    this.HEAPU32 = void 0;\n    this.HEAPF64 = void 0;\n    this.options = void 0;\n    this.commentTypes = ['CommentLine', 'CommentBlock', 'InterpreterDirective'];\n    this.tokenTypes = ['Boolean', 'Identifier', 'Keyword', 'Null', 'Numeric', 'BigInt', 'Punctuator', 'String', 'RegularExpression', 'Template', 'JSXText'];\n    this.programBufferIdx = programBuffer / 4;\n    this.positionBufferIdx = positionBuffer / 4;\n    this.positionBufferSize = positionBufferSize;\n    this.locMap = {};\n    this.HEAPU8 = wasmParser.HEAPU8;\n    this.HEAPU32 = wasmParser.HEAPU32;\n    this.HEAPF64 = wasmParser.HEAPF64;\n    this.options = options;\n  }\n\n  _createClass(HermesParserDeserializer, [{\n    key: \"next\",\n    value: function next() {\n      var num = this.HEAPU32[this.programBufferIdx++];\n      return num;\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize() {\n      var program = {\n        type: 'Program',\n        loc: this.addEmptyLoc(),\n        body: this.deserializeNodeList(),\n        comments: this.deserializeComments()\n      };\n\n      if (this.options.tokens === true) {\n        program.tokens = this.deserializeTokens();\n      }\n\n      this.fillLocs();\n      return program;\n    }\n  }, {\n    key: \"deserializeBoolean\",\n    value: function deserializeBoolean() {\n      return Boolean(this.next());\n    }\n  }, {\n    key: \"deserializeNumber\",\n    value: function deserializeNumber() {\n      var floatIdx;\n\n      if (this.programBufferIdx % 2 === 0) {\n        floatIdx = this.programBufferIdx / 2;\n        this.programBufferIdx += 2;\n      } else {\n        floatIdx = (this.programBufferIdx + 1) / 2;\n        this.programBufferIdx += 3;\n      }\n\n      return this.HEAPF64[floatIdx];\n    }\n  }, {\n    key: \"deserializeString\",\n    value: function deserializeString() {\n      var ptr = this.next();\n\n      if (ptr === 0) {\n        return null;\n      }\n\n      var size = this.next();\n      return (0, _HermesParserDecodeUTF8String.default)(ptr, size, this.HEAPU8);\n    }\n  }, {\n    key: \"deserializeNode\",\n    value: function deserializeNode() {\n      var nodeType = this.next();\n\n      if (nodeType === 0) {\n        return null;\n      }\n\n      var nodeDeserializer = _HermesParserNodeDeserializers.default[nodeType - 1].bind(this);\n\n      return nodeDeserializer();\n    }\n  }, {\n    key: \"deserializeNodeList\",\n    value: function deserializeNodeList() {\n      var size = this.next();\n      var nodeList = [];\n\n      for (var i = 0; i < size; i++) {\n        nodeList.push(this.deserializeNode());\n      }\n\n      return nodeList;\n    }\n  }, {\n    key: \"deserializeComments\",\n    value: function deserializeComments() {\n      var size = this.next();\n      var comments = [];\n\n      for (var i = 0; i < size; i++) {\n        var commentType = this.commentTypes[this.next()];\n        var loc = this.addEmptyLoc();\n        var value = this.deserializeString();\n        comments.push({\n          type: commentType,\n          loc: loc,\n          value: value\n        });\n      }\n\n      return comments;\n    }\n  }, {\n    key: \"deserializeTokens\",\n    value: function deserializeTokens() {\n      var size = this.next();\n      var tokens = [];\n\n      for (var i = 0; i < size; i++) {\n        var tokenType = this.tokenTypes[this.next()];\n        var loc = this.addEmptyLoc();\n        var value = this.deserializeString();\n        tokens.push({\n          type: tokenType,\n          loc: loc,\n          value: value\n        });\n      }\n\n      return tokens;\n    }\n  }, {\n    key: \"addEmptyLoc\",\n    value: function addEmptyLoc() {\n      var loc = {};\n      this.locMap[this.next()] = loc;\n      return loc;\n    }\n  }, {\n    key: \"fillLocs\",\n    value: function fillLocs() {\n      for (var i = 0; i < this.positionBufferSize; i++) {\n        var locId = this.HEAPU32[this.positionBufferIdx++];\n        var kind = this.HEAPU32[this.positionBufferIdx++];\n        var line = this.HEAPU32[this.positionBufferIdx++];\n        var column = this.HEAPU32[this.positionBufferIdx++];\n        var offset = this.HEAPU32[this.positionBufferIdx++];\n        var loc = this.locMap[locId];\n\n        if (kind === 0) {\n          loc.start = {\n            line: line,\n            column: column\n          };\n          loc.rangeStart = offset;\n        } else {\n          loc.end = {\n            line: line,\n            column: column\n          };\n          loc.rangeEnd = offset;\n        }\n      }\n    }\n  }]);\n\n  return HermesParserDeserializer;\n}();\n\nexports.default = HermesParserDeserializer;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_HermesParserDecodeUTF8String","_interopRequireDefault","require","_HermesParserNodeDeserializers","obj","__esModule","HermesParserDeserializer","programBuffer","positionBuffer","positionBufferSize","wasmParser","options","programBufferIdx","positionBufferIdx","locMap","HEAPU8","HEAPU32","HEAPF64","commentTypes","tokenTypes","num","program","type","loc","addEmptyLoc","body","deserializeNodeList","comments","deserializeComments","tokens","deserializeTokens","fillLocs","Boolean","next","floatIdx","ptr","size","nodeType","nodeDeserializer","bind","nodeList","i","push","deserializeNode","commentType","deserializeString","tokenType","locId","kind","line","column","offset","start","rangeStart","end","rangeEnd"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/hermes-parser/dist/HermesParserDeserializer.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _HermesParserDecodeUTF8String = _interopRequireDefault(require(\"./HermesParserDecodeUTF8String\"));\n\nvar _HermesParserNodeDeserializers = _interopRequireDefault(require(\"./HermesParserNodeDeserializers\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass HermesParserDeserializer {\n  // Matches StoredComment::Kind enum in JSLexer.h\n  // Matches TokenType enum in HermesParserJSSerializer.h\n  constructor(programBuffer, positionBuffer, positionBufferSize, wasmParser, options) {\n    this.programBufferIdx = void 0;\n    this.positionBufferIdx = void 0;\n    this.positionBufferSize = void 0;\n    this.locMap = void 0;\n    this.HEAPU8 = void 0;\n    this.HEAPU32 = void 0;\n    this.HEAPF64 = void 0;\n    this.options = void 0;\n    this.commentTypes = ['CommentLine', 'CommentBlock', 'InterpreterDirective'];\n    this.tokenTypes = ['Boolean', 'Identifier', 'Keyword', 'Null', 'Numeric', 'BigInt', 'Punctuator', 'String', 'RegularExpression', 'Template', 'JSXText'];\n    // Program and position buffer are memory addresses, so we must convert\n    // into indices into HEAPU32 (an array of 4-byte integers).\n    this.programBufferIdx = programBuffer / 4;\n    this.positionBufferIdx = positionBuffer / 4;\n    this.positionBufferSize = positionBufferSize;\n    this.locMap = {};\n    this.HEAPU8 = wasmParser.HEAPU8;\n    this.HEAPU32 = wasmParser.HEAPU32;\n    this.HEAPF64 = wasmParser.HEAPF64;\n    this.options = options;\n  }\n  /**\n   * Consume and return the next 4 bytes in the program buffer.\n   */\n\n\n  next() {\n    const num = this.HEAPU32[this.programBufferIdx++];\n    return num;\n  }\n\n  deserialize() {\n    const program = {\n      type: 'Program',\n      loc: this.addEmptyLoc(),\n      body: this.deserializeNodeList(),\n      comments: this.deserializeComments()\n    };\n\n    if (this.options.tokens === true) {\n      program.tokens = this.deserializeTokens();\n    }\n\n    this.fillLocs();\n    return program;\n  }\n  /**\n   * Booleans are serialized as a single 4-byte integer.\n   */\n\n\n  deserializeBoolean() {\n    return Boolean(this.next());\n  }\n  /**\n   * Numbers are serialized directly into program buffer, taking up 8 bytes\n   * preceded by 4 bytes of alignment padding if necessary.\n   */\n\n\n  deserializeNumber() {\n    let floatIdx; // Numbers are aligned on 8-byte boundaries, so skip padding if we are at\n    // an odd index into the 4-byte aligned program buffer.\n\n    if (this.programBufferIdx % 2 === 0) {\n      floatIdx = this.programBufferIdx / 2;\n      this.programBufferIdx += 2;\n    } else {\n      floatIdx = (this.programBufferIdx + 1) / 2;\n      this.programBufferIdx += 3;\n    }\n\n    return this.HEAPF64[floatIdx];\n  }\n  /**\n   * Strings are serialized as a 4-byte pointer into the heap, followed\n   * by their size as a 4-byte integer. The size is only present if the\n   * pointer is non-null.\n   */\n\n\n  deserializeString() {\n    const ptr = this.next();\n\n    if (ptr === 0) {\n      return null;\n    }\n\n    const size = this.next();\n    return (0, _HermesParserDecodeUTF8String.default)(ptr, size, this.HEAPU8);\n  }\n  /**\n   * Nodes are serialized as a 4-byte integer denoting their node kind,\n   * followed by a 4-byte loc ID, followed by serialized node properties.\n   *\n   * If the node kind is 0 the node is null, otherwise the node kind - 1 is an\n   * index into the array of node deserialization functions.\n   */\n\n\n  deserializeNode() {\n    const nodeType = this.next();\n\n    if (nodeType === 0) {\n      return null;\n    }\n\n    const nodeDeserializer = _HermesParserNodeDeserializers.default[nodeType - 1].bind(this);\n\n    return nodeDeserializer();\n  }\n  /**\n   * Node lists are serialized as a 4-byte integer denoting the number of\n   * elements in the list, followed by the serialized elements.\n   */\n\n\n  deserializeNodeList() {\n    const size = this.next();\n    const nodeList = [];\n\n    for (let i = 0; i < size; i++) {\n      nodeList.push(this.deserializeNode());\n    }\n\n    return nodeList;\n  }\n  /**\n   * Comments are serialized as a node list, where each comment is serialized\n   * as a 4-byte integer denoting comment type, followed by a 4-byte value\n   * denoting the loc ID, followed by a serialized string for the comment value.\n   */\n\n\n  deserializeComments() {\n    const size = this.next();\n    const comments = [];\n\n    for (let i = 0; i < size; i++) {\n      const commentType = this.commentTypes[this.next()];\n      const loc = this.addEmptyLoc();\n      const value = this.deserializeString();\n      comments.push({\n        type: commentType,\n        loc,\n        value\n      });\n    }\n\n    return comments;\n  }\n\n  deserializeTokens() {\n    const size = this.next();\n    const tokens = [];\n\n    for (let i = 0; i < size; i++) {\n      const tokenType = this.tokenTypes[this.next()];\n      const loc = this.addEmptyLoc();\n      const value = this.deserializeString();\n      tokens.push({\n        type: tokenType,\n        loc,\n        value\n      });\n    }\n\n    return tokens;\n  }\n  /**\n   * While deserializing the AST locations are represented by\n   * a 4-byte loc ID. This is used to create a map of loc IDs to empty loc\n   * objects that are filled after the AST has been deserialized.\n   */\n\n\n  addEmptyLoc() {\n    // $FlowExpectedError\n    const loc = {};\n    this.locMap[this.next()] = loc;\n    return loc;\n  }\n  /**\n   * Positions are serialized as a loc ID which denotes which loc it is associated with,\n   * followed by kind which denotes whether it is a start or end position,\n   * followed by line, column, and offset (4-bytes each).\n   */\n\n\n  fillLocs() {\n    for (let i = 0; i < this.positionBufferSize; i++) {\n      const locId = this.HEAPU32[this.positionBufferIdx++];\n      const kind = this.HEAPU32[this.positionBufferIdx++];\n      const line = this.HEAPU32[this.positionBufferIdx++];\n      const column = this.HEAPU32[this.positionBufferIdx++];\n      const offset = this.HEAPU32[this.positionBufferIdx++];\n      const loc = this.locMap[locId];\n\n      if (kind === 0) {\n        loc.start = {\n          line,\n          column\n        };\n        loc.rangeStart = offset;\n      } else {\n        loc.end = {\n          line,\n          column\n        };\n        loc.rangeEnd = offset;\n      }\n    }\n  }\n\n}\n\nexports.default = HermesParserDeserializer;"],"mappings":"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"},"metadata":{},"sourceType":"script"}