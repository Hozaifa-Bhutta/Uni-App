{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _child_process() {\n  var data = require(\"child_process\");\n\n  _child_process = function _child_process() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction parseDevicesResult(result) {\n  if (!result) {\n    return [];\n  }\n\n  var devices = [];\n  var lines = result.trim().split(/\\r?\\n/);\n\n  for (var i = 0; i < lines.length; i++) {\n    var words = lines[i].split(/[ ,\\t]+/).filter(function (w) {\n      return w !== '';\n    });\n\n    if (words[1] === 'device') {\n      devices.push(words[0]);\n    }\n  }\n\n  return devices;\n}\n\nfunction getDevices(adbPath) {\n  try {\n    var devicesResult = (0, _child_process().execSync)(\"\\\"\" + adbPath + \"\\\" devices\");\n    return parseDevicesResult(devicesResult.toString());\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction getAvailableCPUs(adbPath, device) {\n  try {\n    var baseArgs = ['-s', device, 'shell', 'getprop'];\n    var cpus = (0, _child_process().execFileSync)(adbPath, baseArgs.concat(['ro.product.cpu.abilist'])).toString();\n\n    if (!cpus || cpus.trim().length === 0) {\n      cpus = (0, _child_process().execFileSync)(adbPath, baseArgs.concat(['ro.product.cpu.abi'])).toString();\n    }\n\n    return (cpus || '').trim().split(',');\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction getCPU(adbPath, device) {\n  try {\n    var cpus = (0, _child_process().execFileSync)(adbPath, ['-s', device, 'shell', 'getprop', 'ro.product.cpu.abi']).toString().trim();\n    return cpus.length > 0 ? cpus : null;\n  } catch (e) {\n    return null;\n  }\n}\n\nvar _default = {\n  getDevices: getDevices,\n  getAvailableCPUs: getAvailableCPUs,\n  getCPU: getCPU\n};\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/runAndroid/adb.ts"],"names":["devices","lines","result","i","words","w","devicesResult","parseDevicesResult","baseArgs","cpus","getDevices","getAvailableCPUs","getCPU"],"mappings":";;;;;;;AAQA,SAAA,cAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;EAAA,cAAA,GAAA,0BAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AAKA,SAAA,kBAAA,CAAA,MAAA,EAA2D;EACzD,IAAI,CAAJ,MAAA,EAAa;IACX,OAAA,EAAA;EACD;;EAED,IAAMA,OAAO,GAAb,EAAA;EACA,IAAMC,KAAK,GAAGC,MAAM,CAANA,IAAAA,GAAAA,KAAAA,CAAd,OAAcA,CAAd;;EAEA,KAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGF,KAAK,CAAzB,MAAA,EAAkCE,CAAlC,EAAA,EAAuC;IACrC,IAAMC,KAAK,GAAGH,KAAK,CAALA,CAAK,CAALA,CAAAA,KAAAA,CAAAA,SAAAA,EAAAA,MAAAA,CAAkCI,UAAAA,CAAD;MAAA,OAAOA,CAAC,KAAvD,EAA+C;IAAA,CAAjCJ,CAAd;;IAEA,IAAIG,KAAK,CAALA,CAAK,CAALA,KAAJ,QAAA,EAA2B;MACzBJ,OAAO,CAAPA,IAAAA,CAAaI,KAAK,CAAlBJ,CAAkB,CAAlBA;IACD;EACF;;EACD,OAAA,OAAA;AACD;;AAKD,SAAA,UAAA,CAAA,OAAA,EAAoD;EAClD,IAAI;IACF,IAAMM,aAAa,GAAG,CAAA,GAAA,cAAA,GAAA,QAAA,SAAtB,OAAsB,gBAAtB;IACA,OAAOC,kBAAkB,CAACD,aAAa,CAAvC,QAA0BA,EAAD,CAAzB;EAFF,CAAA,CAGE,OAAA,CAAA,EAAU;IACV,OAAA,EAAA;EACD;AACF;;AAKD,SAAA,gBAAA,CAAA,OAAA,EAAA,MAAA,EAA0E;EACxE,IAAI;IACF,IAAME,QAAQ,GAAG,CAAA,IAAA,EAAA,MAAA,EAAA,OAAA,EAAjB,SAAiB,CAAjB;IAEA,IAAIC,IAAI,GAAG,CAAA,GAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAETD,QAAQ,CAARA,MAAAA,CAAgB,CAFP,wBAEO,CAAhBA,CAFS,EAHT,QAGS,EAAX;;IAMA,IAAI,CAAA,IAAA,IAASC,IAAI,CAAJA,IAAAA,GAAAA,MAAAA,KAAb,CAAA,EAAuC;MACrCA,IAAI,GAAG,CAAA,GAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAELD,QAAQ,CAARA,MAAAA,CAAgB,CAFX,oBAEW,CAAhBA,CAFK,EAAPC,QAAO,EAAPA;IAID;;IAED,OAAO,CAACA,IAAI,IAAL,EAAA,EAAA,IAAA,GAAA,KAAA,CAAP,GAAO,CAAP;EAhBF,CAAA,CAiBE,OAAA,CAAA,EAAU;IACV,OAAA,EAAA;EACD;AACF;;AAKD,SAAA,MAAA,CAAA,OAAA,EAAA,MAAA,EAAgE;EAC9D,IAAI;IACF,IAAMA,IAAI,GAAG,CAAA,GAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAAsB,CAAA,IAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,EAAtB,oBAAsB,CAAtB,EAAA,QAAA,GAAb,IAAa,EAAb;IAUA,OAAOA,IAAI,CAAJA,MAAAA,GAAAA,CAAAA,GAAAA,IAAAA,GAAP,IAAA;EAXF,CAAA,CAYE,OAAA,CAAA,EAAU;IACV,OAAA,IAAA;EACD;AACF;;eAEc;EACbC,UADa,EACbA,UADa;EAEbC,gBAFa,EAEbA,gBAFa;EAGbC,MAAAA,EAAAA;AAHa,C","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport {execSync, execFileSync} from 'child_process';\n\n/**\n * Parses the output of the 'adb devices' command\n */\nfunction parseDevicesResult(result: string): Array<string> {\n  if (!result) {\n    return [];\n  }\n\n  const devices = [];\n  const lines = result.trim().split(/\\r?\\n/);\n\n  for (let i = 0; i < lines.length; i++) {\n    const words = lines[i].split(/[ ,\\t]+/).filter((w) => w !== '');\n\n    if (words[1] === 'device') {\n      devices.push(words[0]);\n    }\n  }\n  return devices;\n}\n\n/**\n * Executes the commands needed to get a list of devices from ADB\n */\nfunction getDevices(adbPath: string): Array<string> {\n  try {\n    const devicesResult = execSync(`\"${adbPath}\" devices`);\n    return parseDevicesResult(devicesResult.toString());\n  } catch (e) {\n    return [];\n  }\n}\n\n/**\n * Gets available CPUs of devices from ADB\n */\nfunction getAvailableCPUs(adbPath: string, device: string): Array<string> {\n  try {\n    const baseArgs = ['-s', device, 'shell', 'getprop'];\n\n    let cpus = execFileSync(\n      adbPath,\n      baseArgs.concat(['ro.product.cpu.abilist']),\n    ).toString();\n\n    // pre-Lollipop\n    if (!cpus || cpus.trim().length === 0) {\n      cpus = execFileSync(\n        adbPath,\n        baseArgs.concat(['ro.product.cpu.abi']),\n      ).toString();\n    }\n\n    return (cpus || '').trim().split(',');\n  } catch (e) {\n    return [];\n  }\n}\n\n/**\n * Gets the CPU architecture of a device from ADB\n */\nfunction getCPU(adbPath: string, device: string): string | null {\n  try {\n    const cpus = execFileSync(adbPath, [\n      '-s',\n      device,\n      'shell',\n      'getprop',\n      'ro.product.cpu.abi',\n    ])\n      .toString()\n      .trim();\n\n    return cpus.length > 0 ? cpus : null;\n  } catch (e) {\n    return null;\n  }\n}\n\nexport default {\n  getDevices,\n  getAvailableCPUs,\n  getCPU,\n};\n"]},"metadata":{},"sourceType":"script"}