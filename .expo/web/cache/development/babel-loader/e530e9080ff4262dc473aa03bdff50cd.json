{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.projectConfig = exports.dependencyConfig = void 0;\n\nfunction _joi() {\n  var data = _interopRequireDefault(require(\"joi\"));\n\n  _joi = function _joi() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar map = function map(key, value) {\n  return _joi().default.object().unknown(true).pattern(key, value);\n};\n\nvar command = _joi().default.object({\n  name: _joi().default.string().required(),\n  description: _joi().default.string(),\n  usage: _joi().default.string(),\n  func: _joi().default.func().required(),\n  options: _joi().default.array().items(_joi().default.object({\n    name: _joi().default.string().required(),\n    description: _joi().default.string(),\n    parse: _joi().default.func(),\n    default: _joi().default.alternatives().try(_joi().default.bool(), _joi().default.number(), _joi().default.string().allow(''), _joi().default.func())\n  }).rename('command', 'name', {\n    ignoreUndefined: true\n  })),\n  examples: _joi().default.array().items(_joi().default.object({\n    desc: _joi().default.string().required(),\n    cmd: _joi().default.string().required()\n  }))\n});\n\nvar healthCheck = _joi().default.object({\n  label: _joi().default.string().required(),\n  healthchecks: _joi().default.array().items(_joi().default.object({\n    label: _joi().default.string().required(),\n    isRequired: _joi().default.bool(),\n    description: _joi().default.string(),\n    getDiagnostics: _joi().default.func(),\n    win32AutomaticFix: _joi().default.func(),\n    darwinAutomaticFix: _joi().default.func(),\n    linuxAutomaticFix: _joi().default.func(),\n    runAutomaticFix: _joi().default.func().required()\n  }))\n});\n\nvar dependencyConfig = _joi().default.object({\n  dependency: _joi().default.object({\n    platforms: map(_joi().default.string(), _joi().default.any()).keys({\n      ios: _joi().default.object({\n        scriptPhases: _joi().default.array().items(_joi().default.object()),\n        configurations: _joi().default.array().items(_joi().default.string()).default([])\n      }).allow(null),\n      android: _joi().default.object({\n        sourceDir: _joi().default.string(),\n        manifestPath: _joi().default.string(),\n        packageName: _joi().default.string(),\n        packageImportPath: _joi().default.string(),\n        packageInstance: _joi().default.string(),\n        dependencyConfiguration: _joi().default.string(),\n        buildTypes: _joi().default.array().items(_joi().default.string()).default([])\n      }).allow(null)\n    }).default()\n  }).default(),\n  platforms: map(_joi().default.string(), _joi().default.object({\n    npmPackageName: _joi().default.string().optional(),\n    dependencyConfig: _joi().default.func(),\n    projectConfig: _joi().default.func(),\n    linkConfig: _joi().default.func()\n  })).default({}),\n  commands: _joi().default.array().items(command).default([]),\n  healthChecks: _joi().default.array().items(healthCheck).default([])\n}).unknown(true).default();\n\nexports.dependencyConfig = dependencyConfig;\n\nvar projectConfig = _joi().default.object({\n  dependencies: map(_joi().default.string(), _joi().default.object({\n    root: _joi().default.string(),\n    platforms: map(_joi().default.string(), _joi().default.any()).keys({\n      ios: _joi().default.object({\n        podspecPath: _joi().default.string(),\n        configurations: _joi().default.array().items(_joi().default.string()).default([]),\n        scriptPhases: _joi().default.array().items(_joi().default.object()).default([])\n      }).allow(null),\n      android: _joi().default.object({\n        sourceDir: _joi().default.string(),\n        packageImportPath: _joi().default.string(),\n        packageInstance: _joi().default.string(),\n        dependencyConfiguration: _joi().default.string(),\n        buildTypes: _joi().default.array().items(_joi().default.string()).default([])\n      }).allow(null)\n    })\n  }).allow(null)).default({}),\n  reactNativePath: _joi().default.string(),\n  project: map(_joi().default.string(), _joi().default.any()).keys({\n    ios: _joi().default.object({\n      sourceDir: _joi().default.string()\n    }).default({}),\n    android: _joi().default.object({\n      sourceDir: _joi().default.string(),\n      appName: _joi().default.string(),\n      manifestPath: _joi().default.string(),\n      packageName: _joi().default.string(),\n      dependencyConfiguration: _joi().default.string()\n    }).default({})\n  }).default(),\n  assets: _joi().default.array().items(_joi().default.string()).default([]),\n  commands: _joi().default.array().items(command).default([]),\n  platforms: map(_joi().default.string(), _joi().default.object({\n    npmPackageName: _joi().default.string().optional(),\n    dependencyConfig: _joi().default.func(),\n    projectConfig: _joi().default.func(),\n    linkConfig: _joi().default.func()\n  })).default({})\n}).unknown(true).default();\n\nexports.projectConfig = projectConfig;","map":{"version":3,"sources":["../src/schema.ts"],"names":["map","t","command","name","description","usage","func","options","parse","default","ignoreUndefined","examples","desc","cmd","healthCheck","label","healthchecks","isRequired","getDiagnostics","win32AutomaticFix","darwinAutomaticFix","linuxAutomaticFix","runAutomaticFix","dependencyConfig","dependency","platforms","ios","scriptPhases","configurations","android","sourceDir","manifestPath","packageName","packageImportPath","packageInstance","dependencyConfiguration","buildTypes","npmPackageName","projectConfig","linkConfig","commands","healthChecks","dependencies","root","podspecPath","reactNativePath","project","appName","assets"],"mappings":"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","sourcesContent":["/**\n * This schema is used by `cli-config` to validate the structure. Make sure\n * this file stays up to date with `cli-types` package.\n *\n * In the future, it would be great to generate this file automatically from the\n * Typescript types.\n */\nimport t, {SchemaLike} from 'joi';\n\nconst map = (key: RegExp | SchemaLike, value: SchemaLike) =>\n  t.object().unknown(true).pattern(key, value);\n\n/**\n * Schema for CommandT\n */\nconst command = t.object({\n  name: t.string().required(),\n  description: t.string(),\n  usage: t.string(),\n  func: t.func().required(),\n  options: t.array().items(\n    t\n      .object({\n        name: t.string().required(),\n        description: t.string(),\n        parse: t.func(),\n        default: t\n          .alternatives()\n          .try(t.bool(), t.number(), t.string().allow(''), t.func()),\n      })\n      .rename('command', 'name', {ignoreUndefined: true}),\n  ),\n  examples: t.array().items(\n    t.object({\n      desc: t.string().required(),\n      cmd: t.string().required(),\n    }),\n  ),\n});\n\n/**\n * Schema for HealthChecksT\n */\nconst healthCheck = t.object({\n  label: t.string().required(),\n  healthchecks: t.array().items(\n    t.object({\n      label: t.string().required(),\n      isRequired: t.bool(),\n      description: t.string(),\n      getDiagnostics: t.func(),\n      win32AutomaticFix: t.func(),\n      darwinAutomaticFix: t.func(),\n      linuxAutomaticFix: t.func(),\n      runAutomaticFix: t.func().required(),\n    }),\n  ),\n});\n\n/**\n * Schema for UserDependencyConfig\n */\nexport const dependencyConfig = t\n  .object({\n    dependency: t\n      .object({\n        platforms: map(t.string(), t.any())\n          .keys({\n            ios: t\n              // IOSDependencyParams\n              .object({\n                scriptPhases: t.array().items(t.object()),\n                configurations: t.array().items(t.string()).default([]),\n              })\n              .allow(null),\n            android: t\n              // AndroidDependencyParams\n              .object({\n                sourceDir: t.string(),\n                manifestPath: t.string(),\n                packageName: t.string(),\n                packageImportPath: t.string(),\n                packageInstance: t.string(),\n                dependencyConfiguration: t.string(),\n                buildTypes: t.array().items(t.string()).default([]),\n              })\n              .allow(null),\n          })\n          .default(),\n      })\n      .default(),\n    platforms: map(\n      t.string(),\n      t.object({\n        npmPackageName: t.string().optional(),\n        dependencyConfig: t.func(),\n        projectConfig: t.func(),\n        linkConfig: t.func(),\n      }),\n    ).default({}),\n    commands: t.array().items(command).default([]),\n    healthChecks: t.array().items(healthCheck).default([]),\n  })\n  .unknown(true)\n  .default();\n\n/**\n * Schema for ProjectConfig\n */\nexport const projectConfig = t\n  .object({\n    dependencies: map(\n      t.string(),\n      t\n        .object({\n          root: t.string(),\n          platforms: map(t.string(), t.any()).keys({\n            ios: t\n              // IOSDependencyConfig\n              .object({\n                podspecPath: t.string(),\n                configurations: t.array().items(t.string()).default([]),\n                scriptPhases: t.array().items(t.object()).default([]),\n              })\n              .allow(null),\n            android: t\n              // AndroidDependencyConfig\n              .object({\n                sourceDir: t.string(),\n                packageImportPath: t.string(),\n                packageInstance: t.string(),\n                dependencyConfiguration: t.string(),\n                buildTypes: t.array().items(t.string()).default([]),\n              })\n              .allow(null),\n          }),\n        })\n        .allow(null),\n    ).default({}),\n    reactNativePath: t.string(),\n    project: map(t.string(), t.any())\n      .keys({\n        ios: t\n          // IOSProjectParams\n          .object({\n            sourceDir: t.string(),\n          })\n          .default({}),\n        android: t\n          // AndroidProjectParams\n          .object({\n            sourceDir: t.string(),\n            appName: t.string(),\n            manifestPath: t.string(),\n            packageName: t.string(),\n            dependencyConfiguration: t.string(),\n          })\n          .default({}),\n      })\n      .default(),\n    assets: t.array().items(t.string()).default([]),\n    commands: t.array().items(command).default([]),\n    platforms: map(\n      t.string(),\n      t.object({\n        npmPackageName: t.string().optional(),\n        dependencyConfig: t.func(),\n        projectConfig: t.func(),\n        linkConfig: t.func(),\n      }),\n    ).default({}),\n  })\n  .unknown(true)\n  .default();\n"]},"metadata":{},"sourceType":"script"}