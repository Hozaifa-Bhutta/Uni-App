{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _readline() {\n  var data = _interopRequireDefault(require(\"readline\"));\n\n  _readline = function _readline() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction printWatchModeInstructions() {\n  _cliTools().logger.log('\\n\\nTo reload the app press \"r\"\\nTo open developer menu press \"d\"');\n}\n\nfunction enableWatchMode(messageSocket) {\n  if (!process.stdin.setRawMode) {\n    _cliTools().logger.debug('Watch mode is not supported in this environment');\n\n    return;\n  }\n\n  _readline().default.emitKeypressEvents(process.stdin);\n\n  process.stdin.setRawMode(true);\n  var restore = (0, _cliTools().hookStdout)(function (output) {\n    if (output.includes('Fast - Scalable - Integrated')) {\n      printWatchModeInstructions();\n      restore();\n    }\n  });\n  process.stdin.on('keypress', function (_key, data) {\n    var ctrl = data.ctrl,\n        name = data.name;\n\n    if (ctrl === true) {\n      switch (name) {\n        case 'c':\n          process.exit();\n          break;\n\n        case 'z':\n          process.emit('SIGTSTP', 'SIGTSTP');\n          break;\n      }\n    } else if (name === 'r') {\n      messageSocket.broadcast('reload', null);\n\n      _cliTools().logger.info('Reloading app...');\n    } else if (name === 'd') {\n      messageSocket.broadcast('devMenu', null);\n\n      _cliTools().logger.info('Opening developer menu...');\n    } else {\n      console.log(_key);\n    }\n  });\n}\n\nvar _default = enableWatchMode;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/start/watchMode.ts"],"names":["logger","process","readline","restore","output","printWatchModeInstructions","name","ctrl","messageSocket","console","enableWatchMode"],"mappings":";;;;;;;AAAA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;;;;;;;AAEA,SAAA,0BAAA,GAAsC;EACpCA,SAAAA,GAAAA,MAAAA,CAAAA,GAAAA,CAAAA,mEAAAA;AAGD;;AAED,SAAA,eAAA,CAAA,aAAA,EAA6C;EAI3C,IAAI,CAACC,OAAO,CAAPA,KAAAA,CAAL,UAAA,EAA+B;IAC7BD,SAAAA,GAAAA,MAAAA,CAAAA,KAAAA,CAAAA,iDAAAA;;IACA;EACD;;EAEDE,SAAAA,GAAAA,OAAAA,CAAAA,kBAAAA,CAA4BD,OAAO,CAAnCC,KAAAA;;EAEAD,OAAO,CAAPA,KAAAA,CAAAA,UAAAA,CAX2C,IAW3CA;EAKA,IAAME,OAAO,GAAG,CAAA,GAAA,SAAA,GAAA,UAAA,EAAYC,UAAAA,MAAD,EAAoB;IAC7C,IAAIA,MAAM,CAANA,QAAAA,CAAJ,8BAAIA,CAAJ,EAAqD;MACnDC,0BAA0B;MAC1BF,OAAO;IACR;EAJH,CAAgB,CAAhB;EAOAF,OAAO,CAAPA,KAAAA,CAAAA,EAAAA,CAAAA,UAAAA,EAA6B,UAAA,IAAA,EAAA,IAAA,EAAgB;IAC3C,IAAM,IAAN,GAAA,IAAA,CAAM,IAAN;IAAA,IAAaK,IAAb,GAAA,IAAA,CAAaA,IAAb;;IACA,IAAIC,IAAI,KAAR,IAAA,EAAmB;MACjB,QAAA,IAAA;QACE,KAAA,GAAA;UACEN,OAAO,CAAPA,IAAAA;UACA;;QACF,KAAA,GAAA;UACEA,OAAO,CAAPA,IAAAA,CAAAA,SAAAA,EAAAA,SAAAA;UACA;MANJ;IADF,CAAA,MASO,IAAIK,IAAI,KAAR,GAAA,EAAkB;MACvBE,aAAa,CAAbA,SAAAA,CAAAA,QAAAA,EAAAA,IAAAA;;MACAR,SAAAA,GAAAA,MAAAA,CAAAA,IAAAA,CAAAA,kBAAAA;IAFK,CAAA,MAGA,IAAIM,IAAI,KAAR,GAAA,EAAkB;MACvBE,aAAa,CAAbA,SAAAA,CAAAA,SAAAA,EAAAA,IAAAA;;MACAR,SAAAA,GAAAA,MAAAA,CAAAA,IAAAA,CAAAA,2BAAAA;IAFK,CAAA,MAGA;MACLS,OAAO,CAAPA,GAAAA,CAAAA,IAAAA;IACD;EAnBHR,CAAAA;AAqBD;;eAEcS,e","sourcesContent":["import readline from 'readline';\nimport {logger, hookStdout} from '@react-native-community/cli-tools';\n\nfunction printWatchModeInstructions() {\n  logger.log(\n    '\\n\\nTo reload the app press \"r\"\\nTo open developer menu press \"d\"',\n  );\n}\n\nfunction enableWatchMode(messageSocket: any) {\n  // We need to set this to true to catch key presses individually.\n  // As a result we have to implement our own method for exiting\n  // and other commands (e.g. ctrl+c & ctrl+z)\n  if (!process.stdin.setRawMode) {\n    logger.debug('Watch mode is not supported in this environment');\n    return;\n  }\n\n  readline.emitKeypressEvents(process.stdin);\n\n  process.stdin.setRawMode(true);\n\n  // We have no way of knowing when the dependency graph is done loading\n  // except by hooking into stdout itself. We want to print instructions\n  // right after its done loading.\n  const restore = hookStdout((output: string) => {\n    if (output.includes('Fast - Scalable - Integrated')) {\n      printWatchModeInstructions();\n      restore();\n    }\n  });\n\n  process.stdin.on('keypress', (_key, data) => {\n    const {ctrl, name} = data;\n    if (ctrl === true) {\n      switch (name) {\n        case 'c':\n          process.exit();\n          break;\n        case 'z':\n          process.emit('SIGTSTP', 'SIGTSTP');\n          break;\n      }\n    } else if (name === 'r') {\n      messageSocket.broadcast('reload', null);\n      logger.info('Reloading app...');\n    } else if (name === 'd') {\n      messageSocket.broadcast('devMenu', null);\n      logger.info('Opening developer menu...');\n    } else {\n      console.log(_key);\n    }\n  });\n}\n\nexport default enableWatchMode;\n"]},"metadata":{},"sourceType":"script"}