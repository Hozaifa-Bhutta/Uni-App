{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _checkInstallation = require(\"../checkInstallation\");\n\nvar _installPods = require(\"../installPods\");\n\nvar _common = require(\"./common\");\n\nvar _brewInstall = require(\"../brewInstall\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar label = 'CocoaPods';\nvar _default = {\n  label: label,\n  description: 'Required for installing iOS dependencies',\n  getDiagnostics: function getDiagnostics() {\n    return _regeneratorRuntime.async(function getDiagnostics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap((0, _checkInstallation.isSoftwareNotInstalled)('pod'));\n\n          case 2:\n            _context.t0 = _context.sent;\n            return _context.abrupt(\"return\", {\n              needsToBeFixed: _context.t0\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  runAutomaticFix: function runAutomaticFix(_ref) {\n    var loader, _await, installMethod, promptQuestion, installMethodCapitalized, loaderInstallationMessage, loaderSucceedMessage, options;\n\n    return _regeneratorRuntime.async(function runAutomaticFix$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            loader = _ref.loader;\n            loader.stop();\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap((0, _installPods.promptCocoaPodsInstallationQuestion)());\n\n          case 4:\n            _await = _context2.sent;\n            installMethod = _await.installMethod;\n            promptQuestion = _await.promptQuestion;\n            installMethodCapitalized = installMethod === 'homebrew' ? installMethod.substr(0, 1).toUpperCase() + installMethod.substr(1) : installMethod;\n            loaderInstallationMessage = label + \" (installing with \" + installMethodCapitalized + \")\";\n            loaderSucceedMessage = label + \" (installed with \" + installMethodCapitalized + \")\";\n            (0, _common.removeMessage)(promptQuestion);\n\n            if (!(installMethod === 'gem')) {\n              _context2.next = 31;\n              break;\n            }\n\n            loader.start(loaderInstallationMessage);\n            options = ['install', 'cocoapods', '--no-document'];\n            _context2.prev = 14;\n            _context2.next = 17;\n            return _regeneratorRuntime.awrap((0, _execa().default)('gem', options));\n\n          case 17:\n            return _context2.abrupt(\"return\", loader.succeed(loaderSucceedMessage));\n\n          case 20:\n            _context2.prev = 20;\n            _context2.t0 = _context2[\"catch\"](14);\n            _context2.prev = 22;\n            _context2.next = 25;\n            return _regeneratorRuntime.awrap((0, _installPods.runSudo)(\"gem \" + options.join(' ')));\n\n          case 25:\n            return _context2.abrupt(\"return\", loader.succeed(loaderSucceedMessage));\n\n          case 28:\n            _context2.prev = 28;\n            _context2.t1 = _context2[\"catch\"](22);\n            (0, _common.logError)({\n              healthcheck: label,\n              loader: loader,\n              error: _context2.t1,\n              command: 'sudo gem install cocoapods'\n            });\n\n          case 31:\n            if (!(installMethod === 'homebrew')) {\n              _context2.next = 35;\n              break;\n            }\n\n            _context2.next = 34;\n            return _regeneratorRuntime.awrap((0, _brewInstall.brewInstall)({\n              pkg: 'cocoapods',\n              label: loaderInstallationMessage,\n              loader: loader,\n              onSuccess: function onSuccess() {\n                return loader.succeed(loaderSucceedMessage);\n              }\n            }));\n\n          case 34:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 35:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[14, 20], [22, 28]], Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["../../../src/tools/healthchecks/cocoaPods.ts"],"names":["label","description","getDiagnostics","needsToBeFixed","runAutomaticFix","loader","promptQuestion","installMethodCapitalized","installMethod","loaderInstallationMessage","loaderSucceedMessage","options","healthcheck","error","command","pkg","onSuccess"],"mappings":";;;;;;;;;AAAA,SAAA,MAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;EAAA,MAAA,GAAA,kBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,IAAA,kBAAA,GAAA,OAAA,wBAAA;;AACA,IAAA,YAAA,GAAA,OAAA,kBAAA;;AACA,IAAA,OAAA,GAAA,OAAA,YAAA;;AACA,IAAA,YAAA,GAAA,OAAA,kBAAA;;;;;;;;AAGA,IAAMA,KAAK,GAAX,WAAA;eAEe;EACbA,KADa,EACbA,KADa;EAEbC,WAAW,EAFE,0CAAA;EAGbC,cAAc,EAAE;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,iCACQ,CAAA,GAAA,kBAAA,CAAA,sBAAA,EAAA,KAAA,CADR;;UAAA;YAAA;YAAA;cACdC,cADc;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAHH;EAMbC,eAAe,EAAE;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAQC,MAAR,QAAQA,MAAR;YACfA,MAAM,CAANA,IAAAA;YADe;YAAA,iCAML,CAAA,GAAA,YAAA,CANyB,mCAMzB,GANK;;UAAA;YAAA;YAGT,aAHS,UAGT,aAHS;YAKbC,cALa,UAKbA,cALa;YASTC,wBATS,GAUbC,aAAa,KAAbA,UAAAA,GACIA,aAAa,CAAbA,MAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,WAAAA,KAA2CA,aAAa,CAAbA,MAAAA,CAD/CA,CAC+CA,CAD/CA,GADF,aATe;YAaTC,yBAbS,GAasBT,KAbtB,0BAaf,wBAbe;YAcTU,oBAdS,GAciBV,KAdjB,yBAAoB,wBAApB;YAiBf,CAAA,GAAA,OAAA,CAAA,aAAA,EAAA,cAAA;;YAjBe,MAmBXQ,aAAa,KAAjB,KAnBe;cAAA;cAAA;YAAA;;YAoBbH,MAAM,CAANA,KAAAA,CAAAA,yBAAAA;YAEMM,OAtBO,GAsBG,CAAA,SAAA,EAAA,WAAA,EAAhB,eAAgB,CAtBH;YAAA;YAAA;YAAA,iCA0BL,CAAA,GAAA,MAAA,GAAA,OAAA,EAAA,KAAA,EAAN,OAAM,CA1BK;;UAAA;YAAA,kCA4BJN,MAAM,CAANA,OAAAA,CAAP,oBAAOA,CA5BI;;UAAA;YAAA;YAAA;YAAA;YAAA;YAAA,iCAgCH,CAAA,GAAA,YAAA,CAAA,OAAA,WAAeM,OAAO,CAAPA,IAAAA,CAArB,GAAqBA,CAAf,CAhCG;;UAAA;YAAA,kCAkCFN,MAAM,CAANA,OAAAA,CAAP,oBAAOA,CAlCE;;UAAA;YAAA;YAAA;YAoCT,CAAA,GAAA,OAAA,CAAA,QAAA,EAAS;cACPO,WAAW,EADJ,KAAA;cAEPP,MAFO,EAEPA,MAFO;cAGPQ,KAHO,cAAA;cAIPC,OAAO,EAAE;YAJF,CAAT;;UApCS;YAAA,MA8CXN,aAAa,KAAjB,UA9Ce;cAAA;cAAA;YAAA;;YAAA;YAAA,iCA+CA,CAAA,GAAA,YAAA,CAAA,WAAA,EAAY;cACvBO,GAAG,EADoB,WAAA;cAEvBf,KAAK,EAFkB,yBAAA;cAGvBK,MAHuB,EAGvBA,MAHuB;cAIvBW,SAAS,EAAE;gBAAA,OAAMX,MAAM,CAANA,OAAAA,CAAAA,oBAAAA,CAAN;cAAA;YAJY,CAAZ,CA/CA;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;AANJ,C","sourcesContent":["import execa from 'execa';\nimport {isSoftwareNotInstalled} from '../checkInstallation';\nimport {promptCocoaPodsInstallationQuestion, runSudo} from '../installPods';\nimport {removeMessage, logError} from './common';\nimport {brewInstall} from '../brewInstall';\nimport {HealthCheckInterface} from '../../types';\n\nconst label = 'CocoaPods';\n\nexport default {\n  label,\n  description: 'Required for installing iOS dependencies',\n  getDiagnostics: async () => ({\n    needsToBeFixed: await isSoftwareNotInstalled('pod'),\n  }),\n  runAutomaticFix: async ({loader}) => {\n    loader.stop();\n\n    const {\n      installMethod,\n      promptQuestion,\n    } = await promptCocoaPodsInstallationQuestion();\n\n    // Capitalise `Homebrew` when printing on the screen\n    const installMethodCapitalized =\n      installMethod === 'homebrew'\n        ? installMethod.substr(0, 1).toUpperCase() + installMethod.substr(1)\n        : installMethod;\n    const loaderInstallationMessage = `${label} (installing with ${installMethodCapitalized})`;\n    const loaderSucceedMessage = `${label} (installed with ${installMethodCapitalized})`;\n\n    // Remove the prompt after the question of how to install CocoaPods is answered\n    removeMessage(promptQuestion);\n\n    if (installMethod === 'gem') {\n      loader.start(loaderInstallationMessage);\n\n      const options = ['install', 'cocoapods', '--no-document'];\n\n      try {\n        // First attempt to install `cocoapods`\n        await execa('gem', options);\n\n        return loader.succeed(loaderSucceedMessage);\n      } catch (_error) {\n        // If that doesn't work then try with sudo\n        try {\n          await runSudo(`gem ${options.join(' ')}`);\n\n          return loader.succeed(loaderSucceedMessage);\n        } catch (error) {\n          logError({\n            healthcheck: label,\n            loader,\n            error,\n            command: 'sudo gem install cocoapods',\n          });\n        }\n      }\n    }\n\n    if (installMethod === 'homebrew') {\n      return await brewInstall({\n        pkg: 'cocoapods',\n        label: loaderInstallationMessage,\n        loader,\n        onSuccess: () => loader.succeed(loaderSucceedMessage),\n      });\n    }\n  },\n} as HealthCheckInterface;\n"]},"metadata":{},"sourceType":"script"}