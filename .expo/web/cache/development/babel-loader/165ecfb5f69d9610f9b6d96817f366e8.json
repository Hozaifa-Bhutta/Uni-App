{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.installTemplatePackage = installTemplatePackage;\nexports.getTemplateConfig = getTemplateConfig;\nexports.copyTemplate = copyTemplate;\nexports.executePostInitScript = executePostInitScript;\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar PackageManager = _interopRequireWildcard(require(\"../../tools/packageManager\"));\n\nvar _copyFiles = _interopRequireDefault(require(\"../../tools/copyFiles\"));\n\nvar _replacePathSepForRegex = _interopRequireDefault(require(\"../../tools/replacePathSepForRegex\"));\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction installTemplatePackage(templateName, root, npm) {\n  return _regeneratorRuntime.async(function installTemplatePackage$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _cliTools().logger.debug(\"Installing template from \" + templateName);\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(PackageManager.init({\n            preferYarn: !npm,\n            silent: true,\n            root: root\n          }));\n\n        case 3:\n          return _context.abrupt(\"return\", PackageManager.install([templateName], {\n            preferYarn: !npm,\n            silent: true,\n            root: root\n          }));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getTemplateConfig(templateName, templateSourceDir) {\n  var configFilePath = _path().default.resolve(templateSourceDir, 'node_modules', templateName, 'template.config.js');\n\n  _cliTools().logger.debug(\"Getting config from \" + configFilePath);\n\n  if (!_fs().default.existsSync(configFilePath)) {\n    throw new (_cliTools().CLIError)(\"Couldn't find the \\\"\" + configFilePath + \" file inside \\\"\" + templateName + \"\\\" template. Please make sure the template is valid.\\n      Read more: \" + _chalk().default.underline.dim('https://github.com/react-native-community/cli/blob/master/docs/init.md#creating-custom-template'));\n  }\n\n  return require(configFilePath);\n}\n\nfunction copyTemplate(templateName, templateDir, templateSourceDir) {\n  var templatePath, regexStr;\n  return _regeneratorRuntime.async(function copyTemplate$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          templatePath = _path().default.resolve(templateSourceDir, 'node_modules', templateName, templateDir);\n\n          _cliTools().logger.debug(\"Copying template from \" + templatePath);\n\n          regexStr = _path().default.resolve(templatePath, 'node_modules');\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap((0, _copyFiles.default)(templatePath, process.cwd(), {\n            exclude: [new RegExp((0, _replacePathSepForRegex.default)(regexStr))]\n          }));\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction executePostInitScript(templateName, postInitScript, templateSourceDir) {\n  var scriptPath = _path().default.resolve(templateSourceDir, 'node_modules', templateName, postInitScript);\n\n  _cliTools().logger.debug(\"Executing post init script located \" + scriptPath);\n\n  return (0, _execa().default)(scriptPath, {\n    stdio: 'inherit'\n  });\n}","map":{"version":3,"sources":["../../../src/commands/init/template.ts"],"names":["logger","preferYarn","silent","root","configFilePath","path","fs","CLIError","templateName","chalk","require","templatePath","regexStr","process","exclude","scriptPath","stdio"],"mappings":"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","sourcesContent":["import execa from 'execa';\nimport path from 'path';\nimport {logger, CLIError} from '@react-native-community/cli-tools';\nimport * as PackageManager from '../../tools/packageManager';\nimport copyFiles from '../../tools/copyFiles';\nimport replacePathSepForRegex from '../../tools/replacePathSepForRegex';\nimport fs from 'fs';\nimport chalk from 'chalk';\n\nexport type TemplateConfig = {\n  placeholderName: string;\n  templateDir: string;\n  postInitScript?: string;\n  titlePlaceholder?: string;\n};\n\nexport async function installTemplatePackage(\n  templateName: string,\n  root: string,\n  npm?: boolean,\n) {\n  logger.debug(`Installing template from ${templateName}`);\n\n  await PackageManager.init({\n    preferYarn: !npm,\n    silent: true,\n    root,\n  });\n\n  return PackageManager.install([templateName], {\n    preferYarn: !npm,\n    silent: true,\n    root,\n  });\n}\n\nexport function getTemplateConfig(\n  templateName: string,\n  templateSourceDir: string,\n): TemplateConfig {\n  const configFilePath = path.resolve(\n    templateSourceDir,\n    'node_modules',\n    templateName,\n    'template.config.js',\n  );\n\n  logger.debug(`Getting config from ${configFilePath}`);\n  if (!fs.existsSync(configFilePath)) {\n    throw new CLIError(\n      `Couldn't find the \"${configFilePath} file inside \"${templateName}\" template. Please make sure the template is valid.\n      Read more: ${chalk.underline.dim(\n        'https://github.com/react-native-community/cli/blob/master/docs/init.md#creating-custom-template',\n      )}`,\n    );\n  }\n  return require(configFilePath);\n}\n\nexport async function copyTemplate(\n  templateName: string,\n  templateDir: string,\n  templateSourceDir: string,\n) {\n  const templatePath = path.resolve(\n    templateSourceDir,\n    'node_modules',\n    templateName,\n    templateDir,\n  );\n\n  logger.debug(`Copying template from ${templatePath}`);\n  let regexStr = path.resolve(templatePath, 'node_modules');\n  await copyFiles(templatePath, process.cwd(), {\n    exclude: [new RegExp(replacePathSepForRegex(regexStr))],\n  });\n}\n\nexport function executePostInitScript(\n  templateName: string,\n  postInitScript: string,\n  templateSourceDir: string,\n) {\n  const scriptPath = path.resolve(\n    templateSourceDir,\n    'node_modules',\n    templateName,\n    postInitScript,\n  );\n\n  logger.debug(`Executing post init script located ${scriptPath}`);\n\n  return execa(scriptPath, {stdio: 'inherit'});\n}\n"]},"metadata":{},"sourceType":"script"}