{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createDebuggerProxyEndpoint;\n\nfunction _ws() {\n  var data = _interopRequireDefault(require(\"ws\"));\n\n  _ws = function _ws() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction createDebuggerProxyEndpoint() {\n  var WebSocketServer = _ws().default.Server;\n\n  var wss = new WebSocketServer({\n    noServer: true\n  });\n  var debuggerSocket;\n  var clientSocket;\n\n  function send(dest, message) {\n    if (!dest) {\n      return;\n    }\n\n    try {\n      dest.send(message);\n    } catch (e) {\n      _cliTools().logger.warn(e);\n    }\n  }\n\n  var debuggerSocketCloseHandler = function debuggerSocketCloseHandler() {\n    debuggerSocket = null;\n\n    if (clientSocket) {\n      clientSocket.close(1011, 'Debugger was disconnected');\n    }\n  };\n\n  var clientSocketCloseHandler = function clientSocketCloseHandler() {\n    clientSocket = null;\n    send(debuggerSocket, JSON.stringify({\n      method: '$disconnected'\n    }));\n  };\n\n  wss.on('connection', function (socket, request) {\n    var url = request.url;\n\n    if (url && url.indexOf('role=debugger') > -1) {\n      if (debuggerSocket) {\n        socket.close(1011, 'Another debugger is already connected');\n        return;\n      }\n\n      debuggerSocket = socket;\n\n      if (debuggerSocket) {\n        debuggerSocket.onerror = debuggerSocketCloseHandler;\n        debuggerSocket.onclose = debuggerSocketCloseHandler;\n\n        debuggerSocket.onmessage = function (_ref) {\n          var data = _ref.data;\n          return send(clientSocket, data);\n        };\n      }\n    } else if (url && url.indexOf('role=client') > -1) {\n      if (clientSocket) {\n        clientSocket.onerror = function () {};\n\n        clientSocket.onclose = function () {};\n\n        clientSocket.onmessage = function () {};\n\n        clientSocket.close(1011, 'Another client connected');\n      }\n\n      clientSocket = socket;\n      clientSocket.onerror = clientSocketCloseHandler;\n      clientSocket.onclose = clientSocketCloseHandler;\n\n      clientSocket.onmessage = function (_ref2) {\n        var data = _ref2.data;\n        return send(debuggerSocket, data);\n      };\n    } else {\n      socket.close(1011, 'Missing role param');\n    }\n  });\n  return {\n    server: wss,\n    isDebuggerConnected: function isDebuggerConnected() {\n      return !!debuggerSocket;\n    }\n  };\n}","map":{"version":3,"sources":["../../src/websocket/createDebuggerProxyEndpoint.ts"],"names":["WebSocketServer","ws","wss","noServer","dest","logger","debuggerSocketCloseHandler","debuggerSocket","clientSocket","clientSocketCloseHandler","send","method","url","socket","data","server","isDebuggerConnected"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport ws from 'ws';\nimport {logger} from '@react-native-community/cli-tools';\n\nexport default function createDebuggerProxyEndpoint(): {\n  server: ws.Server;\n  isDebuggerConnected: () => boolean;\n} {\n  const WebSocketServer = ws.Server;\n  const wss = new WebSocketServer({\n    noServer: true,\n  });\n\n  let debuggerSocket: ws | null;\n  let clientSocket: ws | null;\n\n  function send(dest: ws | null, message: ws.Data) {\n    if (!dest) {\n      return;\n    }\n\n    try {\n      dest.send(message);\n    } catch (e) {\n      logger.warn(e);\n      // Sometimes this call throws 'not opened'\n    }\n  }\n\n  const debuggerSocketCloseHandler = () => {\n    debuggerSocket = null;\n    if (clientSocket) {\n      clientSocket.close(1011, 'Debugger was disconnected');\n    }\n  };\n\n  const clientSocketCloseHandler = () => {\n    clientSocket = null;\n    send(debuggerSocket, JSON.stringify({method: '$disconnected'}));\n  };\n\n  wss.on('connection', (socket, request) => {\n    const {url} = request;\n\n    if (url && url.indexOf('role=debugger') > -1) {\n      if (debuggerSocket) {\n        socket.close(1011, 'Another debugger is already connected');\n        return;\n      }\n      debuggerSocket = socket;\n      if (debuggerSocket) {\n        debuggerSocket.onerror = debuggerSocketCloseHandler;\n        debuggerSocket.onclose = debuggerSocketCloseHandler;\n        debuggerSocket.onmessage = ({data}) => send(clientSocket, data);\n      }\n    } else if (url && url.indexOf('role=client') > -1) {\n      if (clientSocket) {\n        clientSocket.onerror = () => {};\n        clientSocket.onclose = () => {};\n        clientSocket.onmessage = () => {};\n        clientSocket.close(1011, 'Another client connected');\n      }\n      clientSocket = socket;\n      clientSocket.onerror = clientSocketCloseHandler;\n      clientSocket.onclose = clientSocketCloseHandler;\n      clientSocket.onmessage = ({data}) => send(debuggerSocket, data);\n    } else {\n      socket.close(1011, 'Missing role param');\n    }\n  });\n\n  return {\n    server: wss,\n    isDebuggerConnected() {\n      return !!debuggerSocket;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}