{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar encode = require(\"./encode\");\n\nvar MAX_SEGMENT_LENGTH = 7;\nvar ONE_MEG = 1024 * 1024;\nvar COMMA = 0x2c;\nvar SEMICOLON = 0x3b;\n\nvar B64Builder = function () {\n  function B64Builder() {\n    _classCallCheck(this, B64Builder);\n\n    this.buffer = Buffer.alloc(ONE_MEG);\n    this.pos = 0;\n    this.hasSegment = false;\n  }\n\n  _createClass(B64Builder, [{\n    key: \"markLines\",\n    value: function markLines(n) {\n      if (n < 1) {\n        return this;\n      }\n\n      this.hasSegment = false;\n\n      if (this.pos + n >= this.buffer.length) {\n        this._realloc();\n      }\n\n      while (n--) {\n        this.buffer[this.pos++] = SEMICOLON;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"startSegment\",\n    value: function startSegment(column) {\n      if (this.hasSegment) {\n        this._writeByte(COMMA);\n      } else {\n        this.hasSegment = true;\n      }\n\n      this.append(column);\n      return this;\n    }\n  }, {\n    key: \"append\",\n    value: function append(value) {\n      if (this.pos + MAX_SEGMENT_LENGTH >= this.buffer.length) {\n        this._realloc();\n      }\n\n      this.pos = encode(value, this.buffer, this.pos);\n      return this;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.buffer.toString(\"ascii\", 0, this.pos);\n    }\n  }, {\n    key: \"_writeByte\",\n    value: function _writeByte(byte) {\n      if (this.pos === this.buffer.length) {\n        this._realloc();\n      }\n\n      this.buffer[this.pos++] = byte;\n    }\n  }, {\n    key: \"_realloc\",\n    value: function _realloc() {\n      var buffer = this.buffer;\n      this.buffer = Buffer.alloc(buffer.length * 2);\n      buffer.copy(this.buffer);\n    }\n  }]);\n\n  return B64Builder;\n}();\n\nmodule.exports = B64Builder;","map":{"version":3,"names":["encode","require","MAX_SEGMENT_LENGTH","ONE_MEG","COMMA","SEMICOLON","B64Builder","buffer","Buffer","alloc","pos","hasSegment","n","length","_realloc","column","_writeByte","append","value","toString","byte","copy","module","exports"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/metro-source-map/src/B64Builder.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\"use strict\";\n\nconst encode = require(\"./encode\");\n\nconst MAX_SEGMENT_LENGTH = 7;\nconst ONE_MEG = 1024 * 1024;\nconst COMMA = 0x2c;\nconst SEMICOLON = 0x3b;\n/**\n * Efficient builder for base64 VLQ mappings strings.\n *\n * This class uses a buffer that is preallocated with one megabyte and is\n * reallocated dynamically as needed, doubling its size.\n *\n * Encoding never creates any complex value types (strings, objects), and only\n * writes character values to the buffer.\n *\n * For details about source map terminology and specification, check\n * https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n */\n\nclass B64Builder {\n  constructor() {\n    this.buffer = Buffer.alloc(ONE_MEG);\n    this.pos = 0;\n    this.hasSegment = false;\n  }\n  /**\n   * Adds `n` markers for generated lines to the mappings.\n   */\n\n  markLines(n) {\n    if (n < 1) {\n      return this;\n    }\n\n    this.hasSegment = false;\n\n    if (this.pos + n >= this.buffer.length) {\n      this._realloc();\n    }\n\n    while (n--) {\n      this.buffer[this.pos++] = SEMICOLON;\n    }\n\n    return this;\n  }\n  /**\n   * Starts a segment at the specified column offset in the current line.\n   */\n\n  startSegment(column) {\n    if (this.hasSegment) {\n      this._writeByte(COMMA);\n    } else {\n      this.hasSegment = true;\n    }\n\n    this.append(column);\n    return this;\n  }\n  /**\n   * Appends a single number to the mappings.\n   */\n\n  append(value) {\n    if (this.pos + MAX_SEGMENT_LENGTH >= this.buffer.length) {\n      this._realloc();\n    }\n\n    this.pos = encode(value, this.buffer, this.pos);\n    return this;\n  }\n  /**\n   * Returns the string representation of the mappings.\n   */\n\n  toString() {\n    return this.buffer.toString(\"ascii\", 0, this.pos);\n  }\n\n  _writeByte(byte) {\n    if (this.pos === this.buffer.length) {\n      this._realloc();\n    }\n\n    this.buffer[this.pos++] = byte;\n  }\n\n  _realloc() {\n    const { buffer } = this;\n    this.buffer = Buffer.alloc(buffer.length * 2);\n    buffer.copy(this.buffer);\n  }\n}\n\nmodule.exports = B64Builder;\n"],"mappings":"AASA;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,YAAtB;;AAEA,IAAMC,kBAAkB,GAAG,CAA3B;AACA,IAAMC,OAAO,GAAG,OAAO,IAAvB;AACA,IAAMC,KAAK,GAAG,IAAd;AACA,IAAMC,SAAS,GAAG,IAAlB;;IAcMC,U;EACJ,sBAAc;IAAA;;IACZ,KAAKC,MAAL,GAAcC,MAAM,CAACC,KAAP,CAAaN,OAAb,CAAd;IACA,KAAKO,GAAL,GAAW,CAAX;IACA,KAAKC,UAAL,GAAkB,KAAlB;EACD;;;;WAKD,mBAAUC,CAAV,EAAa;MACX,IAAIA,CAAC,GAAG,CAAR,EAAW;QACT,OAAO,IAAP;MACD;;MAED,KAAKD,UAAL,GAAkB,KAAlB;;MAEA,IAAI,KAAKD,GAAL,GAAWE,CAAX,IAAgB,KAAKL,MAAL,CAAYM,MAAhC,EAAwC;QACtC,KAAKC,QAAL;MACD;;MAED,OAAOF,CAAC,EAAR,EAAY;QACV,KAAKL,MAAL,CAAY,KAAKG,GAAL,EAAZ,IAA0BL,SAA1B;MACD;;MAED,OAAO,IAAP;IACD;;;WAKD,sBAAaU,MAAb,EAAqB;MACnB,IAAI,KAAKJ,UAAT,EAAqB;QACnB,KAAKK,UAAL,CAAgBZ,KAAhB;MACD,CAFD,MAEO;QACL,KAAKO,UAAL,GAAkB,IAAlB;MACD;;MAED,KAAKM,MAAL,CAAYF,MAAZ;MACA,OAAO,IAAP;IACD;;;WAKD,gBAAOG,KAAP,EAAc;MACZ,IAAI,KAAKR,GAAL,GAAWR,kBAAX,IAAiC,KAAKK,MAAL,CAAYM,MAAjD,EAAyD;QACvD,KAAKC,QAAL;MACD;;MAED,KAAKJ,GAAL,GAAWV,MAAM,CAACkB,KAAD,EAAQ,KAAKX,MAAb,EAAqB,KAAKG,GAA1B,CAAjB;MACA,OAAO,IAAP;IACD;;;WAKD,oBAAW;MACT,OAAO,KAAKH,MAAL,CAAYY,QAAZ,CAAqB,OAArB,EAA8B,CAA9B,EAAiC,KAAKT,GAAtC,CAAP;IACD;;;WAED,oBAAWU,IAAX,EAAiB;MACf,IAAI,KAAKV,GAAL,KAAa,KAAKH,MAAL,CAAYM,MAA7B,EAAqC;QACnC,KAAKC,QAAL;MACD;;MAED,KAAKP,MAAL,CAAY,KAAKG,GAAL,EAAZ,IAA0BU,IAA1B;IACD;;;WAED,oBAAW;MACT,IAAQb,MAAR,GAAmB,IAAnB,CAAQA,MAAR;MACA,KAAKA,MAAL,GAAcC,MAAM,CAACC,KAAP,CAAaF,MAAM,CAACM,MAAP,GAAgB,CAA7B,CAAd;MACAN,MAAM,CAACc,IAAP,CAAY,KAAKd,MAAjB;IACD;;;;;;AAGHe,MAAM,CAACC,OAAP,GAAiBjB,UAAjB"},"metadata":{},"sourceType":"script"}