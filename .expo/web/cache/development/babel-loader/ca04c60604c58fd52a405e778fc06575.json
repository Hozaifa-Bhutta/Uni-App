{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _toArray = require(\"@babel/runtime/helpers/toArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.init = init;\nexports.install = install;\nexports.installDev = installDev;\nexports.uninstall = uninstall;\nexports.installAll = installAll;\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _yarn = require(\"./yarn\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar packageManagers = {\n  yarn: {\n    init: ['init', '-y'],\n    install: ['add'],\n    installDev: ['add', '-D'],\n    uninstall: ['remove'],\n    installAll: ['install']\n  },\n  npm: {\n    init: ['init', '-y'],\n    install: ['install', '--save', '--save-exact'],\n    installDev: ['install', '--save-dev', '--save-exact'],\n    uninstall: ['uninstall', '--save'],\n    installAll: ['install']\n  }\n};\n\nfunction configurePackageManager(packageNames, action, options) {\n  var pm = shouldUseYarn(options) ? 'yarn' : 'npm';\n\n  var _packageManagers$pm$a = _toArray(packageManagers[pm][action]),\n      executable = _packageManagers$pm$a[0],\n      flags = _packageManagers$pm$a.slice(1);\n\n  var args = [executable].concat(_toConsumableArray(flags), _toConsumableArray(packageNames));\n  return executeCommand(pm, args, options);\n}\n\nfunction executeCommand(command, args, options) {\n  return (0, _execa().default)(command, args, {\n    stdio: options.silent && !_cliTools().logger.isVerbose() ? 'pipe' : 'inherit',\n    cwd: options.root\n  });\n}\n\nfunction shouldUseYarn(options) {\n  if (options && options.preferYarn !== undefined) {\n    return options.preferYarn && (0, _yarn.getYarnVersionIfAvailable)();\n  }\n\n  return (0, _yarn.isProjectUsingYarn)(options.root) && (0, _yarn.getYarnVersionIfAvailable)();\n}\n\nfunction init(options) {\n  return configurePackageManager([], 'init', options);\n}\n\nfunction install(packageNames, options) {\n  return configurePackageManager(packageNames, 'install', options);\n}\n\nfunction installDev(packageNames, options) {\n  return configurePackageManager(packageNames, 'installDev', options);\n}\n\nfunction uninstall(packageNames, options) {\n  return configurePackageManager(packageNames, 'uninstall', options);\n}\n\nfunction installAll(options) {\n  return configurePackageManager([], 'installAll', options);\n}","map":{"version":3,"sources":["../../src/tools/packageManager.ts"],"names":["packageManagers","yarn","init","install","installDev","uninstall","installAll","npm","pm","shouldUseYarn","args","executeCommand","stdio","options","logger","cwd","root","configurePackageManager"],"mappings":"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","sourcesContent":["import execa from 'execa';\nimport {logger} from '@react-native-community/cli-tools';\nimport {getYarnVersionIfAvailable, isProjectUsingYarn} from './yarn';\n\ntype Options = {\n  preferYarn?: boolean;\n  silent?: boolean;\n  root: string;\n};\n\nconst packageManagers = {\n  yarn: {\n    init: ['init', '-y'],\n    install: ['add'],\n    installDev: ['add', '-D'],\n    uninstall: ['remove'],\n    installAll: ['install'],\n  },\n  npm: {\n    init: ['init', '-y'],\n    install: ['install', '--save', '--save-exact'],\n    installDev: ['install', '--save-dev', '--save-exact'],\n    uninstall: ['uninstall', '--save'],\n    installAll: ['install'],\n  },\n};\n\nfunction configurePackageManager(\n  packageNames: Array<string>,\n  action: 'init' | 'install' | 'installDev' | 'installAll' | 'uninstall',\n  options: Options,\n) {\n  const pm = shouldUseYarn(options) ? 'yarn' : 'npm';\n  const [executable, ...flags] = packageManagers[pm][action];\n  const args = [executable, ...flags, ...packageNames];\n  return executeCommand(pm, args, options);\n}\n\nfunction executeCommand(\n  command: string,\n  args: Array<string>,\n  options: Options,\n) {\n  return execa(command, args, {\n    stdio: options.silent && !logger.isVerbose() ? 'pipe' : 'inherit',\n    cwd: options.root,\n  });\n}\n\nfunction shouldUseYarn(options: Options) {\n  if (options && options.preferYarn !== undefined) {\n    return options.preferYarn && getYarnVersionIfAvailable();\n  }\n\n  return isProjectUsingYarn(options.root) && getYarnVersionIfAvailable();\n}\n\nexport function init(options: Options) {\n  return configurePackageManager([], 'init', options);\n}\n\nexport function install(packageNames: Array<string>, options: Options) {\n  return configurePackageManager(packageNames, 'install', options);\n}\n\nexport function installDev(packageNames: Array<string>, options: Options) {\n  return configurePackageManager(packageNames, 'installDev', options);\n}\n\nexport function uninstall(packageNames: Array<string>, options: Options) {\n  return configurePackageManager(packageNames, 'uninstall', options);\n}\n\nexport function installAll(options: Options) {\n  return configurePackageManager([], 'installAll', options);\n}\n"]},"metadata":{},"sourceType":"script"}