{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n\n  _semver = function _semver() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar PackageManager = _interopRequireWildcard(require(\"../../tools/packageManager\"));\n\nfunction _cliDoctor() {\n  var data = require(\"@react-native-community/cli-doctor\");\n\n  _cliDoctor = function _cliDoctor() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar repos = {\n  'react-native': {\n    rawDiffUrl: 'https://raw.githubusercontent.com/react-native-community/rn-diff-purge/diffs/diffs',\n    webDiffUrl: 'https://react-native-community.github.io/upgrade-helper',\n    dependencyName: 'react-native'\n  },\n  'react-native-tvos': {\n    rawDiffUrl: 'https://raw.githubusercontent.com/react-native-tvos/rn-diff-purge-tv/diffs/diffs',\n    webDiffUrl: 'https://react-native-community.github.io/upgrade-helper',\n    dependencyName: 'react-native@npm:react-native-tvos'\n  }\n};\n\nvar isConnected = function isConnected(output) {\n  return !output.includes('the host is inaccessible');\n};\n\nvar checkForErrors = function checkForErrors(output) {\n  if (!output) {\n    return;\n  }\n\n  if (!isConnected(output)) {\n    throw new (_cliTools().CLIError)('Upgrade failed. You do not seem to have an internet connection.');\n  }\n\n  if (output.includes('npm ERR')) {\n    throw new (_cliTools().CLIError)(\"Upgrade failed with the following errors:\\n\" + output);\n  }\n\n  if (output.includes('npm WARN')) {\n    _cliTools().logger.warn(output);\n  }\n};\n\nvar getLatestRNVersion = function _callee(repoName) {\n  var _await, stdout, stderr;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _cliTools().logger.info('No version passed. Fetching latest...');\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap((0, _execa().default)('npm', ['info', repoName, 'version']));\n\n        case 3:\n          _await = _context.sent;\n          stdout = _await.stdout;\n          stderr = _await.stderr;\n          checkForErrors(stderr);\n          return _context.abrupt(\"return\", stdout);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar getRNPeerDeps = function _callee2(version, repoName) {\n  var _await2, stdout, stderr;\n\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap((0, _execa().default)('npm', ['info', repoName + \"@\" + version, 'peerDependencies', '--json']));\n\n        case 2:\n          _await2 = _context2.sent;\n          stdout = _await2.stdout;\n          stderr = _await2.stderr;\n          checkForErrors(stderr);\n          return _context2.abrupt(\"return\", JSON.parse(stdout));\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar getPatch = function _callee3(currentVersion, newVersion, config, repoName) {\n  var patch, _await3, data, patchWithRenamedProjects;\n\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _cliTools().logger.info(\"Fetching diff between v\" + currentVersion + \" and v\" + newVersion + \"...\");\n\n          _context3.prev = 1;\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap((0, _cliTools().fetch)(repos[repoName].rawDiffUrl + \"/\" + currentVersion + \"..\" + newVersion + \".diff\"));\n\n        case 4:\n          _await3 = _context3.sent;\n          data = _await3.data;\n          patch = data;\n          _context3.next = 15;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](1);\n\n          _cliTools().logger.error(_context3.t0.message);\n\n          _cliTools().logger.error(\"Failed to fetch diff for react-native@\" + newVersion + \". Maybe it's not released yet?\");\n\n          _cliTools().logger.info(\"For available releases to diff see: \" + _chalk().default.underline.dim('https://github.com/react-native-community/rn-diff-purge#diff-table-full-table-here'));\n\n          return _context3.abrupt(\"return\", null);\n\n        case 15:\n          patchWithRenamedProjects = patch;\n          Object.keys(config.project).forEach(function (platform) {\n            if (!config.project[platform]) {\n              return;\n            }\n\n            if (platform === 'ios') {\n              var xcodeProject = config.project.ios.xcodeProject;\n\n              if (xcodeProject) {\n                patchWithRenamedProjects = patchWithRenamedProjects.replace(new RegExp('RnDiffApp', 'g'), xcodeProject.name.replace('.xcodeproj', ''));\n              }\n            } else if (platform === 'android') {\n              patchWithRenamedProjects = patchWithRenamedProjects.replace(new RegExp('com\\\\.rndiffapp', 'g'), config.project[platform].packageName).replace(new RegExp('com\\\\.rndiffapp'.split('.').join('/'), 'g'), config.project[platform].packageName.split('.').join('/'));\n            } else {\n              _cliTools().logger.warn(\"Unsupported platform: \\\"\" + platform + \"\\\". `upgrade` only supports iOS and Android.\");\n            }\n          });\n          return _context3.abrupt(\"return\", patchWithRenamedProjects);\n\n        case 18:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n};\n\nvar getVersionToUpgradeTo = function _callee4(argv, currentVersion, projectDir, repoName) {\n  var argVersion, semverCoercedVersion, newVersion, _require, version, parsedVersion;\n\n  return _regeneratorRuntime.async(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          argVersion = argv[0];\n          semverCoercedVersion = _semver().default.coerce(argVersion);\n\n          if (!argVersion) {\n            _context4.next = 6;\n            break;\n          }\n\n          _context4.t0 = _semver().default.valid(argVersion) || (semverCoercedVersion ? semverCoercedVersion.version : null);\n          _context4.next = 9;\n          break;\n\n        case 6:\n          _context4.next = 8;\n          return _regeneratorRuntime.awrap(getLatestRNVersion(repoName));\n\n        case 8:\n          _context4.t0 = _context4.sent;\n\n        case 9:\n          newVersion = _context4.t0;\n\n          if (newVersion) {\n            _context4.next = 13;\n            break;\n          }\n\n          _cliTools().logger.error(\"Provided version \\\"\" + argv[0] + \"\\\" is not allowed. Please pass a valid semver version\");\n\n          return _context4.abrupt(\"return\", null);\n\n        case 13:\n          if (!_semver().default.gt(currentVersion, newVersion)) {\n            _context4.next = 16;\n            break;\n          }\n\n          _cliTools().logger.error(\"Trying to upgrade from newer version \\\"\" + currentVersion + \"\\\" to older \\\"\" + newVersion + \"\\\"\");\n\n          return _context4.abrupt(\"return\", null);\n\n        case 16:\n          if (!_semver().default.eq(currentVersion, newVersion)) {\n            _context4.next = 24;\n            break;\n          }\n\n          _require = require(_path().default.join(projectDir, 'package.json')), version = _require.dependencies['react-native'];\n          parsedVersion = version.split('@')[version.split('@').length - 1];\n\n          if (!_semver().default.satisfies(newVersion, parsedVersion)) {\n            _context4.next = 22;\n            break;\n          }\n\n          _cliTools().logger.warn(\"Specified version \\\"\" + newVersion + \"\\\" is already installed in node_modules and it satisfies \\\"\" + parsedVersion + \"\\\" semver range. No need to upgrade\");\n\n          return _context4.abrupt(\"return\", null);\n\n        case 22:\n          _cliTools().logger.error(\"Dependency mismatch. Specified version \\\"\" + newVersion + \"\\\" is already installed in node_modules and it doesn't satisfy \\\"\" + parsedVersion + \"\\\" semver range of your \\\"react-native\\\" dependency. Please re-install your dependencies\");\n\n          return _context4.abrupt(\"return\", null);\n\n        case 24:\n          return _context4.abrupt(\"return\", newVersion);\n\n        case 25:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar installDeps = function _callee5(root, newVersion, repoName) {\n  var peerDeps, deps;\n  return _regeneratorRuntime.async(function _callee5$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _cliTools().logger.info(\"Installing \\\"react-native@\" + newVersion + \"\\\" and its peer dependencies...\");\n\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(getRNPeerDeps(newVersion, repoName));\n\n        case 3:\n          peerDeps = _context5.sent;\n          deps = [repos[repoName].dependencyName + \"@\" + newVersion].concat(_toConsumableArray(Object.keys(peerDeps).map(function (module) {\n            return module + \"@\" + peerDeps[module];\n          })));\n          _context5.next = 7;\n          return _regeneratorRuntime.awrap(PackageManager.install(deps, {\n            silent: true,\n            root: root\n          }));\n\n        case 7:\n          _context5.next = 9;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['add', 'package.json']));\n\n        case 9:\n          _context5.prev = 9;\n          _context5.next = 12;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['add', 'yarn.lock']));\n\n        case 12:\n          _context5.next = 16;\n          break;\n\n        case 14:\n          _context5.prev = 14;\n          _context5.t0 = _context5[\"catch\"](9);\n\n        case 16:\n          _context5.prev = 16;\n          _context5.next = 19;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['add', 'package-lock.json']));\n\n        case 19:\n          _context5.next = 23;\n          break;\n\n        case 21:\n          _context5.prev = 21;\n          _context5.t1 = _context5[\"catch\"](16);\n\n        case 23:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[9, 14], [16, 21]], Promise);\n};\n\nvar installCocoaPodsDeps = function _callee6(projectDir) {\n  return _regeneratorRuntime.async(function _callee6$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (!(process.platform === 'darwin')) {\n            _context6.next = 11;\n            break;\n          }\n\n          _context6.prev = 1;\n\n          _cliTools().logger.info(\"Installing CocoaPods dependencies \" + _chalk().default.dim('(this may take a few minutes)'));\n\n          _context6.next = 5;\n          return _regeneratorRuntime.awrap((0, _cliDoctor().installPods)({\n            directory: projectDir.split('/').pop() || ''\n          }));\n\n        case 5:\n          _context6.next = 11;\n          break;\n\n        case 7:\n          _context6.prev = 7;\n          _context6.t0 = _context6[\"catch\"](1);\n\n          if (_context6.t0.stderr) {\n            _cliTools().logger.debug(\"\\\"pod install\\\" or \\\"pod repo update\\\" failed. Error output:\\n\" + _context6.t0.stderr);\n          }\n\n          _cliTools().logger.error('Installation of CocoaPods dependencies failed. Try to install them manually by running \"pod install\" in \"ios\" directory after finishing upgrade');\n\n        case 11:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[1, 7]], Promise);\n};\n\nvar applyPatch = function _callee7(currentVersion, newVersion, tmpPatchFile, repoName) {\n  var defaultExcludes, filesThatDontExist, filesThatFailedToApply, _await4, relativePathFromRoot, excludes, errorLines, _excludes;\n\n  return _regeneratorRuntime.async(function _callee7$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          defaultExcludes = ['package.json'];\n          filesThatDontExist = [];\n          filesThatFailedToApply = [];\n          _context7.next = 5;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['rev-parse', '--show-prefix']));\n\n        case 5:\n          _await4 = _context7.sent;\n          relativePathFromRoot = _await4.stdout;\n          _context7.prev = 7;\n          _context7.prev = 8;\n          excludes = defaultExcludes.map(function (e) {\n            return \"--exclude=\" + _path().default.join(relativePathFromRoot, e);\n          });\n          _context7.next = 12;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['apply', '--binary', '--check', tmpPatchFile].concat(_toConsumableArray(excludes), ['-p2', '--3way', \"--directory=\" + relativePathFromRoot])));\n\n        case 12:\n          _cliTools().logger.info('Applying diff...');\n\n          _context7.next = 23;\n          break;\n\n        case 15:\n          _context7.prev = 15;\n          _context7.t0 = _context7[\"catch\"](8);\n          errorLines = _context7.t0.stderr.split('\\n');\n          filesThatDontExist = _toConsumableArray(errorLines.filter(function (x) {\n            return x.includes('does not exist in index');\n          }).map(function (x) {\n            return x.replace(/^error: (.*): does not exist in index$/, '$1');\n          })).filter(Boolean);\n          filesThatFailedToApply = errorLines.filter(function (x) {\n            return x.includes('patch does not apply');\n          }).map(function (x) {\n            return x.replace(/^error: (.*): patch does not apply$/, '$1');\n          }).filter(Boolean);\n\n          _cliTools().logger.info('Applying diff...');\n\n          _cliTools().logger.warn(\"Excluding files that exist in the template, but not in your project:\\n\" + filesThatDontExist.map(function (file) {\n            return \"  - \" + _chalk().default.bold(file);\n          }).join('\\n'));\n\n          if (filesThatFailedToApply.length) {\n            _cliTools().logger.error(\"Excluding files that failed to apply the diff:\\n\" + filesThatFailedToApply.map(function (file) {\n              return \"  - \" + _chalk().default.bold(file);\n            }).join('\\n') + \"\\nPlease make sure to check the actual changes after the upgrade command is finished.\\nYou can find them in our Upgrade Helper web app: \" + _chalk().default.underline.dim(repos[repoName].webDiffUrl + \"/?from=\" + currentVersion + \"&to=\" + newVersion));\n          }\n\n        case 23:\n          _context7.prev = 23;\n          _excludes = [].concat(defaultExcludes, _toConsumableArray(filesThatDontExist), _toConsumableArray(filesThatFailedToApply)).map(function (e) {\n            return \"--exclude=\" + _path().default.join(relativePathFromRoot, e);\n          });\n          _context7.next = 27;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['apply', tmpPatchFile].concat(_toConsumableArray(_excludes), ['-p2', '--3way', \"--directory=\" + relativePathFromRoot])));\n\n        case 27:\n          return _context7.finish(23);\n\n        case 28:\n          _context7.next = 35;\n          break;\n\n        case 30:\n          _context7.prev = 30;\n          _context7.t1 = _context7[\"catch\"](7);\n\n          if (_context7.t1.stderr) {\n            _cliTools().logger.debug(\"\\\"git apply\\\" failed. Error output:\\n\" + _context7.t1.stderr);\n          }\n\n          _cliTools().logger.error('Automatically applying diff failed. We did our best to automatically upgrade as many files as possible');\n\n          return _context7.abrupt(\"return\", false);\n\n        case 35:\n          return _context7.abrupt(\"return\", true);\n\n        case 36:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, [[7, 30], [8, 15, 23, 28]], Promise);\n};\n\nfunction upgrade(argv, ctx) {\n  var tmpPatchFile, projectDir, _require2, rnName, currentVersion, repoName, newVersion, patch, patchSuccess, _await5, stdout;\n\n  return _regeneratorRuntime.async(function upgrade$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          tmpPatchFile = 'tmp-upgrade-rn.patch';\n          projectDir = ctx.root;\n          _require2 = require(_path().default.join(projectDir, 'node_modules/react-native/package.json')), rnName = _require2.name, currentVersion = _require2.version;\n          repoName = rnName === 'react-native-tvos' ? 'react-native-tvos' : 'react-native';\n          _context8.next = 6;\n          return _regeneratorRuntime.awrap(getVersionToUpgradeTo(argv, currentVersion, projectDir, repoName));\n\n        case 6:\n          newVersion = _context8.sent;\n\n          if (newVersion) {\n            _context8.next = 9;\n            break;\n          }\n\n          return _context8.abrupt(\"return\");\n\n        case 9:\n          _context8.next = 11;\n          return _regeneratorRuntime.awrap(getPatch(currentVersion, newVersion, ctx, repoName));\n\n        case 11:\n          patch = _context8.sent;\n\n          if (!(patch === null)) {\n            _context8.next = 14;\n            break;\n          }\n\n          return _context8.abrupt(\"return\");\n\n        case 14:\n          if (!(patch === '')) {\n            _context8.next = 22;\n            break;\n          }\n\n          _cliTools().logger.info('Diff has no changes to apply, proceeding further');\n\n          _context8.next = 18;\n          return _regeneratorRuntime.awrap(installDeps(projectDir, newVersion, repoName));\n\n        case 18:\n          _context8.next = 20;\n          return _regeneratorRuntime.awrap(installCocoaPodsDeps(projectDir));\n\n        case 20:\n          _cliTools().logger.success(\"Upgraded React Native to v\" + newVersion + \" \\uD83C\\uDF89. Now you can review and commit the changes\");\n\n          return _context8.abrupt(\"return\");\n\n        case 22:\n          _context8.prev = 22;\n\n          _fs().default.writeFileSync(tmpPatchFile, patch);\n\n          _context8.next = 26;\n          return _regeneratorRuntime.awrap(applyPatch(currentVersion, newVersion, tmpPatchFile, repoName));\n\n        case 26:\n          patchSuccess = _context8.sent;\n          _context8.next = 32;\n          break;\n\n        case 29:\n          _context8.prev = 29;\n          _context8.t0 = _context8[\"catch\"](22);\n          throw new Error(_context8.t0.stderr || _context8.t0);\n\n        case 32:\n          _context8.prev = 32;\n\n          try {\n            _fs().default.unlinkSync(tmpPatchFile);\n          } catch (e) {}\n\n          _context8.next = 36;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['status', '-s']));\n\n        case 36:\n          _await5 = _context8.sent;\n          stdout = _await5.stdout;\n\n          if (patchSuccess) {\n            _context8.next = 51;\n            break;\n          }\n\n          if (!stdout) {\n            _context8.next = 48;\n            break;\n          }\n\n          _cliTools().logger.warn('Continuing after failure. Some of the files are upgraded but you will need to deal with conflicts manually');\n\n          _context8.next = 43;\n          return _regeneratorRuntime.awrap(installDeps(projectDir, newVersion, repoName));\n\n        case 43:\n          _cliTools().logger.info('Running \"git status\" to check what changed...');\n\n          _context8.next = 46;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['status'], {\n            stdio: 'inherit'\n          }));\n\n        case 46:\n          _context8.next = 49;\n          break;\n\n        case 48:\n          _cliTools().logger.error('Patch failed to apply for unknown reason. Please fall back to manual way of upgrading');\n\n        case 49:\n          _context8.next = 58;\n          break;\n\n        case 51:\n          _context8.next = 53;\n          return _regeneratorRuntime.awrap(installDeps(projectDir, newVersion, repoName));\n\n        case 53:\n          _context8.next = 55;\n          return _regeneratorRuntime.awrap(installCocoaPodsDeps(projectDir));\n\n        case 55:\n          _cliTools().logger.info('Running \"git status\" to check what changed...');\n\n          _context8.next = 58;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['status'], {\n            stdio: 'inherit'\n          }));\n\n        case 58:\n          if (patchSuccess) {\n            _context8.next = 63;\n            break;\n          }\n\n          if (stdout) {\n            _cliTools().logger.warn('Please run \"git diff\" to review the conflicts and resolve them');\n          }\n\n          if (process.platform === 'darwin') {\n            _cliTools().logger.warn('After resolving conflicts don\\'t forget to run \"pod install\" inside \"ios\" directory');\n          }\n\n          _cliTools().logger.info(\"You may find these resources helpful:\\n\\u2022 Release notes: \" + _chalk().default.underline.dim(\"https://github.com/facebook/react-native/releases/tag/v\" + newVersion) + \"\\n\\u2022 Manual Upgrade Helper: \" + _chalk().default.underline.dim(repos[repoName].webDiffUrl + \"/?from=\" + currentVersion + \"&to=\" + newVersion) + \"\\n\\u2022 Git diff: \" + _chalk().default.underline.dim(repos[repoName].rawDiffUrl + \"/\" + currentVersion + \"..\" + newVersion + \".diff\"));\n\n          throw new (_cliTools().CLIError)('Upgrade failed. Please see the messages above for details');\n\n        case 63:\n          return _context8.finish(32);\n\n        case 64:\n          _cliTools().logger.success(\"Upgraded React Native to v\" + newVersion + \" \\uD83C\\uDF89. Now you can review and commit the changes\");\n\n        case 65:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, [[22, 29, 32, 64]], Promise);\n}\n\nvar upgradeCommand = {\n  name: 'upgrade [version]',\n  description: \"Upgrade your app's template files to the specified or latest npm version using `rn-diff-purge` project. Only valid semver versions are allowed.\",\n  func: upgrade\n};\nvar _default = upgradeCommand;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/upgrade/upgrade.ts"],"names":["repos","rawDiffUrl","webDiffUrl","dependencyName","isConnected","output","checkForErrors","CLIError","logger","getLatestRNVersion","stderr","getRNPeerDeps","repoName","JSON","getPatch","currentVersion","data","patch","chalk","patchWithRenamedProjects","Object","config","platform","xcodeProject","getVersionToUpgradeTo","argVersion","argv","semverCoercedVersion","semver","newVersion","dependencies","version","require","path","parsedVersion","installDeps","peerDeps","deps","module","silent","root","installCocoaPodsDeps","process","directory","projectDir","applyPatch","defaultExcludes","filesThatDontExist","filesThatFailedToApply","stdout","relativePathFromRoot","excludes","e","errorLines","x","file","tmpPatchFile","ctx","name","rnName","fs","patchSuccess","stdio","upgradeCommand","description","func","upgrade"],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport semver from 'semver';\nimport execa from 'execa';\nimport {Config} from '@react-native-community/cli-types';\nimport {logger, CLIError, fetch} from '@react-native-community/cli-tools';\nimport * as PackageManager from '../../tools/packageManager';\nimport {installPods} from '@react-native-community/cli-doctor';\n\ntype UpgradeError = {message: string; stderr: string};\n\n// https://react-native-community.github.io/upgrade-helper/?from=0.59.10&to=0.60.0-rc.3\n\ntype RepoNameType = 'react-native' | 'react-native-tvos';\n\nconst repos = {\n  'react-native': {\n    rawDiffUrl:\n      'https://raw.githubusercontent.com/react-native-community/rn-diff-purge/diffs/diffs',\n    webDiffUrl: 'https://react-native-community.github.io/upgrade-helper',\n    dependencyName: 'react-native',\n  },\n  'react-native-tvos': {\n    rawDiffUrl:\n      'https://raw.githubusercontent.com/react-native-tvos/rn-diff-purge-tv/diffs/diffs',\n    webDiffUrl: 'https://react-native-community.github.io/upgrade-helper',\n    dependencyName: 'react-native@npm:react-native-tvos',\n  },\n};\n\nconst isConnected = (output: string): boolean => {\n  // there is no reliable way of checking for internet connectivity, so we should just\n  // read the output from npm (to check for connectivity errors) which is faster and relatively more reliable.\n  return !output.includes('the host is inaccessible');\n};\n\nconst checkForErrors = (output: string): void => {\n  if (!output) {\n    return;\n  }\n  if (!isConnected(output)) {\n    throw new CLIError(\n      'Upgrade failed. You do not seem to have an internet connection.',\n    );\n  }\n\n  if (output.includes('npm ERR')) {\n    throw new CLIError(`Upgrade failed with the following errors:\\n${output}`);\n  }\n\n  if (output.includes('npm WARN')) {\n    logger.warn(output);\n  }\n};\n\nconst getLatestRNVersion = async (repoName: RepoNameType): Promise<string> => {\n  logger.info('No version passed. Fetching latest...');\n  const {stdout, stderr} = await execa('npm', ['info', repoName, 'version']);\n  checkForErrors(stderr);\n  return stdout;\n};\n\nconst getRNPeerDeps = async (\n  version: string,\n  repoName: RepoNameType,\n): Promise<{[key: string]: string}> => {\n  const {stdout, stderr} = await execa('npm', [\n    'info',\n    `${repoName}@${version}`,\n    'peerDependencies',\n    '--json',\n  ]);\n  checkForErrors(stderr);\n  return JSON.parse(stdout);\n};\n\nconst getPatch = async (\n  currentVersion: string,\n  newVersion: string,\n  config: Config,\n  repoName: RepoNameType,\n) => {\n  let patch;\n\n  logger.info(`Fetching diff between v${currentVersion} and v${newVersion}...`);\n\n  try {\n    const {data} = await fetch(\n      `${repos[repoName].rawDiffUrl}/${currentVersion}..${newVersion}.diff`,\n    );\n\n    patch = data;\n  } catch (error) {\n    logger.error((error as UpgradeError).message);\n    logger.error(\n      `Failed to fetch diff for react-native@${newVersion}. Maybe it's not released yet?`,\n    );\n    logger.info(\n      `For available releases to diff see: ${chalk.underline.dim(\n        'https://github.com/react-native-community/rn-diff-purge#diff-table-full-table-here',\n      )}`,\n    );\n    return null;\n  }\n\n  let patchWithRenamedProjects = patch;\n\n  Object.keys(config.project).forEach((platform) => {\n    if (!config.project[platform]) {\n      return;\n    }\n    if (platform === 'ios') {\n      const xcodeProject = config.project.ios!.xcodeProject;\n      if (xcodeProject) {\n        patchWithRenamedProjects = patchWithRenamedProjects.replace(\n          new RegExp('RnDiffApp', 'g'),\n          xcodeProject.name.replace('.xcodeproj', ''),\n        );\n      }\n    } else if (platform === 'android') {\n      patchWithRenamedProjects = patchWithRenamedProjects\n        .replace(\n          new RegExp('com\\\\.rndiffapp', 'g'),\n          config.project[platform]!.packageName,\n        )\n        .replace(\n          new RegExp('com\\\\.rndiffapp'.split('.').join('/'), 'g'),\n          config.project[platform]!.packageName.split('.').join('/'),\n        );\n    } else {\n      logger.warn(\n        `Unsupported platform: \"${platform}\". \\`upgrade\\` only supports iOS and Android.`,\n      );\n    }\n  });\n\n  return patchWithRenamedProjects;\n};\n\nconst getVersionToUpgradeTo = async (\n  argv: Array<string>,\n  currentVersion: string,\n  projectDir: string,\n  repoName: RepoNameType,\n) => {\n  const argVersion = argv[0];\n  const semverCoercedVersion = semver.coerce(argVersion);\n  const newVersion = argVersion\n    ? semver.valid(argVersion) ||\n      (semverCoercedVersion ? semverCoercedVersion.version : null)\n    : await getLatestRNVersion(repoName);\n\n  if (!newVersion) {\n    logger.error(\n      `Provided version \"${argv[0]}\" is not allowed. Please pass a valid semver version`,\n    );\n    return null;\n  }\n\n  if (semver.gt(currentVersion, newVersion)) {\n    logger.error(\n      `Trying to upgrade from newer version \"${currentVersion}\" to older \"${newVersion}\"`,\n    );\n    return null;\n  }\n  if (semver.eq(currentVersion, newVersion)) {\n    const {\n      dependencies: {'react-native': version},\n    } = require(path.join(projectDir, 'package.json'));\n\n    const parsedVersion = version.split('@')[version.split('@').length - 1];\n\n    if (semver.satisfies(newVersion, parsedVersion)) {\n      logger.warn(\n        `Specified version \"${newVersion}\" is already installed in node_modules and it satisfies \"${parsedVersion}\" semver range. No need to upgrade`,\n      );\n      return null;\n    }\n    logger.error(\n      `Dependency mismatch. Specified version \"${newVersion}\" is already installed in node_modules and it doesn't satisfy \"${parsedVersion}\" semver range of your \"react-native\" dependency. Please re-install your dependencies`,\n    );\n    return null;\n  }\n\n  return newVersion;\n};\n\nconst installDeps = async (\n  root: string,\n  newVersion: string,\n  repoName: RepoNameType,\n) => {\n  logger.info(\n    `Installing \"react-native@${newVersion}\" and its peer dependencies...`,\n  );\n  const peerDeps = await getRNPeerDeps(newVersion, repoName);\n  const deps = [\n    `${repos[repoName].dependencyName}@${newVersion}`,\n    ...Object.keys(peerDeps).map((module) => `${module}@${peerDeps[module]}`),\n  ];\n  await PackageManager.install(deps, {\n    silent: true,\n    root,\n  });\n  await execa('git', ['add', 'package.json']);\n  try {\n    await execa('git', ['add', 'yarn.lock']);\n  } catch (error) {\n    // ignore\n  }\n  try {\n    await execa('git', ['add', 'package-lock.json']);\n  } catch (error) {\n    // ignore\n  }\n};\n\nconst installCocoaPodsDeps = async (projectDir: string) => {\n  if (process.platform === 'darwin') {\n    try {\n      logger.info(\n        `Installing CocoaPods dependencies ${chalk.dim(\n          '(this may take a few minutes)',\n        )}`,\n      );\n      await installPods({\n        directory: projectDir.split('/').pop() || '',\n      });\n    } catch (error) {\n      if ((error as UpgradeError).stderr) {\n        logger.debug(\n          `\"pod install\" or \"pod repo update\" failed. Error output:\\n${\n            (error as UpgradeError).stderr\n          }`,\n        );\n      }\n      logger.error(\n        'Installation of CocoaPods dependencies failed. Try to install them manually by running \"pod install\" in \"ios\" directory after finishing upgrade',\n      );\n    }\n  }\n};\n\nconst applyPatch = async (\n  currentVersion: string,\n  newVersion: string,\n  tmpPatchFile: string,\n  repoName: RepoNameType,\n) => {\n  const defaultExcludes = ['package.json'];\n  let filesThatDontExist: Array<string> = [];\n  let filesThatFailedToApply: Array<string> = [];\n\n  const {stdout: relativePathFromRoot} = await execa('git', [\n    'rev-parse',\n    '--show-prefix',\n  ]);\n  try {\n    try {\n      const excludes = defaultExcludes.map(\n        (e) => `--exclude=${path.join(relativePathFromRoot, e)}`,\n      );\n      await execa('git', [\n        'apply',\n        // According to git documentation, `--binary` flag is turned on by\n        // default. However it's necessary when running `git apply --check` to\n        // actually accept binary files, maybe a bug in git?\n        '--binary',\n        '--check',\n        tmpPatchFile,\n        ...excludes,\n        '-p2',\n        '--3way',\n        `--directory=${relativePathFromRoot}`,\n      ]);\n      logger.info('Applying diff...');\n    } catch (error) {\n      const errorLines: Array<string> = (error as UpgradeError).stderr.split(\n        '\\n',\n      );\n      filesThatDontExist = [\n        ...errorLines\n          .filter((x) => x.includes('does not exist in index'))\n          .map((x) =>\n            x.replace(/^error: (.*): does not exist in index$/, '$1'),\n          ),\n      ].filter(Boolean);\n\n      filesThatFailedToApply = errorLines\n        .filter((x) => x.includes('patch does not apply'))\n        .map((x) => x.replace(/^error: (.*): patch does not apply$/, '$1'))\n        .filter(Boolean);\n\n      logger.info('Applying diff...');\n      logger.warn(\n        `Excluding files that exist in the template, but not in your project:\\n${filesThatDontExist\n          .map((file) => `  - ${chalk.bold(file)}`)\n          .join('\\n')}`,\n      );\n      if (filesThatFailedToApply.length) {\n        logger.error(\n          `Excluding files that failed to apply the diff:\\n${filesThatFailedToApply\n            .map((file) => `  - ${chalk.bold(file)}`)\n            .join(\n              '\\n',\n            )}\\nPlease make sure to check the actual changes after the upgrade command is finished.\\nYou can find them in our Upgrade Helper web app: ${chalk.underline.dim(\n            `${repos[repoName].webDiffUrl}/?from=${currentVersion}&to=${newVersion}`,\n          )}`,\n        );\n      }\n    } finally {\n      const excludes = [\n        ...defaultExcludes,\n        ...filesThatDontExist,\n        ...filesThatFailedToApply,\n      ].map((e) => `--exclude=${path.join(relativePathFromRoot, e)}`);\n      await execa('git', [\n        'apply',\n        tmpPatchFile,\n        ...excludes,\n        '-p2',\n        '--3way',\n        `--directory=${relativePathFromRoot}`,\n      ]);\n    }\n  } catch (error) {\n    if ((error as UpgradeError).stderr) {\n      logger.debug(\n        `\"git apply\" failed. Error output:\\n${(error as UpgradeError).stderr}`,\n      );\n    }\n    logger.error(\n      'Automatically applying diff failed. We did our best to automatically upgrade as many files as possible',\n    );\n    return false;\n  }\n  return true;\n};\n\n/**\n * Upgrade application to a new version of React Native.\n */\nasync function upgrade(argv: Array<string>, ctx: Config) {\n  const tmpPatchFile = 'tmp-upgrade-rn.patch';\n  const projectDir = ctx.root;\n  const {name: rnName, version: currentVersion} = require(path.join(\n    projectDir,\n    'node_modules/react-native/package.json',\n  ));\n\n  const repoName: RepoNameType =\n    rnName === 'react-native-tvos' ? 'react-native-tvos' : 'react-native';\n\n  const newVersion = await getVersionToUpgradeTo(\n    argv,\n    currentVersion,\n    projectDir,\n    repoName,\n  );\n\n  if (!newVersion) {\n    return;\n  }\n\n  const patch = await getPatch(currentVersion, newVersion, ctx, repoName);\n\n  if (patch === null) {\n    return;\n  }\n\n  if (patch === '') {\n    logger.info('Diff has no changes to apply, proceeding further');\n    await installDeps(projectDir, newVersion, repoName);\n    await installCocoaPodsDeps(projectDir);\n\n    logger.success(\n      `Upgraded React Native to v${newVersion} 🎉. Now you can review and commit the changes`,\n    );\n    return;\n  }\n  let patchSuccess;\n\n  try {\n    fs.writeFileSync(tmpPatchFile, patch);\n    patchSuccess = await applyPatch(\n      currentVersion,\n      newVersion,\n      tmpPatchFile,\n      repoName,\n    );\n  } catch (error) {\n    throw new Error((error as UpgradeError).stderr || (error as string));\n  } finally {\n    try {\n      fs.unlinkSync(tmpPatchFile);\n    } catch (e) {\n      // ignore\n    }\n    const {stdout} = await execa('git', ['status', '-s']);\n    if (!patchSuccess) {\n      if (stdout) {\n        logger.warn(\n          'Continuing after failure. Some of the files are upgraded but you will need to deal with conflicts manually',\n        );\n        await installDeps(projectDir, newVersion, repoName);\n        logger.info('Running \"git status\" to check what changed...');\n        await execa('git', ['status'], {stdio: 'inherit'});\n      } else {\n        logger.error(\n          'Patch failed to apply for unknown reason. Please fall back to manual way of upgrading',\n        );\n      }\n    } else {\n      await installDeps(projectDir, newVersion, repoName);\n      await installCocoaPodsDeps(projectDir);\n      logger.info('Running \"git status\" to check what changed...');\n      await execa('git', ['status'], {stdio: 'inherit'});\n    }\n    if (!patchSuccess) {\n      if (stdout) {\n        logger.warn(\n          'Please run \"git diff\" to review the conflicts and resolve them',\n        );\n      }\n      if (process.platform === 'darwin') {\n        logger.warn(\n          'After resolving conflicts don\\'t forget to run \"pod install\" inside \"ios\" directory',\n        );\n      }\n      logger.info(`You may find these resources helpful:\n• Release notes: ${chalk.underline.dim(\n        `https://github.com/facebook/react-native/releases/tag/v${newVersion}`,\n      )}\n• Manual Upgrade Helper: ${chalk.underline.dim(\n        `${repos[repoName].webDiffUrl}/?from=${currentVersion}&to=${newVersion}`,\n      )}\n• Git diff: ${chalk.underline.dim(\n        `${repos[repoName].rawDiffUrl}/${currentVersion}..${newVersion}.diff`,\n      )}`);\n\n      throw new CLIError(\n        'Upgrade failed. Please see the messages above for details',\n      );\n    }\n  }\n  logger.success(\n    `Upgraded React Native to v${newVersion} 🎉. Now you can review and commit the changes`,\n  );\n}\nconst upgradeCommand = {\n  name: 'upgrade [version]',\n  description:\n    \"Upgrade your app's template files to the specified or latest npm version using `rn-diff-purge` project. Only valid semver versions are allowed.\",\n  func: upgrade,\n};\nexport default upgradeCommand;\n"]},"metadata":{},"sourceType":"script"}