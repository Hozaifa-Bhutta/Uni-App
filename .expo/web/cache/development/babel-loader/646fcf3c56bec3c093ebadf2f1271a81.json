{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loadMetroConfig;\nexports.getDefaultConfig = void 0;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _metroConfig() {\n  var data = require(\"metro-config\");\n\n  _metroConfig = function _metroConfig() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _metroPlatformResolver = require(\"./metroPlatformResolver\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar INTERNAL_CALLSITES_REGEX = new RegExp(['/Libraries/Renderer/implementations/.+\\\\.js$', '/Libraries/BatchedBridge/MessageQueue\\\\.js$', '/Libraries/YellowBox/.+\\\\.js$', '/Libraries/LogBox/.+\\\\.js$', '/Libraries/Core/Timers/.+\\\\.js$', '/node_modules/react-devtools-core/.+\\\\.js$', '/node_modules/react-refresh/.+\\\\.js$', '/node_modules/scheduler/.+\\\\.js$'].join('|'));\n\nvar getDefaultConfig = function getDefaultConfig(ctx) {\n  var outOfTreePlatforms = Object.keys(ctx.platforms).filter(function (platform) {\n    return ctx.platforms[platform].npmPackageName;\n  });\n  return {\n    resolver: {\n      resolveRequest: outOfTreePlatforms.length === 0 ? undefined : (0, _metroPlatformResolver.reactNativePlatformResolver)(outOfTreePlatforms.reduce(function (result, platform) {\n        result[platform] = ctx.platforms[platform].npmPackageName;\n        return result;\n      }, {})),\n      resolverMainFields: ['react-native', 'browser', 'main'],\n      platforms: [].concat(_toConsumableArray(Object.keys(ctx.platforms)), ['native'])\n    },\n    serializer: {\n      getModulesRunBeforeMainModule: function getModulesRunBeforeMainModule() {\n        return [require.resolve(_path().default.join(ctx.reactNativePath, 'Libraries/Core/InitializeCore'))].concat(_toConsumableArray(outOfTreePlatforms.map(function (platform) {\n          return require.resolve(ctx.platforms[platform].npmPackageName + \"/Libraries/Core/InitializeCore\");\n        })));\n      },\n      getPolyfills: function getPolyfills() {\n        return require(_path().default.join(ctx.reactNativePath, 'rn-get-polyfills'))();\n      }\n    },\n    server: {\n      port: Number(process.env.RCT_METRO_PORT) || 8081\n    },\n    symbolicator: {\n      customizeFrame: function customizeFrame(frame) {\n        var collapse = Boolean(frame.file && INTERNAL_CALLSITES_REGEX.test(frame.file));\n        return {\n          collapse: collapse\n        };\n      }\n    },\n    transformer: {\n      allowOptionalDependencies: true,\n      babelTransformerPath: require.resolve('metro-react-native-babel-transformer'),\n      assetRegistryPath: 'react-native/Libraries/Image/AssetRegistry',\n      asyncRequireModulePath: require.resolve('metro-runtime/src/modules/asyncRequire')\n    },\n    watchFolders: []\n  };\n};\n\nexports.getDefaultConfig = getDefaultConfig;\n\nfunction loadMetroConfig(ctx, options) {\n  var defaultConfig = getDefaultConfig(ctx);\n\n  if (options && options.reporter) {\n    defaultConfig.reporter = options.reporter;\n  }\n\n  return (0, _metroConfig().loadConfig)(_objectSpread({\n    cwd: ctx.root\n  }, options), defaultConfig);\n}","map":{"version":3,"sources":["../../src/tools/loadMetroConfig.ts"],"names":["INTERNAL_CALLSITES_REGEX","getDefaultConfig","ctx","outOfTreePlatforms","Object","platform","resolver","resolveRequest","result","resolverMainFields","platforms","serializer","getModulesRunBeforeMainModule","require","path","getPolyfills","server","port","Number","process","symbolicator","customizeFrame","frame","collapse","Boolean","transformer","allowOptionalDependencies","babelTransformerPath","assetRegistryPath","asyncRequireModulePath","watchFolders","defaultConfig","options","cwd"],"mappings":"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","sourcesContent":["/**\n * Configuration file of Metro.\n */\nimport path from 'path';\n// @ts-ignore - no typed definition for the package\nimport {loadConfig} from 'metro-config';\nimport type {Config} from '@react-native-community/cli-types';\nimport {reactNativePlatformResolver} from './metroPlatformResolver';\n\nconst INTERNAL_CALLSITES_REGEX = new RegExp(\n  [\n    '/Libraries/Renderer/implementations/.+\\\\.js$',\n    '/Libraries/BatchedBridge/MessageQueue\\\\.js$',\n    '/Libraries/YellowBox/.+\\\\.js$',\n    '/Libraries/LogBox/.+\\\\.js$',\n    '/Libraries/Core/Timers/.+\\\\.js$',\n    '/node_modules/react-devtools-core/.+\\\\.js$',\n    '/node_modules/react-refresh/.+\\\\.js$',\n    '/node_modules/scheduler/.+\\\\.js$',\n  ].join('|'),\n);\n\nexport type {Config};\n\nexport type ConfigLoadingContext = Pick<\n  Config,\n  'root' | 'reactNativePath' | 'platforms'\n>;\n\nexport interface MetroConfig {\n  resolver: {\n    resolveRequest?: (\n      context: any,\n      realModuleName: string,\n      platform: string,\n      moduleName: string,\n    ) => any;\n    resolverMainFields: string[];\n    platforms: string[];\n  };\n  serializer: {\n    getModulesRunBeforeMainModule: () => string[];\n    getPolyfills: () => any;\n  };\n  server: {\n    port: number;\n    enhanceMiddleware?: Function;\n  };\n  symbolicator: {\n    customizeFrame: (frame: {file: string | null}) => {collapse: boolean};\n  };\n  transformer: {\n    allowOptionalDependencies?: boolean;\n    babelTransformerPath: string;\n    assetRegistryPath: string;\n    assetPlugins?: Array<string>;\n    asyncRequireModulePath?: string;\n  };\n  watchFolders: ReadonlyArray<string>;\n  reporter?: any;\n}\n\n/**\n * Default configuration\n */\nexport const getDefaultConfig = (ctx: ConfigLoadingContext): MetroConfig => {\n  const outOfTreePlatforms = Object.keys(ctx.platforms).filter(\n    (platform) => ctx.platforms[platform].npmPackageName,\n  );\n\n  return {\n    resolver: {\n      resolveRequest:\n        outOfTreePlatforms.length === 0\n          ? undefined\n          : reactNativePlatformResolver(\n              outOfTreePlatforms.reduce<{[platform: string]: string}>(\n                (result, platform) => {\n                  result[platform] = ctx.platforms[platform].npmPackageName!;\n                  return result;\n                },\n                {},\n              ),\n            ),\n      resolverMainFields: ['react-native', 'browser', 'main'],\n      platforms: [...Object.keys(ctx.platforms), 'native'],\n    },\n    serializer: {\n      // We can include multiple copies of InitializeCore here because metro will\n      // only add ones that are already part of the bundle\n      getModulesRunBeforeMainModule: () => [\n        require.resolve(\n          path.join(ctx.reactNativePath, 'Libraries/Core/InitializeCore'),\n        ),\n        ...outOfTreePlatforms.map((platform) =>\n          require.resolve(\n            `${ctx.platforms[platform]\n              .npmPackageName!}/Libraries/Core/InitializeCore`,\n          ),\n        ),\n      ],\n      getPolyfills: () =>\n        require(path.join(ctx.reactNativePath, 'rn-get-polyfills'))(),\n    },\n    server: {\n      port: Number(process.env.RCT_METRO_PORT) || 8081,\n    },\n    symbolicator: {\n      customizeFrame: (frame: {file: string | null}) => {\n        const collapse = Boolean(\n          frame.file && INTERNAL_CALLSITES_REGEX.test(frame.file),\n        );\n        return {collapse};\n      },\n    },\n    transformer: {\n      allowOptionalDependencies: true,\n      babelTransformerPath: require.resolve(\n        'metro-react-native-babel-transformer',\n      ),\n      assetRegistryPath: 'react-native/Libraries/Image/AssetRegistry',\n      asyncRequireModulePath: require.resolve(\n        'metro-runtime/src/modules/asyncRequire',\n      ),\n    },\n    watchFolders: [],\n  };\n};\n\nexport interface ConfigOptionsT {\n  maxWorkers?: number;\n  port?: number;\n  projectRoot?: string;\n  resetCache?: boolean;\n  watchFolders?: string[];\n  sourceExts?: string[];\n  reporter?: any;\n  config?: string;\n}\n\n/**\n * Loads Metro Config and applies `options` on top of the resolved config.\n *\n * This allows the CLI to always overwrite the file settings.\n */\nexport default function loadMetroConfig(\n  ctx: ConfigLoadingContext,\n  options?: ConfigOptionsT,\n): Promise<MetroConfig> {\n  const defaultConfig = getDefaultConfig(ctx);\n  if (options && options.reporter) {\n    defaultConfig.reporter = options.reporter;\n  }\n  return loadConfig({cwd: ctx.root, ...options}, defaultConfig);\n}\n"]},"metadata":{},"sourceType":"script"}