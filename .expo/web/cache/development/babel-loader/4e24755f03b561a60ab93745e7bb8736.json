{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _require = require(\"metro/src/Assets\"),\n    getAssetData = _require.getAssetData;\n\nvar _require2 = require(\"metro/src/Bundler/util\"),\n    generateAssetCodeFileAst = _require2.generateAssetCodeFileAst;\n\nvar path = require(\"path\");\n\nfunction transform(_ref, assetRegistryPath, assetDataPlugins) {\n  var filename, options, src, absolutePath, data;\n  return _regeneratorRuntime.async(function transform$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          filename = _ref.filename, options = _ref.options, src = _ref.src;\n          options = options || {\n            platform: \"\",\n            projectRoot: \"\",\n            inlineRequires: false,\n            minify: false\n          };\n          absolutePath = path.resolve(options.projectRoot, filename);\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(getAssetData(absolutePath, filename, assetDataPlugins, options.platform, options.publicPath));\n\n        case 5:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            ast: generateAssetCodeFileAst(assetRegistryPath, data)\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nmodule.exports = {\n  transform: transform\n};","map":{"version":3,"names":["require","getAssetData","generateAssetCodeFileAst","path","transform","assetRegistryPath","assetDataPlugins","filename","options","src","platform","projectRoot","inlineRequires","minify","absolutePath","resolve","publicPath","data","ast","module","exports"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/metro-transform-worker/src/utils/assetTransformer.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\"use strict\";\n\nconst { getAssetData } = require(\"metro/src/Assets\");\n\nconst { generateAssetCodeFileAst } = require(\"metro/src/Bundler/util\");\n\nconst path = require(\"path\");\n\nasync function transform(\n  { filename, options, src },\n  assetRegistryPath,\n  assetDataPlugins\n) {\n  options = options || {\n    platform: \"\",\n    projectRoot: \"\",\n    inlineRequires: false,\n    minify: false,\n  };\n  const absolutePath = path.resolve(options.projectRoot, filename);\n  const data = await getAssetData(\n    absolutePath,\n    filename,\n    assetDataPlugins,\n    options.platform,\n    options.publicPath\n  );\n  return {\n    ast: generateAssetCodeFileAst(assetRegistryPath, data),\n  };\n}\n\nmodule.exports = {\n  transform,\n};\n"],"mappings":"AASA;;;;AAEA,eAAyBA,OAAO,CAAC,kBAAD,CAAhC;AAAA,IAAQC,YAAR,YAAQA,YAAR;;AAEA,gBAAqCD,OAAO,CAAC,wBAAD,CAA5C;AAAA,IAAQE,wBAAR,aAAQA,wBAAR;;AAEA,IAAMC,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AAEA,SAAeI,SAAf,OAEEC,iBAFF,EAGEC,gBAHF;EAAA;EAAA;IAAA;MAAA;QAAA;UACIC,QADJ,QACIA,QADJ,EACcC,OADd,QACcA,OADd,EACuBC,GADvB,QACuBA,GADvB;UAKED,OAAO,GAAGA,OAAO,IAAI;YACnBE,QAAQ,EAAE,EADS;YAEnBC,WAAW,EAAE,EAFM;YAGnBC,cAAc,EAAE,KAHG;YAInBC,MAAM,EAAE;UAJW,CAArB;UAMMC,YAXR,GAWuBX,IAAI,CAACY,OAAL,CAAaP,OAAO,CAACG,WAArB,EAAkCJ,QAAlC,CAXvB;UAAA;UAAA,iCAYqBN,YAAY,CAC7Ba,YAD6B,EAE7BP,QAF6B,EAG7BD,gBAH6B,EAI7BE,OAAO,CAACE,QAJqB,EAK7BF,OAAO,CAACQ,UALqB,CAZjC;;QAAA;UAYQC,IAZR;UAAA,iCAmBS;YACLC,GAAG,EAAEhB,wBAAwB,CAACG,iBAAD,EAAoBY,IAApB;UADxB,CAnBT;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAwBAE,MAAM,CAACC,OAAP,GAAiB;EACfhB,SAAS,EAATA;AADe,CAAjB"},"metadata":{},"sourceType":"script"}