{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tryLaunchEmulator;\n\nfunction _os() {\n  var data = _interopRequireDefault(require(\"os\"));\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _adb = _interopRequireDefault(require(\"./adb\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar emulatorCommand = process.env.ANDROID_HOME ? process.env.ANDROID_HOME + \"/emulator/emulator\" : 'emulator';\n\nvar getEmulators = function getEmulators() {\n  try {\n    var emulatorsOutput = _execa().default.sync(emulatorCommand, ['-list-avds']).stdout;\n\n    return emulatorsOutput.split(_os().default.EOL).filter(function (name) {\n      return name !== '';\n    });\n  } catch (_unused) {\n    return [];\n  }\n};\n\nvar launchEmulator = function _callee(emulatorName, adbPath) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n            var cp = (0, _execa().default)(emulatorCommand, [\"@\" + emulatorName], {\n              detached: true,\n              stdio: 'ignore'\n            });\n            cp.unref();\n            var timeout = 30;\n            var rejectTimeout = setTimeout(function () {\n              cleanup();\n              reject(\"Could not start emulator within \" + timeout + \" seconds.\");\n            }, timeout * 1000);\n            var bootCheckInterval = setInterval(function () {\n              if (_adb.default.getDevices(adbPath).length > 0) {\n                cleanup();\n                resolve();\n              }\n            }, 1000);\n\n            var cleanup = function cleanup() {\n              clearTimeout(rejectTimeout);\n              clearInterval(bootCheckInterval);\n            };\n\n            cp.on('exit', function () {\n              cleanup();\n              reject('Emulator exited before boot.');\n            });\n            cp.on('error', function (error) {\n              cleanup();\n              reject(error.message);\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nfunction tryLaunchEmulator(adbPath) {\n  var emulators;\n  return _regeneratorRuntime.async(function tryLaunchEmulator$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          emulators = getEmulators();\n\n          if (!(emulators.length > 0)) {\n            _context2.next = 11;\n            break;\n          }\n\n          _context2.prev = 2;\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(launchEmulator(emulators[0], adbPath));\n\n        case 5:\n          return _context2.abrupt(\"return\", {\n            success: true\n          });\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](2);\n          return _context2.abrupt(\"return\", {\n            success: false,\n            error: _context2.t0\n          });\n\n        case 11:\n          return _context2.abrupt(\"return\", {\n            success: false,\n            error: 'No emulators found as an output of `emulator -list-avds`'\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[2, 8]], Promise);\n}","map":{"version":3,"sources":["../../../src/commands/runAndroid/tryLaunchEmulator.ts"],"names":["emulatorCommand","process","getEmulators","emulatorsOutput","execa","os","name","launchEmulator","cp","detached","stdio","timeout","rejectTimeout","setTimeout","cleanup","reject","bootCheckInterval","setInterval","Adb","resolve","clearTimeout","clearInterval","error","emulators","success"],"mappings":"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","sourcesContent":["import os from 'os';\nimport execa from 'execa';\nimport Adb from './adb';\n\nconst emulatorCommand = process.env.ANDROID_HOME\n  ? `${process.env.ANDROID_HOME}/emulator/emulator`\n  : 'emulator';\n\nconst getEmulators = () => {\n  try {\n    const emulatorsOutput = execa.sync(emulatorCommand, ['-list-avds']).stdout;\n    return emulatorsOutput.split(os.EOL).filter((name) => name !== '');\n  } catch {\n    return [];\n  }\n};\n\nconst launchEmulator = async (emulatorName: string, adbPath: string) => {\n  return new Promise((resolve, reject) => {\n    const cp = execa(emulatorCommand, [`@${emulatorName}`], {\n      detached: true,\n      stdio: 'ignore',\n    });\n    cp.unref();\n    const timeout = 30;\n\n    // Reject command after timeout\n    const rejectTimeout = setTimeout(() => {\n      cleanup();\n      reject(`Could not start emulator within ${timeout} seconds.`);\n    }, timeout * 1000);\n\n    const bootCheckInterval = setInterval(() => {\n      if (Adb.getDevices(adbPath).length > 0) {\n        cleanup();\n        resolve();\n      }\n    }, 1000);\n\n    const cleanup = () => {\n      clearTimeout(rejectTimeout);\n      clearInterval(bootCheckInterval);\n    };\n\n    cp.on('exit', () => {\n      cleanup();\n      reject('Emulator exited before boot.');\n    });\n\n    cp.on('error', (error) => {\n      cleanup();\n      reject(error.message);\n    });\n  });\n};\n\nexport default async function tryLaunchEmulator(\n  adbPath: string,\n): Promise<{success: boolean; error?: string}> {\n  const emulators = getEmulators();\n  if (emulators.length > 0) {\n    try {\n      await launchEmulator(emulators[0], adbPath);\n      return {success: true};\n    } catch (error) {\n      return {success: false, error};\n    }\n  }\n  return {\n    success: false,\n    error: 'No emulators found as an output of `emulator -list-avds`',\n  };\n}\n"]},"metadata":{},"sourceType":"script"}