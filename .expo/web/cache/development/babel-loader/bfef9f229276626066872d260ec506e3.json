{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateEnvironment = exports.setEnvironment = void 0;\n\nvar _executeWinCommand = require(\"./executeWinCommand\");\n\nvar setEnvironment = function _callee(variable, value) {\n  var command;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          command = \"setx \" + variable + \" \\\"\" + value + \"\\\"\";\n          _context.next = 3;\n          return _regeneratorRuntime.awrap((0, _executeWinCommand.executeCommand)(command));\n\n        case 3:\n          process.env[variable] = value;\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.setEnvironment = setEnvironment;\n\nvar updateEnvironment = function _callee2(variable, value) {\n  var envVariable, command;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          envVariable = process.env[variable] || '';\n\n          if (!(variable === 'PATH' && envVariable.includes(value + \";\"))) {\n            _context2.next = 3;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 3:\n          command = \"for /f \\\"skip=2 tokens=3*\\\" %a in ('reg query HKCU\\\\Environment /v \" + variable + \"') do @if [%b]==[] ( @setx \" + variable + \" \\\"\" + value + \";%~a\\\" ) else ( @setx \" + variable + \" \\\"\" + value + \";%~a %~b\\\" )\\n  \";\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap((0, _executeWinCommand.executeCommand)(command));\n\n        case 6:\n          process.env[variable] = \"\" + process.env[variable] + value + \";\";\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.updateEnvironment = updateEnvironment;","map":{"version":3,"sources":["../../../src/tools/windows/environmentVariables.ts"],"names":["setEnvironment","command","variable","process","updateEnvironment","envVariable","value"],"mappings":";;;;;;;;;AAAA,IAAA,kBAAA,GAAA,OAAA,uBAAA;;AAKA,IAAMA,cAAc,GAAG,iBAAA,QAAA,EAAA,KAAA;EAAA;EAAA;IAAA;MAAA;QAAA;UAEfC,OAFe,aAEGC,QAFH,WAErB,KAFqB;UAAA;UAAA,iCAIf,CAAA,GAAA,kBAAA,CAAA,cAAA,EAAN,OAAM,CAJe;;QAAA;UAMrBC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,IAAAA,KAAAA;;QANqB;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAvB;;;;AAeA,IAAMC,iBAAiB,GAAG,kBAAA,QAAA,EAAA,KAAA;EAAA;EAAA;IAAA;MAAA;QAAA;UAIlBC,WAJkB,GAIJF,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAApB,EAJwB;;UAAA,MAKpBD,QAAQ,KAARA,MAAAA,IAAuBG,WAAW,CAAXA,QAAAA,CAA3B,KAA2BA,OALH;YAAA;YAAA;UAAA;;UAAA;;QAAA;UASlBJ,OATkB,2EAS4DC,QAT5D,mCASkGA,QATlG,WAS+GI,KAT/G,8BAS4IJ,QAT5I,WASyJI,KATzJ;UAAA;UAAA,iCAYlB,CAAA,GAAA,kBAAA,CAAA,cAAA,EAAN,OAAM,CAZkB;;QAAA;UAcxBH,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,SAA2BA,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,CAA3BA,GAAAA,KAAAA;;QAdwB;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAA1B","sourcesContent":["import {executeCommand} from './executeWinCommand';\n\n/**\n * Creates a new variable in the user's environment\n */\nconst setEnvironment = async (variable: string, value: string) => {\n  // https://superuser.com/a/601034\n  const command = `setx ${variable} \"${value}\"`;\n\n  await executeCommand(command);\n\n  process.env[variable] = value;\n};\n\n/**\n * Prepends the given `value` to the user's environment `variable`.\n * @param {string} variable The environment variable to modify\n * @param {string} value The value to add to the variable\n * @returns {Promise<void>}\n */\nconst updateEnvironment = async (variable: string, value: string) => {\n  // Avoid adding the value multiple times to PATH\n  // Need to do the following to avoid TSLint complaining about possible\n  // undefined values even if I check before via `typeof` or another way\n  const envVariable = process.env[variable] || '';\n  if (variable === 'PATH' && envVariable.includes(`${value};`)) {\n    return;\n  }\n  // https://superuser.com/a/601034\n  const command = `for /f \"skip=2 tokens=3*\" %a in ('reg query HKCU\\\\Environment /v ${variable}') do @if [%b]==[] ( @setx ${variable} \"${value};%~a\" ) else ( @setx ${variable} \"${value};%~a %~b\" )\n  `;\n\n  await executeCommand(command);\n\n  process.env[variable] = `${process.env[variable]}${value};`;\n};\n\nexport {setEnvironment, updateEnvironment};\n"]},"metadata":{},"sourceType":"script"}