{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clean = clean;\nexports.default = void 0;\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = require(\"fs\");\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _os() {\n  var data = _interopRequireDefault(require(\"os\"));\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _prompts() {\n  var data = _interopRequireDefault(require(\"prompts\"));\n\n  _prompts = function _prompts() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _util() {\n  var data = require(\"util\");\n\n  _util = function _util() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar DEFAULT_GROUPS = ['metro', 'watchman'];\nvar rmdirAsync = (0, _util().promisify)(_fs().rmdir);\n\nfunction cleanDir(directory) {\n  if (!(0, _fs().existsSync)(directory)) {\n    return Promise.resolve();\n  }\n\n  return rmdirAsync(directory, {\n    maxRetries: 3,\n    recursive: true\n  });\n}\n\nfunction findPath(startPath, files) {\n  for (var _iterator = _createForOfIteratorHelperLoose(files), _step; !(_step = _iterator()).done;) {\n    var file = _step.value;\n\n    var filename = _path().default.resolve(startPath, file);\n\n    if ((0, _fs().existsSync)(filename)) {\n      return filename;\n    }\n  }\n\n  return undefined;\n}\n\nfunction promptForCaches(groups) {\n  var _await, caches;\n\n  return _regeneratorRuntime.async(function promptForCaches$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap((0, _prompts().default)({\n            type: 'multiselect',\n            name: 'caches',\n            message: 'Select all caches to clean',\n            choices: Object.entries(groups).map(function (_ref) {\n              var _ref2 = _slicedToArray(_ref, 2),\n                  cmd = _ref2[0],\n                  group = _ref2[1];\n\n              return {\n                title: cmd + \" \" + _chalk().default.dim(\"(\" + group.description + \")\"),\n                value: cmd,\n                selected: DEFAULT_GROUPS.includes(cmd)\n              };\n            }),\n            min: 1\n          }));\n\n        case 2:\n          _await = _context.sent;\n          caches = _await.caches;\n          return _context.abrupt(\"return\", caches);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction clean(_argv, _config, cleanOptions) {\n  var include, projectRoot, verifyCache, COMMANDS, groups, spinner, _iterator2, _step2, group, commands, _loop, _iterator3, _step3, _ref3, action, label;\n\n  return _regeneratorRuntime.async(function clean$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          include = cleanOptions.include, projectRoot = cleanOptions.projectRoot, verifyCache = cleanOptions.verifyCache;\n\n          if ((0, _fs().existsSync)(projectRoot)) {\n            _context9.next = 3;\n            break;\n          }\n\n          throw new Error(\"Invalid path provided! \" + projectRoot);\n\n        case 3:\n          COMMANDS = _objectSpread(_objectSpread({\n            android: {\n              description: 'Android build caches, e.g. Gradle',\n              tasks: [{\n                label: 'Clean Gradle cache',\n                action: function action() {\n                  var candidates, gradlew, script;\n                  return _regeneratorRuntime.async(function action$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          candidates = _os().default.platform() === 'win32' ? ['android/gradlew.bat', 'gradlew.bat'] : ['android/gradlew', 'gradlew'];\n                          gradlew = findPath(projectRoot, candidates);\n\n                          if (!gradlew) {\n                            _context2.next = 6;\n                            break;\n                          }\n\n                          script = _path().default.basename(gradlew);\n                          _context2.next = 6;\n                          return _regeneratorRuntime.awrap((0, _execa().default)(_os().default.platform() === 'win32' ? script : \"./\" + script, ['clean'], {\n                            cwd: _path().default.dirname(gradlew)\n                          }));\n\n                        case 6:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                }\n              }]\n            }\n          }, _os().default.platform() === 'darwin' ? {\n            cocoapods: {\n              description: 'CocoaPods cache',\n              tasks: [{\n                label: 'Clean CocoaPods cache',\n                action: function action() {\n                  return _regeneratorRuntime.async(function action$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return _regeneratorRuntime.awrap((0, _execa().default)('pod', ['cache', 'clean', '--all'], {\n                            cwd: projectRoot\n                          }));\n\n                        case 2:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                }\n              }]\n            }\n          } : undefined), {}, {\n            metro: {\n              description: 'Metro, haste-map caches',\n              tasks: [{\n                label: 'Clean Metro cache',\n                action: function action() {\n                  return cleanDir(_os().default.tmpdir() + \"/metro-*\");\n                }\n              }, {\n                label: 'Clean Haste cache',\n                action: function action() {\n                  return cleanDir(_os().default.tmpdir() + \"/haste-map-*\");\n                }\n              }, {\n                label: 'Clean React Native cache',\n                action: function action() {\n                  return cleanDir(_os().default.tmpdir() + \"/react-*\");\n                }\n              }]\n            },\n            npm: {\n              description: '`node_modules` folder in the current package, and optionally verify npm cache',\n              tasks: [{\n                label: 'Remove node_modules',\n                action: function action() {\n                  return cleanDir(projectRoot + \"/node_modules\");\n                }\n              }].concat(_toConsumableArray(verifyCache ? [{\n                label: 'Verify npm cache',\n                action: function action() {\n                  return _regeneratorRuntime.async(function action$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          _context4.next = 2;\n                          return _regeneratorRuntime.awrap((0, _execa().default)('npm', ['cache', 'verify'], {\n                            cwd: projectRoot\n                          }));\n\n                        case 2:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                }\n              }] : []))\n            },\n            watchman: {\n              description: 'Stop Watchman and delete its cache',\n              tasks: [{\n                label: 'Stop Watchman',\n                action: function action() {\n                  return _regeneratorRuntime.async(function action$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return _regeneratorRuntime.awrap((0, _execa().default)(_os().default.platform() === 'win32' ? 'tskill' : 'killall', ['watchman'], {\n                            cwd: projectRoot\n                          }));\n\n                        case 2:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                }\n              }, {\n                label: 'Delete Watchman cache',\n                action: function action() {\n                  return _regeneratorRuntime.async(function action$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          _context6.next = 2;\n                          return _regeneratorRuntime.awrap((0, _execa().default)('watchman', ['watch-del-all'], {\n                            cwd: projectRoot\n                          }));\n\n                        case 2:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                }\n              }]\n            },\n            yarn: {\n              description: 'Yarn cache',\n              tasks: [{\n                label: 'Clean Yarn cache',\n                action: function action() {\n                  return _regeneratorRuntime.async(function action$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          _context7.next = 2;\n                          return _regeneratorRuntime.awrap((0, _execa().default)('yarn', ['cache', 'clean'], {\n                            cwd: projectRoot\n                          }));\n\n                        case 2:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                }\n              }]\n            }\n          });\n\n          if (!include) {\n            _context9.next = 8;\n            break;\n          }\n\n          _context9.t0 = include.split(',');\n          _context9.next = 11;\n          break;\n\n        case 8:\n          _context9.next = 10;\n          return _regeneratorRuntime.awrap(promptForCaches(COMMANDS));\n\n        case 10:\n          _context9.t0 = _context9.sent;\n\n        case 11:\n          groups = _context9.t0;\n\n          if (!(!groups || groups.length === 0)) {\n            _context9.next = 14;\n            break;\n          }\n\n          return _context9.abrupt(\"return\");\n\n        case 14:\n          spinner = (0, _cliTools().getLoader)();\n          _iterator2 = _createForOfIteratorHelperLoose(groups);\n\n        case 16:\n          if ((_step2 = _iterator2()).done) {\n            _context9.next = 34;\n            break;\n          }\n\n          group = _step2.value;\n          commands = COMMANDS[group];\n\n          if (commands) {\n            _context9.next = 22;\n            break;\n          }\n\n          spinner.warn(\"Unknown group: \" + group);\n          return _context9.abrupt(\"continue\", 32);\n\n        case 22:\n          _loop = function _callee(action, label) {\n            return _regeneratorRuntime.async(function _callee$(_context8) {\n              while (1) {\n                switch (_context8.prev = _context8.next) {\n                  case 0:\n                    spinner.start(label);\n                    _context8.next = 3;\n                    return _regeneratorRuntime.awrap(action().then(function () {\n                      spinner.succeed();\n                    }).catch(function (e) {\n                      spinner.fail(label + \" \\xBB \" + e);\n                    }));\n\n                  case 3:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          };\n\n          _iterator3 = _createForOfIteratorHelperLoose(commands.tasks);\n\n        case 24:\n          if ((_step3 = _iterator3()).done) {\n            _context9.next = 32;\n            break;\n          }\n\n          _ref3 = _step3.value;\n          action = _ref3.action;\n          label = _ref3.label;\n          _context9.next = 30;\n          return _regeneratorRuntime.awrap(_loop(action, label));\n\n        case 30:\n          _context9.next = 24;\n          break;\n\n        case 32:\n          _context9.next = 16;\n          break;\n\n        case 34:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar _default = {\n  func: clean,\n  name: 'clean',\n  description: 'Cleans your project by removing React Native related caches and modules.',\n  options: [{\n    name: '--include <string>',\n    description: 'Comma-separated flag of caches to clear e.g. `npm,yarn`. If omitted, an interactive prompt will appear.'\n  }, {\n    name: '--project-root <string>',\n    description: 'Root path to your React Native project. When not specified, defaults to current working directory.',\n    default: process.cwd()\n  }, {\n    name: '--verify-cache',\n    description: 'Whether to verify the cache. Currently only applies to npm cache.',\n    default: false\n  }]\n};\nexports.default = _default;","map":{"version":3,"sources":["../src/clean.ts"],"names":["DEFAULT_GROUPS","rmdirAsync","rmdir","Promise","maxRetries","recursive","filename","path","caches","type","name","message","choices","title","cmd","chalk","group","value","selected","min","verifyCache","COMMANDS","android","description","tasks","label","action","candidates","os","gradlew","findPath","script","cwd","cocoapods","projectRoot","metro","cleanDir","npm","watchman","yarn","groups","include","promptForCaches","spinner","commands","e","func","options","default","process"],"mappings":"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","sourcesContent":["import {getLoader} from '@react-native-community/cli-tools';\nimport type {Config as CLIConfig} from '@react-native-community/cli-types';\nimport chalk from 'chalk';\nimport execa from 'execa';\nimport {existsSync as fileExists, rmdir} from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport prompts from 'prompts';\nimport {promisify} from 'util';\n\ntype Args = {\n  include?: string;\n  projectRoot: string;\n  verifyCache?: boolean;\n};\n\ntype Task = {\n  label: string;\n  action: () => Promise<void>;\n};\n\ntype CleanGroups = {\n  [key: string]: {\n    description: string;\n    tasks: Task[];\n  };\n};\n\nconst DEFAULT_GROUPS = ['metro', 'watchman'];\n\nconst rmdirAsync = promisify(rmdir);\n\nfunction cleanDir(directory: string): Promise<void> {\n  if (!fileExists(directory)) {\n    return Promise.resolve();\n  }\n\n  return rmdirAsync(directory, {maxRetries: 3, recursive: true});\n}\n\nfunction findPath(startPath: string, files: string[]): string | undefined {\n  // TODO: Find project files via `@react-native-community/cli`\n  for (const file of files) {\n    const filename = path.resolve(startPath, file);\n    if (fileExists(filename)) {\n      return filename;\n    }\n  }\n\n  return undefined;\n}\n\nasync function promptForCaches(\n  groups: CleanGroups,\n): Promise<string[] | undefined> {\n  const {caches} = await prompts({\n    type: 'multiselect',\n    name: 'caches',\n    message: 'Select all caches to clean',\n    choices: Object.entries(groups).map(([cmd, group]) => ({\n      title: `${cmd} ${chalk.dim(`(${group.description})`)}`,\n      value: cmd,\n      selected: DEFAULT_GROUPS.includes(cmd),\n    })),\n    min: 1,\n  });\n  return caches;\n}\n\nexport async function clean(\n  _argv: string[],\n  _config: CLIConfig,\n  cleanOptions: Args,\n): Promise<void> {\n  const {include, projectRoot, verifyCache} = cleanOptions;\n  if (!fileExists(projectRoot)) {\n    throw new Error(`Invalid path provided! ${projectRoot}`);\n  }\n\n  const COMMANDS: CleanGroups = {\n    android: {\n      description: 'Android build caches, e.g. Gradle',\n      tasks: [\n        {\n          label: 'Clean Gradle cache',\n          action: async () => {\n            const candidates =\n              os.platform() === 'win32'\n                ? ['android/gradlew.bat', 'gradlew.bat']\n                : ['android/gradlew', 'gradlew'];\n            const gradlew = findPath(projectRoot, candidates);\n            if (gradlew) {\n              const script = path.basename(gradlew);\n              await execa(\n                os.platform() === 'win32' ? script : `./${script}`,\n                ['clean'],\n                {cwd: path.dirname(gradlew)},\n              );\n            }\n          },\n        },\n      ],\n    },\n    ...(os.platform() === 'darwin'\n      ? {\n          cocoapods: {\n            description: 'CocoaPods cache',\n            tasks: [\n              {\n                label: 'Clean CocoaPods cache',\n                action: async () => {\n                  await execa('pod', ['cache', 'clean', '--all'], {\n                    cwd: projectRoot,\n                  });\n                },\n              },\n            ],\n          },\n        }\n      : undefined),\n    metro: {\n      description: 'Metro, haste-map caches',\n      tasks: [\n        {\n          label: 'Clean Metro cache',\n          action: () => cleanDir(`${os.tmpdir()}/metro-*`),\n        },\n        {\n          label: 'Clean Haste cache',\n          action: () => cleanDir(`${os.tmpdir()}/haste-map-*`),\n        },\n        {\n          label: 'Clean React Native cache',\n          action: () => cleanDir(`${os.tmpdir()}/react-*`),\n        },\n      ],\n    },\n    npm: {\n      description:\n        '`node_modules` folder in the current package, and optionally verify npm cache',\n      tasks: [\n        {\n          label: 'Remove node_modules',\n          action: () => cleanDir(`${projectRoot}/node_modules`),\n        },\n        ...(verifyCache\n          ? [\n              {\n                label: 'Verify npm cache',\n                action: async () => {\n                  await execa('npm', ['cache', 'verify'], {cwd: projectRoot});\n                },\n              },\n            ]\n          : []),\n      ],\n    },\n    watchman: {\n      description: 'Stop Watchman and delete its cache',\n      tasks: [\n        {\n          label: 'Stop Watchman',\n          action: async () => {\n            await execa(\n              os.platform() === 'win32' ? 'tskill' : 'killall',\n              ['watchman'],\n              {cwd: projectRoot},\n            );\n          },\n        },\n        {\n          label: 'Delete Watchman cache',\n          action: async () => {\n            await execa('watchman', ['watch-del-all'], {cwd: projectRoot});\n          },\n        },\n      ],\n    },\n    yarn: {\n      description: 'Yarn cache',\n      tasks: [\n        {\n          label: 'Clean Yarn cache',\n          action: async () => {\n            await execa('yarn', ['cache', 'clean'], {cwd: projectRoot});\n          },\n        },\n      ],\n    },\n  };\n\n  const groups = include ? include.split(',') : await promptForCaches(COMMANDS);\n  if (!groups || groups.length === 0) {\n    return;\n  }\n\n  const spinner = getLoader();\n  for (const group of groups) {\n    const commands = COMMANDS[group];\n    if (!commands) {\n      spinner.warn(`Unknown group: ${group}`);\n      continue;\n    }\n\n    for (const {action, label} of commands.tasks) {\n      spinner.start(label);\n      await action()\n        .then(() => {\n          spinner.succeed();\n        })\n        .catch((e) => {\n          spinner.fail(`${label} » ${e}`);\n        });\n    }\n  }\n}\n\nexport default {\n  func: clean,\n  name: 'clean',\n  description:\n    'Cleans your project by removing React Native related caches and modules.',\n  options: [\n    {\n      name: '--include <string>',\n      description:\n        'Comma-separated flag of caches to clear e.g. `npm,yarn`. If omitted, an interactive prompt will appear.',\n    },\n    {\n      name: '--project-root <string>',\n      description:\n        'Root path to your React Native project. When not specified, defaults to current working directory.',\n      default: process.cwd(),\n    },\n    {\n      name: '--verify-cache',\n      description:\n        'Whether to verify the cache. Currently only applies to npm cache.',\n      default: false,\n    },\n  ],\n};\n"]},"metadata":{},"sourceType":"script"}