{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _fetch = require(\"./fetch\");\n\nfunction isPackagerRunning() {\n  var packagerPort,\n      _await,\n      data,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function isPackagerRunning$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          packagerPort = _args.length > 0 && _args[0] !== undefined ? _args[0] : process.env.RCT_METRO_PORT || '8081';\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap((0, _fetch.fetch)(\"http://localhost:\" + packagerPort + \"/status\"));\n\n        case 4:\n          _await = _context.sent;\n          data = _await.data;\n          return _context.abrupt(\"return\", data === 'packager-status:running' ? 'running' : 'unrecognized');\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          return _context.abrupt(\"return\", 'not_running');\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n}\n\nvar _default = isPackagerRunning;\nexports.default = _default;","map":{"version":3,"sources":["../src/isPackagerRunning.ts"],"names":["packagerPort","process","data","isPackagerRunning"],"mappings":";;;;;;;;;AAQA,IAAA,MAAA,GAAA,OAAA,WAAA;;AASA,SAAA,iBAAA;EAAA;EAAA;EAAA;EAAA;;EAAA;IAAA;MAAA;QAAA;UACEA,YADF,2DACkCC,OAAO,CAAPA,GAAAA,CAAAA,cAAAA,IADlC,MAAA;UAAA;UAAA;UAAA,iCAIyB,CAAA,GAAA,MAAA,CAAA,KAAA,wBAArB,YAAqB,aAJzB;;QAAA;UAAA;UAIWC,IAJX,UAIWA,IAJX;UAAA,iCAMWA,IAAI,KAAJA,yBAAAA,GAAAA,SAAAA,GAAP,cANJ;;QAAA;UAAA;UAAA;UAAA,iCAQI,aARJ;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;eAYeC,iB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport {fetch} from './fetch';\n\n/**\n * Indicates whether or not the packager is running. It returns a promise that\n * returns one of these possible values:\n *   - `running`: the packager is running\n *   - `not_running`: the packager nor any process is running on the expected port.\n *   - `unrecognized`: one other process is running on the port we expect the packager to be running.\n */\nasync function isPackagerRunning(\n  packagerPort: string | number = process.env.RCT_METRO_PORT || '8081',\n): Promise<'running' | 'not_running' | 'unrecognized'> {\n  try {\n    const {data} = await fetch(`http://localhost:${packagerPort}/status`);\n\n    return data === 'packager-status:running' ? 'running' : 'unrecognized';\n  } catch (_error) {\n    return 'not_running';\n  }\n}\n\nexport default isPackagerRunning;\n"]},"metadata":{},"sourceType":"script"}