{"ast":null,"code":"\"use strict\";\n\nvar chalk = require(\"chalk\");\n\nvar _require = require(\"metro-core\"),\n    Terminal = _require.Terminal;\n\nvar stripAnsi = require(\"strip-ansi\");\n\nvar util = require(\"util\");\n\nfunction logWarning(terminal, format) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  var str = util.format.apply(util, [format].concat(args));\n  terminal.log(\"%s: %s\", chalk.yellow(\"warning\"), str);\n}\n\nfunction logError(terminal, format) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    args[_key2 - 2] = arguments[_key2];\n  }\n\n  terminal.log(\"%s: %s\", chalk.red(\"error\"), util.format.apply(util, [chalk.supportsColor ? format : stripAnsi(format)].concat(args)));\n}\n\nvar nullReporter = {\n  update: function update() {}\n};\nmodule.exports = {\n  logWarning: logWarning,\n  logError: logError,\n  nullReporter: nullReporter\n};","map":{"version":3,"names":["chalk","require","Terminal","stripAnsi","util","logWarning","terminal","format","args","str","log","yellow","logError","red","supportsColor","nullReporter","update","module","exports"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/metro/src/lib/reporting.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\"use strict\";\n\nconst chalk = require(\"chalk\");\n\nconst { Terminal } = require(\"metro-core\");\n\nconst stripAnsi = require(\"strip-ansi\");\n\nconst util = require(\"util\");\n\n/**\n * A standard way to log a warning to the terminal. This should not be called\n * from some arbitrary Metro logic, only from the reporters. Instead of\n * calling this, add a new type of ReportableEvent instead, and implement a\n * proper handler in the reporter(s).\n */\nfunction logWarning(terminal, format, ...args) {\n  const str = util.format(format, ...args);\n  terminal.log(\"%s: %s\", chalk.yellow(\"warning\"), str);\n}\n/**\n * Similar to `logWarning`, but for messages that require the user to act.\n */\n\nfunction logError(terminal, format, ...args) {\n  terminal.log(\n    \"%s: %s\",\n    chalk.red(\"error\"), // Syntax errors may have colors applied for displaying code frames\n    // in various places outside of where Metro is currently running.\n    // If the current terminal does not support color, we'll strip the colors\n    // here.\n    util.format(chalk.supportsColor ? format : stripAnsi(format), ...args)\n  );\n}\n/**\n * A reporter that does nothing. Errors and warnings will be swallowed, that\n * is generally not what you want.\n */\n\nconst nullReporter = {\n  update() {},\n};\nmodule.exports = {\n  logWarning,\n  logError,\n  nullReporter,\n};\n"],"mappings":"AASA;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,eAAqBA,OAAO,CAAC,YAAD,CAA5B;AAAA,IAAQC,QAAR,YAAQA,QAAR;;AAEA,IAAMC,SAAS,GAAGF,OAAO,CAAC,YAAD,CAAzB;;AAEA,IAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AAQA,SAASI,UAAT,CAAoBC,QAApB,EAA8BC,MAA9B,EAA+C;EAAA,kCAANC,IAAM;IAANA,IAAM;EAAA;;EAC7C,IAAMC,GAAG,GAAGL,IAAI,CAACG,MAAL,OAAAH,IAAI,GAAQG,MAAR,SAAmBC,IAAnB,EAAhB;EACAF,QAAQ,CAACI,GAAT,CAAa,QAAb,EAAuBV,KAAK,CAACW,MAAN,CAAa,SAAb,CAAvB,EAAgDF,GAAhD;AACD;;AAKD,SAASG,QAAT,CAAkBN,QAAlB,EAA4BC,MAA5B,EAA6C;EAAA,mCAANC,IAAM;IAANA,IAAM;EAAA;;EAC3CF,QAAQ,CAACI,GAAT,CACE,QADF,EAEEV,KAAK,CAACa,GAAN,CAAU,OAAV,CAFF,EAMET,IAAI,CAACG,MAAL,OAAAH,IAAI,GAAQJ,KAAK,CAACc,aAAN,GAAsBP,MAAtB,GAA+BJ,SAAS,CAACI,MAAD,CAAhD,SAA6DC,IAA7D,EANN;AAQD;;AAMD,IAAMO,YAAY,GAAG;EACnBC,MADmB,oBACV,CAAE;AADQ,CAArB;AAGAC,MAAM,CAACC,OAAP,GAAiB;EACfb,UAAU,EAAVA,UADe;EAEfO,QAAQ,EAARA,QAFe;EAGfG,YAAY,EAAZA;AAHe,CAAjB"},"metadata":{},"sourceType":"script"}