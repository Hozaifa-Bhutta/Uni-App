{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.brewInstall = brewInstall;\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _common = require(\"./healthchecks/common\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction brewInstall(_ref) {\n  var pkg, label, loader, onSuccess, onFail;\n  return _regeneratorRuntime.async(function brewInstall$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pkg = _ref.pkg, label = _ref.label, loader = _ref.loader, onSuccess = _ref.onSuccess, onFail = _ref.onFail;\n          loader.start(label);\n          _context.prev = 2;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap((0, _execa().default)('brew', ['install', pkg]));\n\n        case 5:\n          if (!(typeof onSuccess === 'function')) {\n            _context.next = 7;\n            break;\n          }\n\n          return _context.abrupt(\"return\", onSuccess());\n\n        case 7:\n          return _context.abrupt(\"return\", loader.succeed());\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](2);\n\n          if (!(typeof onFail === 'function')) {\n            _context.next = 14;\n            break;\n          }\n\n          return _context.abrupt(\"return\", onFail());\n\n        case 14:\n          (0, _common.logError)({\n            healthcheck: label || pkg,\n            loader: loader,\n            error: _context.t0,\n            command: \"brew install \" + pkg\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 10]], Promise);\n}","map":{"version":3,"sources":["../../src/tools/brewInstall.ts"],"names":["onFail","loader","onSuccess","healthcheck","label","error","command","pkg"],"mappings":";;;;;;;;;AAAA,SAAA,MAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;EAAA,MAAA,GAAA,kBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AAEA,IAAA,OAAA,GAAA,OAAA,yBAAA;;;;;;;;AAUA,SAAA,WAAA;EAAA;EAAA;IAAA;MAAA;QAAA;UAA2B,GAA3B,QAA2B,GAA3B,EAA2B,KAA3B,QAA2B,KAA3B,EAA2B,MAA3B,QAA2B,MAA3B,EAA2B,SAA3B,QAA2B,SAA3B,EAKEA,MALF,QAKEA,MALF;UAOEC,MAAM,CAANA,KAAAA,CAAAA,KAAAA;UAPF;UAAA;UAAA,iCAUU,CAAA,GAAA,MAAA,GAAA,OAAA,EAAA,MAAA,EAAc,CAAA,SAAA,EAApB,GAAoB,CAAd,CAVV;;QAAA;UAAA,MAYQ,OAAA,SAAA,KAAJ,UAZJ;YAAA;YAAA;UAAA;;UAAA,iCAaaC,SAAP,EAbN;;QAAA;UAAA,iCAgBWD,MAAM,CAAb,OAAOA,EAhBX;;QAAA;UAAA;UAAA;;UAAA,MAkBQ,OAAA,MAAA,KAAJ,UAlBJ;YAAA;YAAA;UAAA;;UAAA,iCAmBaD,MAAP,EAnBN;;QAAA;UAsBI,CAAA,GAAA,OAAA,CAAA,QAAA,EAAS;YACPG,WAAW,EAAEC,KAAK,IADX,GAAA;YAEPH,MAFO,EAEPA,MAFO;YAGPI,KAHO,aAAA;YAIPC,OAAO,oBAAkBC;UAJlB,CAAT;;QAtBJ;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","sourcesContent":["import execa from 'execa';\nimport {Loader} from '../types';\nimport {logError} from './healthchecks/common';\n\ntype InstallArgs = {\n  pkg: string;\n  label?: string;\n  loader: Loader;\n  onSuccess?: () => void;\n  onFail?: () => void;\n};\n\nasync function brewInstall({\n  pkg,\n  label,\n  loader,\n  onSuccess,\n  onFail,\n}: InstallArgs) {\n  loader.start(label);\n\n  try {\n    await execa('brew', ['install', pkg]);\n\n    if (typeof onSuccess === 'function') {\n      return onSuccess();\n    }\n\n    return loader.succeed();\n  } catch (error) {\n    if (typeof onFail === 'function') {\n      return onFail();\n    }\n\n    logError({\n      healthcheck: label || pkg,\n      loader,\n      error,\n      command: `brew install ${pkg}`,\n    });\n  }\n}\n\nexport {brewInstall};\n"]},"metadata":{},"sourceType":"script"}