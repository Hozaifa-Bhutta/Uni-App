{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.changePlaceholderInTemplate = changePlaceholderInTemplate;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _walk = _interopRequireDefault(require(\"../../tools/walk\"));\n\nfunction _fsExtra() {\n  var data = _interopRequireDefault(require(\"fs-extra\"));\n\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar DEFAULT_TITLE_PLACEHOLDER = 'Hello App Display Name';\n\nfunction replaceNameInUTF8File(filePath, projectName, templateName) {\n  var fileContent, replacedFileContent;\n  return _regeneratorRuntime.async(function replaceNameInUTF8File$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _cliTools().logger.debug(\"Replacing in \" + filePath);\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(_fsExtra().default.readFile(filePath, 'utf8'));\n\n        case 3:\n          fileContent = _context.sent;\n          replacedFileContent = fileContent.replace(new RegExp(templateName, 'g'), projectName).replace(new RegExp(templateName.toLowerCase(), 'g'), projectName.toLowerCase());\n\n          if (!(fileContent !== replacedFileContent)) {\n            _context.next = 8;\n            break;\n          }\n\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(_fsExtra().default.writeFile(filePath, replacedFileContent, 'utf8'));\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction renameFile(filePath, oldName, newName) {\n  var newFileName;\n  return _regeneratorRuntime.async(function renameFile$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          newFileName = _path().default.join(_path().default.dirname(filePath), _path().default.basename(filePath).replace(new RegExp(oldName, 'g'), newName));\n\n          _cliTools().logger.debug(\"Renaming \" + filePath + \" -> file:\" + newFileName);\n\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(_fsExtra().default.rename(filePath, newFileName));\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction shouldRenameFile(filePath, nameToReplace) {\n  return _path().default.basename(filePath).includes(nameToReplace);\n}\n\nfunction shouldIgnoreFile(filePath) {\n  return filePath.match(/node_modules|yarn.lock|package-lock.json/g);\n}\n\nvar UNDERSCORED_DOTFILES = ['buckconfig', 'eslintrc.js', 'flowconfig', 'gitattributes', 'gitignore', 'prettierrc.js', 'watchmanconfig', 'editorconfig', 'bundle', 'ruby-version', 'xcode.env'];\n\nfunction processDotfiles(filePath) {\n  var dotfile;\n  return _regeneratorRuntime.async(function processDotfiles$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          dotfile = UNDERSCORED_DOTFILES.find(function (e) {\n            return filePath.includes(\"_\" + e);\n          });\n\n          if (!(dotfile === undefined)) {\n            _context3.next = 3;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 3:\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(renameFile(filePath, \"_\" + dotfile, \".\" + dotfile));\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction changePlaceholderInTemplate(_ref) {\n  var projectName, placeholderName, _ref$placeholderTitle, placeholderTitle, _ref$projectTitle, projectTitle, _iterator, _step, filePath;\n\n  return _regeneratorRuntime.async(function changePlaceholderInTemplate$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          projectName = _ref.projectName, placeholderName = _ref.placeholderName, _ref$placeholderTitle = _ref.placeholderTitle, placeholderTitle = _ref$placeholderTitle === void 0 ? DEFAULT_TITLE_PLACEHOLDER : _ref$placeholderTitle, _ref$projectTitle = _ref.projectTitle, projectTitle = _ref$projectTitle === void 0 ? projectName : _ref$projectTitle;\n\n          _cliTools().logger.debug(\"Changing \" + placeholderName + \" for \" + projectName + \" in template\");\n\n          _iterator = _createForOfIteratorHelperLoose((0, _walk.default)(process.cwd()).reverse());\n\n        case 3:\n          if ((_step = _iterator()).done) {\n            _context4.next = 24;\n            break;\n          }\n\n          filePath = _step.value;\n\n          if (!shouldIgnoreFile(filePath)) {\n            _context4.next = 7;\n            break;\n          }\n\n          return _context4.abrupt(\"continue\", 22);\n\n        case 7:\n          _context4.next = 9;\n          return _regeneratorRuntime.awrap(_fsExtra().default.stat(filePath));\n\n        case 9:\n          if (_context4.sent.isDirectory()) {\n            _context4.next = 14;\n            break;\n          }\n\n          _context4.next = 12;\n          return _regeneratorRuntime.awrap(replaceNameInUTF8File(filePath, projectName, placeholderName));\n\n        case 12:\n          _context4.next = 14;\n          return _regeneratorRuntime.awrap(replaceNameInUTF8File(filePath, projectTitle, placeholderTitle));\n\n        case 14:\n          if (!shouldRenameFile(filePath, placeholderName)) {\n            _context4.next = 17;\n            break;\n          }\n\n          _context4.next = 17;\n          return _regeneratorRuntime.awrap(renameFile(filePath, placeholderName, projectName));\n\n        case 17:\n          if (!shouldRenameFile(filePath, placeholderName.toLowerCase())) {\n            _context4.next = 20;\n            break;\n          }\n\n          _context4.next = 20;\n          return _regeneratorRuntime.awrap(renameFile(filePath, placeholderName.toLowerCase(), projectName.toLowerCase()));\n\n        case 20:\n          _context4.next = 22;\n          return _regeneratorRuntime.awrap(processDotfiles(filePath));\n\n        case 22:\n          _context4.next = 3;\n          break;\n\n        case 24:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../../../src/commands/init/editTemplate.ts"],"names":["DEFAULT_TITLE_PLACEHOLDER","logger","fileContent","fs","replacedFileContent","templateName","projectName","newFileName","path","filePath","UNDERSCORED_DOTFILES","dotfile","e","renameFile","placeholderTitle","projectTitle","placeholderName","process","shouldIgnoreFile","replaceNameInUTF8File","shouldRenameFile","processDotfiles"],"mappings":"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","sourcesContent":["import path from 'path';\nimport {logger} from '@react-native-community/cli-tools';\nimport walk from '../../tools/walk';\n\n// We need `graceful-fs` behavior around async file renames on Win32.\n// `gracefulify` does not support patching `fs.promises`. Use `fs-extra`, which\n// exposes its own promise-based interface over `graceful-fs`.\nimport fs from 'fs-extra';\n\ninterface PlaceholderConfig {\n  projectName: string;\n  placeholderName: string;\n  placeholderTitle?: string;\n  projectTitle?: string;\n}\n\n/**\n  TODO: This is a default placeholder for title in react-native template.\n  We should get rid of this once custom templates adapt `placeholderTitle` in their configurations.\n*/\nconst DEFAULT_TITLE_PLACEHOLDER = 'Hello App Display Name';\n\nasync function replaceNameInUTF8File(\n  filePath: string,\n  projectName: string,\n  templateName: string,\n) {\n  logger.debug(`Replacing in ${filePath}`);\n  const fileContent = await fs.readFile(filePath, 'utf8');\n  const replacedFileContent = fileContent\n    .replace(new RegExp(templateName, 'g'), projectName)\n    .replace(\n      new RegExp(templateName.toLowerCase(), 'g'),\n      projectName.toLowerCase(),\n    );\n\n  if (fileContent !== replacedFileContent) {\n    await fs.writeFile(filePath, replacedFileContent, 'utf8');\n  }\n}\n\nasync function renameFile(filePath: string, oldName: string, newName: string) {\n  const newFileName = path.join(\n    path.dirname(filePath),\n    path.basename(filePath).replace(new RegExp(oldName, 'g'), newName),\n  );\n\n  logger.debug(`Renaming ${filePath} -> file:${newFileName}`);\n\n  await fs.rename(filePath, newFileName);\n}\n\nfunction shouldRenameFile(filePath: string, nameToReplace: string) {\n  return path.basename(filePath).includes(nameToReplace);\n}\n\nfunction shouldIgnoreFile(filePath: string) {\n  return filePath.match(/node_modules|yarn.lock|package-lock.json/g);\n}\n\nconst UNDERSCORED_DOTFILES = [\n  'buckconfig',\n  'eslintrc.js',\n  'flowconfig',\n  'gitattributes',\n  'gitignore',\n  'prettierrc.js',\n  'watchmanconfig',\n  'editorconfig',\n  'bundle',\n  'ruby-version',\n  'xcode.env',\n];\n\nasync function processDotfiles(filePath: string) {\n  const dotfile = UNDERSCORED_DOTFILES.find((e) => filePath.includes(`_${e}`));\n\n  if (dotfile === undefined) {\n    return;\n  }\n\n  await renameFile(filePath, `_${dotfile}`, `.${dotfile}`);\n}\n\nexport async function changePlaceholderInTemplate({\n  projectName,\n  placeholderName,\n  placeholderTitle = DEFAULT_TITLE_PLACEHOLDER,\n  projectTitle = projectName,\n}: PlaceholderConfig) {\n  logger.debug(`Changing ${placeholderName} for ${projectName} in template`);\n\n  for (const filePath of walk(process.cwd()).reverse()) {\n    if (shouldIgnoreFile(filePath)) {\n      continue;\n    }\n    if (!(await fs.stat(filePath)).isDirectory()) {\n      await replaceNameInUTF8File(filePath, projectName, placeholderName);\n      await replaceNameInUTF8File(filePath, projectTitle, placeholderTitle);\n    }\n    if (shouldRenameFile(filePath, placeholderName)) {\n      await renameFile(filePath, placeholderName, projectName);\n    }\n    if (shouldRenameFile(filePath, placeholderName.toLowerCase())) {\n      await renameFile(\n        filePath,\n        placeholderName.toLowerCase(),\n        projectName.toLowerCase(),\n      );\n    }\n\n    await processDotfiles(filePath);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}