{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = releaseChecker;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _logger = _interopRequireDefault(require(\"../logger\"));\n\nvar _resolveNodeModuleDir = _interopRequireDefault(require(\"../resolveNodeModuleDir\"));\n\nvar _getLatestRelease = _interopRequireDefault(require(\"./getLatestRelease\"));\n\nvar _printNewRelease = _interopRequireDefault(require(\"./printNewRelease\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction releaseChecker(root) {\n  var _require, currentVersion, _require2, name, latestRelease;\n\n  return _regeneratorRuntime.async(function releaseChecker$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _require = require(_path().default.join((0, _resolveNodeModuleDir.default)(root, 'react-native'), 'package.json')), currentVersion = _require.version;\n          _require2 = require(_path().default.join(root, 'package.json')), name = _require2.name;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap((0, _getLatestRelease.default)(name, currentVersion));\n\n        case 5:\n          latestRelease = _context.sent;\n\n          if (latestRelease) {\n            (0, _printNewRelease.default)(name, latestRelease, currentVersion);\n          }\n\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n\n          _logger.default.debug('Cannot detect current version of React Native, ' + 'skipping check for a newer release');\n\n          _logger.default.debug(_context.t0);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n}","map":{"version":3,"sources":["../../src/releaseChecker/index.ts"],"names":["version","currentVersion","require","path","name","latestRelease","logger"],"mappings":";;;;;;;;;AAAA,SAAA,KAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;EAAA,KAAA,GAAA,iBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,aAAA,CAAA;;AAEA,IAAA,qBAAA,GAAA,sBAAA,CAAA,OAAA,2BAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,sBAAA,CAAA,OAAA,sBAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,sBAAA,CAAA,OAAA,qBAAA,CAAA;;;;;;;;AAEe,SAAA,cAAA,CAAA,IAAA;EAAA;;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA,WAEuBE,OAAO,CAACC,KAAAA,GAAAA,OAAAA,CAAAA,IAAAA,CACxC,CAAA,GAAA,qBAAA,CAAA,OAAA,EAAA,IAAA,EADwCA,cACxC,CADwCA,EAA1C,cAA0CA,CAAD,CAF9B,EAEKF,cAFL,YAEJD,OAFI;UAAA,YAMIE,OAAO,CAACC,KAAAA,GAAAA,OAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAvB,cAAuBA,CAAD,CANX,EAMJC,IANI,aAMJA,IANI;UAAA;UAAA,iCAOiB,CAAA,GAAA,iBAAA,CAAA,OAAA,EAAA,IAAA,EAA5B,cAA4B,CAPjB;;QAAA;UAOLC,aAPK;;UASX,IAAA,aAAA,EAAmB;YACjB,CAAA,GAAA,gBAAA,CAAA,OAAA,EAAA,IAAA,EAAA,aAAA,EAAA,cAAA;UACD;;UAXU;UAAA;;QAAA;UAAA;UAAA;;UAeXC,OAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CACE,oDADFA,oCAAAA;;UAIAA,OAAAA,CAAAA,OAAAA,CAAAA,KAAAA;;QAnBW;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","sourcesContent":["import path from 'path';\nimport logger from '../logger';\n// @ts-ignore - JS file\nimport resolveNodeModuleDir from '../resolveNodeModuleDir';\nimport getLatestRelease from './getLatestRelease';\nimport printNewRelease from './printNewRelease';\n\nexport default async function releaseChecker(root: string) {\n  try {\n    const {version: currentVersion} = require(path.join(\n      resolveNodeModuleDir(root, 'react-native'),\n      'package.json',\n    ));\n    const {name} = require(path.join(root, 'package.json'));\n    const latestRelease = await getLatestRelease(name, currentVersion);\n\n    if (latestRelease) {\n      printNewRelease(name, latestRelease, currentVersion);\n    }\n  } catch (e) {\n    // We let the flow continue as this component is not vital for the rest of\n    // the CLI.\n    logger.debug(\n      'Cannot detect current version of React Native, ' +\n        'skipping check for a newer release',\n    );\n    logger.debug(e);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}