{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _versionRanges = _interopRequireDefault(require(\"../versionRanges\"));\n\nvar _checkInstallation = require(\"../checkInstallation\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _default = {\n  label: 'Android NDK',\n  description: 'Required for building React Native from the source',\n  getDiagnostics: function getDiagnostics(_ref) {\n    var SDKs, androidSdk, version;\n    return _regeneratorRuntime.async(function getDiagnostics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            SDKs = _ref.SDKs;\n            androidSdk = SDKs['Android SDK'];\n            version = androidSdk === 'Not Found' ? androidSdk : androidSdk['Android NDK'];\n            return _context.abrupt(\"return\", {\n              needsToBeFixed: (0, _checkInstallation.doesSoftwareNeedToBeFixed)({\n                version: version,\n                versionRange: _versionRanges.default.ANDROID_NDK\n              }),\n              version: version,\n              versionRange: _versionRanges.default.ANDROID_NDK\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  runAutomaticFix: function runAutomaticFix(_ref2) {\n    var loader, logManualInstallation, environmentInfo, androidSdk, isNDKInstalled;\n    return _regeneratorRuntime.async(function runAutomaticFix$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            loader = _ref2.loader, logManualInstallation = _ref2.logManualInstallation, environmentInfo = _ref2.environmentInfo;\n            androidSdk = environmentInfo.SDKs['Android SDK'];\n            isNDKInstalled = androidSdk !== 'Not Found' && androidSdk['Android NDK'] !== 'Not Found';\n            loader.fail();\n\n            if (!isNDKInstalled) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", logManualInstallation({\n              message: \"Read more about how to update Android NDK at \" + _chalk().default.dim('https://developer.android.com/ndk/downloads')\n            }));\n\n          case 6:\n            return _context2.abrupt(\"return\", logManualInstallation({\n              healthcheck: 'Android NDK',\n              url: 'https://developer.android.com/ndk/downloads'\n            }));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["../../../src/tools/healthchecks/androidNDK.ts"],"names":["label","description","getDiagnostics","SDKs","androidSdk","version","needsToBeFixed","versionRange","versionRanges","ANDROID_NDK","runAutomaticFix","environmentInfo","isNDKInstalled","loader","logManualInstallation","message","chalk","healthcheck","url"],"mappings":";;;;;;;;;AAAA,SAAA,MAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;EAAA,MAAA,GAAA,kBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,oBAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,OAAA,wBAAA;;;;;;;;eAGe;EACbA,KAAK,EADQ,aAAA;EAEbC,WAAW,EAFE,oDAAA;EAGbC,cAAc,EAAE;IAAA;IAAA;MAAA;QAAA;UAAA;YAAQC,IAAR,QAAQA,IAAR;YACRC,UADQ,GACKD,IAAI,CAAvB,aAAuB,CADT;YAERE,OAFQ,GAGZD,UAAU,KAAVA,WAAAA,GAAAA,UAAAA,GAA0CA,UAAU,CADtD,aACsD,CAHxC;YAAA,iCAKP;cACLE,cAAc,EAAE,CAAA,GAAA,kBAAA,CAAA,yBAAA,EAA0B;gBACxCD,OADwC,EACxCA,OADwC;gBAExCE,YAAY,EAAEC,cAAAA,CAAAA,OAAAA,CAAcC;cAFY,CAA1B,CADX;cAKLJ,OALK,EAKLA,OALK;cAMLE,YAAY,EAAEC,cAAAA,CAAAA,OAAAA,CAAcC;YANvB,CALO;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAHH;EAiBbC,eAAe,EAAE;IAAA;IAAA;MAAA;QAAA;UAAA;YAAO,MAAP,SAAO,MAAP,EAAO,qBAAP,SAAO,qBAAP,EAAuCC,eAAvC,SAAuCA,eAAvC;YACTP,UADS,GACIO,eAAe,CAAfA,IAAAA,CAAnB,aAAmBA,CADJ;YAETC,cAFS,GAGbR,UAAU,KAAVA,WAAAA,IAA8BA,UAAU,CAAVA,aAAU,CAAVA,KADhC,WAFe;YAKfS,MAAM,CAANA,IAAAA;;YALe,KAOf,cAPe;cAAA;cAAA;YAAA;;YAAA,kCAQNC,qBAAqB,CAAC;cAC3BC,OAAO,oDAAkDC,MAAAA,GAAAA,OAAAA,CAAAA,GAAAA,CAAAA,6CAAAA;YAD9B,CAAD,CARf;;UAAA;YAAA,kCAeRF,qBAAqB,CAAC;cAC3BG,WAAW,EADgB,aAAA;cAE3BC,GAAG,EAAE;YAFsB,CAAD,CAfb;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;AAjBJ,C","sourcesContent":["import chalk from 'chalk';\nimport versionRanges from '../versionRanges';\nimport {doesSoftwareNeedToBeFixed} from '../checkInstallation';\nimport {EnvironmentInfo, HealthCheckInterface} from '../../types';\n\nexport default {\n  label: 'Android NDK',\n  description: 'Required for building React Native from the source',\n  getDiagnostics: async ({SDKs}: EnvironmentInfo) => {\n    const androidSdk = SDKs['Android SDK'];\n    const version =\n      androidSdk === 'Not Found' ? androidSdk : androidSdk['Android NDK'];\n\n    return {\n      needsToBeFixed: doesSoftwareNeedToBeFixed({\n        version,\n        versionRange: versionRanges.ANDROID_NDK,\n      }),\n      version,\n      versionRange: versionRanges.ANDROID_NDK,\n    };\n  },\n  runAutomaticFix: async ({loader, logManualInstallation, environmentInfo}) => {\n    const androidSdk = environmentInfo.SDKs['Android SDK'];\n    const isNDKInstalled =\n      androidSdk !== 'Not Found' && androidSdk['Android NDK'] !== 'Not Found';\n\n    loader.fail();\n\n    if (isNDKInstalled) {\n      return logManualInstallation({\n        message: `Read more about how to update Android NDK at ${chalk.dim(\n          'https://developer.android.com/ndk/downloads',\n        )}`,\n      });\n    }\n\n    return logManualInstallation({\n      healthcheck: 'Android NDK',\n      url: 'https://developer.android.com/ndk/downloads',\n    });\n  },\n} as HealthCheckInterface;\n"]},"metadata":{},"sourceType":"script"}