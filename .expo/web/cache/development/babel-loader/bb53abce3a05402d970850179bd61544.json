{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useState, useEffect } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Task(props) {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      isCompleted = _useState2[0],\n      setIsCompleted = _useState2[1];\n\n  var width = Dimensions.get('window').width;\n  var height = Dimensions.get('window').height;\n\n  var _onPress = function onPress() {\n    console.log(isCompleted);\n    setIsCompleted(true);\n  };\n\n  if (!isCompleted) {\n    return _jsxs(View, {\n      style: {\n        height: \"20%\",\n        width: \"60%\"\n      },\n      children: [_jsx(Text, {\n        style: {\n          fontSize: 0.03 * height\n        },\n        children: props.title\n      }), _jsxs(Text, {\n        style: {\n          alignSelf: \"center\",\n          fontSize: 0.02 * height\n        },\n        children: [\"Description: \", props.description]\n      }), _jsx(Button, {\n        title: \"Complete\",\n        onPress: function onPress() {\n          return _onPress();\n        }\n      }), _jsx(View, {\n        style: {\n          height: \"10%\"\n        }\n      })]\n    });\n  } else {\n    return _jsx(View, {});\n  }\n}","map":{"version":3,"names":["useState","useEffect","Task","props","isCompleted","setIsCompleted","width","Dimensions","get","height","onPress","console","log","fontSize","title","alignSelf","description"],"sources":["/Users/amartyagunjan/Storage/Uni-App/Task.js"],"sourcesContent":["import { Dimensions, View, Text, Button } from 'react-native';\nimport { useState, useEffect } from 'react';\n\n\n\nexport default function Task(props) {\n    const [isCompleted, setIsCompleted] = useState()\n    const width = Dimensions.get('window').width\n    const height = Dimensions.get('window').height\n    const onPress = () => {\n        console.log(isCompleted)\n        setIsCompleted(true)\n    }\n\n\n    if (!isCompleted) {\n        return <View style = {{height: \"20%\", width: \"60%\"}}>\n\n                <Text style = {{fontSize: 0.03 * height}}>\n                    {props.title}\n                </Text>\n                <Text style = {{alignSelf: \"center\",fontSize: 0.02 * height }}>\n                    Description: {props.description}\n                </Text>\n                <Button title = \"Complete\" onPress= {() => onPress()}></Button>\n                <View style = {{height: \"10%\"}}></View>\n                \n\n            </View>\n    } \n    else {\n        return <View></View>\n    }\n}\n"],"mappings":";;;;;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAIA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;EAChC,gBAAsCH,QAAQ,EAA9C;EAAA;EAAA,IAAOI,WAAP;EAAA,IAAoBC,cAApB;;EACA,IAAMC,KAAK,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KAAvC;EACA,IAAMG,MAAM,GAAGF,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,MAAxC;;EACA,IAAMC,QAAO,GAAG,SAAVA,OAAU,GAAM;IAClBC,OAAO,CAACC,GAAR,CAAYR,WAAZ;IACAC,cAAc,CAAC,IAAD,CAAd;EACH,CAHD;;EAMA,IAAI,CAACD,WAAL,EAAkB;IACd,OAAO,MAAC,IAAD;MAAM,KAAK,EAAI;QAACK,MAAM,EAAE,KAAT;QAAgBH,KAAK,EAAE;MAAvB,CAAf;MAAA,WAEC,KAAC,IAAD;QAAM,KAAK,EAAI;UAACO,QAAQ,EAAE,OAAOJ;QAAlB,CAAf;QAAA,UACKN,KAAK,CAACW;MADX,EAFD,EAKC,MAAC,IAAD;QAAM,KAAK,EAAI;UAACC,SAAS,EAAE,QAAZ;UAAqBF,QAAQ,EAAE,OAAOJ;QAAtC,CAAf;QAAA,4BACkBN,KAAK,CAACa,WADxB;MAAA,EALD,EAQC,KAAC,MAAD;QAAQ,KAAK,EAAG,UAAhB;QAA2B,OAAO,EAAG;UAAA,OAAMN,QAAO,EAAb;QAAA;MAArC,EARD,EASC,KAAC,IAAD;QAAM,KAAK,EAAI;UAACD,MAAM,EAAE;QAAT;MAAf,EATD;IAAA,EAAP;EAaH,CAdD,MAeK;IACD,OAAO,KAAC,IAAD,KAAP;EACH;AACJ"},"metadata":{},"sourceType":"module"}