{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _toArray = require(\"@babel/runtime/helpers/toArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _require = require(\"./Bundler/util\"),\n    isAssetTypeAnImage = _require.isAssetTypeAnImage;\n\nvar AssetPaths = require(\"./node-haste/lib/AssetPaths\");\n\nvar crypto = require(\"crypto\");\n\nvar denodeify = require(\"denodeify\");\n\nvar fs = require(\"fs\");\n\nvar imageSize = require(\"image-size\");\n\nvar path = require(\"path\");\n\nvar readDir = denodeify(fs.readdir);\nvar readFile = denodeify(fs.readFile);\nvar hashFiles = denodeify(function hashFilesCb(files, hash, callback) {\n  if (!files.length) {\n    callback(null);\n    return;\n  }\n\n  var file = files.shift();\n  fs.readFile(file, function (err, data) {\n    if (err) {\n      callback(err);\n      return;\n    } else {\n      hash.update(data);\n      hashFilesCb(files, hash, callback);\n    }\n  });\n});\n\nfunction buildAssetMap(dir, files, platform) {\n  var platforms = new Set(platform != null ? [platform] : []);\n  var assets = files.map(function (file) {\n    return AssetPaths.tryParse(file, platforms);\n  });\n  var map = new Map();\n  assets.forEach(function (asset, i) {\n    if (asset == null) {\n      return;\n    }\n\n    var file = files[i];\n    var assetKey = getAssetKey(asset.assetName, asset.platform);\n    var record = map.get(assetKey);\n\n    if (!record) {\n      record = {\n        scales: [],\n        files: []\n      };\n      map.set(assetKey, record);\n    }\n\n    var insertIndex;\n    var length = record.scales.length;\n\n    for (insertIndex = 0; insertIndex < length; insertIndex++) {\n      if (asset.resolution < record.scales[insertIndex]) {\n        break;\n      }\n    }\n\n    record.scales.splice(insertIndex, 0, asset.resolution);\n    record.files.splice(insertIndex, 0, path.join(dir, file));\n  });\n  return map;\n}\n\nfunction getAssetKey(assetName, platform) {\n  if (platform != null) {\n    return assetName + \" : \" + platform;\n  } else {\n    return assetName;\n  }\n}\n\nfunction getAbsoluteAssetRecord(assetPath) {\n  var platform,\n      filename,\n      dir,\n      files,\n      assetData,\n      map,\n      record,\n      _args = arguments;\n  return _regeneratorRuntime.async(function getAbsoluteAssetRecord$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          platform = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;\n          filename = path.basename(assetPath);\n          dir = path.dirname(assetPath);\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(readDir(dir));\n\n        case 5:\n          files = _context.sent;\n          assetData = AssetPaths.parse(filename, new Set(platform != null ? [platform] : []));\n          map = buildAssetMap(dir, files, platform);\n\n          if (platform != null) {\n            record = map.get(getAssetKey(assetData.assetName, platform)) || map.get(assetData.assetName);\n          } else {\n            record = map.get(assetData.assetName);\n          }\n\n          if (record) {\n            _context.next = 11;\n            break;\n          }\n\n          throw new Error(\"Asset not found: \" + assetPath + \" for platform: \" + platform);\n\n        case 11:\n          return _context.abrupt(\"return\", record);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getAbsoluteAssetInfo(assetPath) {\n  var platform,\n      nameData,\n      name,\n      type,\n      _await$getAbsoluteAss,\n      scales,\n      files,\n      hasher,\n      _args2 = arguments;\n\n  return _regeneratorRuntime.async(function getAbsoluteAssetInfo$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          platform = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : null;\n          nameData = AssetPaths.parse(assetPath, new Set(platform != null ? [platform] : []));\n          name = nameData.name, type = nameData.type;\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(getAbsoluteAssetRecord(assetPath, platform));\n\n        case 5:\n          _await$getAbsoluteAss = _context2.sent;\n          scales = _await$getAbsoluteAss.scales;\n          files = _await$getAbsoluteAss.files;\n          hasher = crypto.createHash(\"md5\");\n\n          if (!(files.length > 0)) {\n            _context2.next = 12;\n            break;\n          }\n\n          _context2.next = 12;\n          return _regeneratorRuntime.awrap(hashFiles(Array.from(files), hasher));\n\n        case 12:\n          return _context2.abrupt(\"return\", {\n            files: files,\n            hash: hasher.digest(\"hex\"),\n            name: name,\n            scales: scales,\n            type: type\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getAssetData(assetPath, localPath, assetDataPlugins) {\n  var platform,\n      publicPath,\n      assetUrlPath,\n      isImage,\n      assetInfo,\n      isImageInput,\n      dimensions,\n      scale,\n      assetData,\n      _args3 = arguments;\n  return _regeneratorRuntime.async(function getAssetData$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          platform = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : null;\n          publicPath = _args3.length > 4 ? _args3[4] : undefined;\n          assetUrlPath = localPath.startsWith(\"..\") ? publicPath.replace(/\\/$/, \"\") + \"/\" + path.dirname(localPath) : path.join(publicPath, path.dirname(localPath));\n\n          if (path.sep === \"\\\\\") {\n            assetUrlPath = assetUrlPath.replace(/\\\\/g, \"/\");\n          }\n\n          isImage = isAssetTypeAnImage(path.extname(assetPath).slice(1));\n          _context3.next = 7;\n          return _regeneratorRuntime.awrap(getAbsoluteAssetInfo(assetPath, platform));\n\n        case 7:\n          assetInfo = _context3.sent;\n          isImageInput = assetInfo.files[0].includes(\".zip/\") ? fs.readFileSync(assetInfo.files[0]) : assetInfo.files[0];\n          dimensions = isImage ? imageSize(isImageInput) : null;\n          scale = assetInfo.scales[0];\n          assetData = {\n            __packager_asset: true,\n            fileSystemLocation: path.dirname(assetPath),\n            httpServerLocation: assetUrlPath,\n            width: dimensions ? dimensions.width / scale : undefined,\n            height: dimensions ? dimensions.height / scale : undefined,\n            scales: assetInfo.scales,\n            files: assetInfo.files,\n            hash: assetInfo.hash,\n            name: assetInfo.name,\n            type: assetInfo.type\n          };\n          _context3.next = 14;\n          return _regeneratorRuntime.awrap(applyAssetDataPlugins(assetDataPlugins, assetData));\n\n        case 14:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction applyAssetDataPlugins(assetDataPlugins, assetData) {\n  var _assetDataPlugins, currentAssetPlugin, remainingAssetPlugins, assetPluginFunction, resultAssetData;\n\n  return _regeneratorRuntime.async(function applyAssetDataPlugins$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (assetDataPlugins.length) {\n            _context4.next = 2;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", assetData);\n\n        case 2:\n          _assetDataPlugins = _toArray(assetDataPlugins), currentAssetPlugin = _assetDataPlugins[0], remainingAssetPlugins = _assetDataPlugins.slice(1);\n          assetPluginFunction = require(currentAssetPlugin);\n          _context4.next = 6;\n          return _regeneratorRuntime.awrap(assetPluginFunction(assetData));\n\n        case 6:\n          resultAssetData = _context4.sent;\n          _context4.next = 9;\n          return _regeneratorRuntime.awrap(applyAssetDataPlugins(remainingAssetPlugins, resultAssetData));\n\n        case 9:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getAssetFiles(assetPath) {\n  var platform,\n      assetData,\n      _args5 = arguments;\n  return _regeneratorRuntime.async(function getAssetFiles$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          platform = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : null;\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(getAbsoluteAssetRecord(assetPath, platform));\n\n        case 3:\n          assetData = _context5.sent;\n          return _context5.abrupt(\"return\", assetData.files);\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getAsset(relativePath, projectRoot, watchFolders) {\n  var platform,\n      assetExts,\n      assetData,\n      absolutePath,\n      record,\n      i,\n      _args6 = arguments;\n  return _regeneratorRuntime.async(function getAsset$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          platform = _args6.length > 3 && _args6[3] !== undefined ? _args6[3] : null;\n          assetExts = _args6.length > 4 ? _args6[4] : undefined;\n          assetData = AssetPaths.parse(relativePath, new Set(platform != null ? [platform] : []));\n          absolutePath = path.resolve(projectRoot, relativePath);\n\n          if (assetExts.includes(assetData.type)) {\n            _context6.next = 6;\n            break;\n          }\n\n          throw new Error(\"'\" + relativePath + \"' cannot be loaded as its extension is not registered in assetExts\");\n\n        case 6:\n          if (pathBelongsToRoots(absolutePath, [projectRoot].concat(_toConsumableArray(watchFolders)))) {\n            _context6.next = 8;\n            break;\n          }\n\n          throw new Error(\"'\" + relativePath + \"' could not be found, because it cannot be found in the project root or any watch folder\");\n\n        case 8:\n          _context6.next = 10;\n          return _regeneratorRuntime.awrap(getAbsoluteAssetRecord(absolutePath, platform));\n\n        case 10:\n          record = _context6.sent;\n          i = 0;\n\n        case 12:\n          if (!(i < record.scales.length)) {\n            _context6.next = 18;\n            break;\n          }\n\n          if (!(record.scales[i] >= assetData.resolution)) {\n            _context6.next = 15;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", readFile(record.files[i]));\n\n        case 15:\n          i++;\n          _context6.next = 12;\n          break;\n\n        case 18:\n          return _context6.abrupt(\"return\", readFile(record.files[record.files.length - 1]));\n\n        case 19:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction pathBelongsToRoots(pathToCheck, roots) {\n  for (var _iterator = _createForOfIteratorHelperLoose(roots), _step; !(_step = _iterator()).done;) {\n    var rootFolder = _step.value;\n\n    if (pathToCheck.startsWith(path.resolve(rootFolder))) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nmodule.exports = {\n  getAsset: getAsset,\n  getAssetData: getAssetData,\n  getAssetFiles: getAssetFiles\n};","map":{"version":3,"names":["require","isAssetTypeAnImage","AssetPaths","crypto","denodeify","fs","imageSize","path","readDir","readdir","readFile","hashFiles","hashFilesCb","files","hash","callback","length","file","shift","err","data","update","buildAssetMap","dir","platform","platforms","Set","assets","map","tryParse","Map","forEach","asset","i","assetKey","getAssetKey","assetName","record","get","scales","set","insertIndex","resolution","splice","join","getAbsoluteAssetRecord","assetPath","filename","basename","dirname","assetData","parse","Error","getAbsoluteAssetInfo","nameData","name","type","hasher","createHash","Array","from","digest","getAssetData","localPath","assetDataPlugins","publicPath","assetUrlPath","startsWith","replace","sep","isImage","extname","slice","assetInfo","isImageInput","includes","readFileSync","dimensions","scale","__packager_asset","fileSystemLocation","httpServerLocation","width","undefined","height","applyAssetDataPlugins","currentAssetPlugin","remainingAssetPlugins","assetPluginFunction","resultAssetData","getAssetFiles","getAsset","relativePath","projectRoot","watchFolders","assetExts","absolutePath","resolve","pathBelongsToRoots","pathToCheck","roots","rootFolder","module","exports"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/metro/src/Assets.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\"use strict\";\n\nconst { isAssetTypeAnImage } = require(\"./Bundler/util\");\n\nconst AssetPaths = require(\"./node-haste/lib/AssetPaths\");\n\nconst crypto = require(\"crypto\");\n\nconst denodeify = require(\"denodeify\");\n\nconst fs = require(\"fs\");\n\nconst imageSize = require(\"image-size\");\n\nconst path = require(\"path\");\n\nconst readDir = denodeify(fs.readdir);\nconst readFile = denodeify(fs.readFile);\nconst hashFiles = denodeify(function hashFilesCb(files, hash, callback) {\n  if (!files.length) {\n    callback(null);\n    return;\n  }\n\n  const file = files.shift();\n  fs.readFile(file, (err, data) => {\n    if (err) {\n      callback(err);\n      return;\n    } else {\n      hash.update(data);\n      hashFilesCb(files, hash, callback);\n    }\n  });\n});\n\nfunction buildAssetMap(dir, files, platform) {\n  const platforms = new Set(platform != null ? [platform] : []);\n  const assets = files.map((file) => AssetPaths.tryParse(file, platforms));\n  const map = new Map();\n  assets.forEach(function (asset, i) {\n    if (asset == null) {\n      return;\n    }\n\n    const file = files[i];\n    const assetKey = getAssetKey(asset.assetName, asset.platform);\n    let record = map.get(assetKey);\n\n    if (!record) {\n      record = {\n        scales: [],\n        files: [],\n      };\n      map.set(assetKey, record);\n    }\n\n    let insertIndex;\n    const length = record.scales.length;\n\n    for (insertIndex = 0; insertIndex < length; insertIndex++) {\n      if (asset.resolution < record.scales[insertIndex]) {\n        break;\n      }\n    }\n\n    record.scales.splice(insertIndex, 0, asset.resolution);\n    record.files.splice(insertIndex, 0, path.join(dir, file));\n  });\n  return map;\n}\n\nfunction getAssetKey(assetName, platform) {\n  if (platform != null) {\n    return `${assetName} : ${platform}`;\n  } else {\n    return assetName;\n  }\n}\n\nasync function getAbsoluteAssetRecord(assetPath, platform = null) {\n  const filename = path.basename(assetPath);\n  const dir = path.dirname(assetPath);\n  const files = await readDir(dir);\n  const assetData = AssetPaths.parse(\n    filename,\n    new Set(platform != null ? [platform] : [])\n  );\n  const map = buildAssetMap(dir, files, platform);\n  let record;\n\n  if (platform != null) {\n    record =\n      map.get(getAssetKey(assetData.assetName, platform)) ||\n      map.get(assetData.assetName);\n  } else {\n    record = map.get(assetData.assetName);\n  }\n\n  if (!record) {\n    throw new Error(\n      /* $FlowFixMe: platform can be null */\n      `Asset not found: ${assetPath} for platform: ${platform}`\n    );\n  }\n\n  return record;\n}\n\nasync function getAbsoluteAssetInfo(assetPath, platform = null) {\n  const nameData = AssetPaths.parse(\n    assetPath,\n    new Set(platform != null ? [platform] : [])\n  );\n  const { name, type } = nameData;\n  const { scales, files } = await getAbsoluteAssetRecord(assetPath, platform);\n  const hasher = crypto.createHash(\"md5\");\n\n  if (files.length > 0) {\n    await hashFiles(Array.from(files), hasher);\n  }\n\n  return {\n    files,\n    hash: hasher.digest(\"hex\"),\n    name,\n    scales,\n    type,\n  };\n}\n\nasync function getAssetData(\n  assetPath,\n  localPath,\n  assetDataPlugins,\n  platform = null,\n  publicPath\n) {\n  // If the path of the asset is outside of the projectRoot, we don't want to\n  // use `path.join` since this will generate an incorrect URL path. In that\n  // case we just concatenate the publicPath with the relative path.\n  let assetUrlPath = localPath.startsWith(\"..\")\n    ? publicPath.replace(/\\/$/, \"\") + \"/\" + path.dirname(localPath)\n    : path.join(publicPath, path.dirname(localPath)); // On Windows, change backslashes to slashes to get proper URL path from file path.\n\n  if (path.sep === \"\\\\\") {\n    assetUrlPath = assetUrlPath.replace(/\\\\/g, \"/\");\n  }\n\n  const isImage = isAssetTypeAnImage(path.extname(assetPath).slice(1));\n  const assetInfo = await getAbsoluteAssetInfo(assetPath, platform);\n  const isImageInput = assetInfo.files[0].includes(\".zip/\")\n    ? fs.readFileSync(assetInfo.files[0])\n    : assetInfo.files[0];\n  const dimensions = isImage ? imageSize(isImageInput) : null;\n  const scale = assetInfo.scales[0];\n  const assetData = {\n    __packager_asset: true,\n    fileSystemLocation: path.dirname(assetPath),\n    httpServerLocation: assetUrlPath,\n    width: dimensions ? dimensions.width / scale : undefined,\n    height: dimensions ? dimensions.height / scale : undefined,\n    scales: assetInfo.scales,\n    files: assetInfo.files,\n    hash: assetInfo.hash,\n    name: assetInfo.name,\n    type: assetInfo.type,\n  };\n  return await applyAssetDataPlugins(assetDataPlugins, assetData);\n}\n\nasync function applyAssetDataPlugins(assetDataPlugins, assetData) {\n  if (!assetDataPlugins.length) {\n    return assetData;\n  }\n\n  const [currentAssetPlugin, ...remainingAssetPlugins] = assetDataPlugins; // $FlowFixMe: impossible to type a dynamic require.\n\n  const assetPluginFunction = require(currentAssetPlugin);\n\n  const resultAssetData = await assetPluginFunction(assetData);\n  return await applyAssetDataPlugins(remainingAssetPlugins, resultAssetData);\n}\n/**\n * Returns all the associated files (for different resolutions) of an asset.\n **/\n\nasync function getAssetFiles(assetPath, platform = null) {\n  const assetData = await getAbsoluteAssetRecord(assetPath, platform);\n  return assetData.files;\n}\n/**\n * Return a buffer with the actual image given a request for an image by path.\n * The relativePath can contain a resolution postfix, in this case we need to\n * find that image (or the closest one to it's resolution) in one of the\n * project roots:\n *\n * 1. We first parse the directory of the asset\n * 2. We then build a map of all assets and their scales in this directory\n * 3. Then try to pick platform-specific asset records\n * 4. Then pick the closest resolution (rounding up) to the requested one\n */\n\nasync function getAsset(\n  relativePath,\n  projectRoot,\n  watchFolders,\n  platform = null,\n  assetExts\n) {\n  const assetData = AssetPaths.parse(\n    relativePath,\n    new Set(platform != null ? [platform] : [])\n  );\n  const absolutePath = path.resolve(projectRoot, relativePath);\n\n  if (!assetExts.includes(assetData.type)) {\n    throw new Error(\n      `'${relativePath}' cannot be loaded as its extension is not registered in assetExts`\n    );\n  }\n\n  if (!pathBelongsToRoots(absolutePath, [projectRoot, ...watchFolders])) {\n    throw new Error(\n      `'${relativePath}' could not be found, because it cannot be found in the project root or any watch folder`\n    );\n  }\n\n  const record = await getAbsoluteAssetRecord(absolutePath, platform);\n\n  for (let i = 0; i < record.scales.length; i++) {\n    if (record.scales[i] >= assetData.resolution) {\n      return readFile(record.files[i]);\n    }\n  }\n\n  return readFile(record.files[record.files.length - 1]);\n}\n\nfunction pathBelongsToRoots(pathToCheck, roots) {\n  for (const rootFolder of roots) {\n    if (pathToCheck.startsWith(path.resolve(rootFolder))) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nmodule.exports = {\n  getAsset,\n  getAssetData,\n  getAssetFiles,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}