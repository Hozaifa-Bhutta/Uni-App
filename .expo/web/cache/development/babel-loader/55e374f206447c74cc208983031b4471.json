{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _wrapNativeSuper = require(\"@babel/runtime/helpers/wrapNativeSuper\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar FailedToResolveNameError = function (_Error) {\n  _inherits(FailedToResolveNameError, _Error);\n\n  var _super = _createSuper(FailedToResolveNameError);\n\n  function FailedToResolveNameError(dirPaths, extraPaths) {\n    var _this;\n\n    _classCallCheck(this, FailedToResolveNameError);\n\n    var displayDirPaths = dirPaths.concat(extraPaths);\n    var hint = displayDirPaths.length ? \" or in these directories:\" : \"\";\n    _this = _super.call(this, \"Module does not exist in the Haste module map\" + hint + \"\\n\" + displayDirPaths.map(function (dirPath) {\n      return \"  \" + dirPath;\n    }).join(\"\\n\") + \"\\n\");\n    _this.dirPaths = dirPaths;\n    _this.extraPaths = extraPaths;\n    return _this;\n  }\n\n  return _createClass(FailedToResolveNameError);\n}(_wrapNativeSuper(Error));\n\nmodule.exports = FailedToResolveNameError;","map":{"version":3,"names":["FailedToResolveNameError","dirPaths","extraPaths","displayDirPaths","concat","hint","length","map","dirPath","join","Error","module","exports"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/metro-resolver/src/FailedToResolveNameError.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\"use strict\";\n\nclass FailedToResolveNameError extends Error {\n  constructor(dirPaths, extraPaths) {\n    const displayDirPaths = dirPaths.concat(extraPaths);\n    const hint = displayDirPaths.length ? \" or in these directories:\" : \"\";\n    super(\n      `Module does not exist in the Haste module map${hint}\\n` +\n        displayDirPaths.map((dirPath) => `  ${dirPath}`).join(\"\\n\") +\n        \"\\n\"\n    );\n    this.dirPaths = dirPaths;\n    this.extraPaths = extraPaths;\n  }\n}\n\nmodule.exports = FailedToResolveNameError;\n"],"mappings":"AASA;;;;;;;;;;;;;;;;;;IAEMA,wB;;;;;EACJ,kCAAYC,QAAZ,EAAsBC,UAAtB,EAAkC;IAAA;;IAAA;;IAChC,IAAMC,eAAe,GAAGF,QAAQ,CAACG,MAAT,CAAgBF,UAAhB,CAAxB;IACA,IAAMG,IAAI,GAAGF,eAAe,CAACG,MAAhB,GAAyB,2BAAzB,GAAuD,EAApE;IACA,0BACE,kDAAgDD,IAAhD,UACEF,eAAe,CAACI,GAAhB,CAAoB,UAACC,OAAD;MAAA,cAAkBA,OAAlB;IAAA,CAApB,EAAiDC,IAAjD,CAAsD,IAAtD,CADF,GAEE,IAHJ;IAKA,MAAKR,QAAL,GAAgBA,QAAhB;IACA,MAAKC,UAAL,GAAkBA,UAAlB;IATgC;EAUjC;;;mBAXoCQ,K;;AAcvCC,MAAM,CAACC,OAAP,GAAiBZ,wBAAjB"},"metadata":{},"sourceType":"script"}