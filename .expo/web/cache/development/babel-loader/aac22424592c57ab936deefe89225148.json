{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = groupFilesByType;\n\nfunction _lodash() {\n  var data = require(\"lodash\");\n\n  _lodash = function _lodash() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _mime() {\n  var data = _interopRequireDefault(require(\"mime\"));\n\n  _mime = function _mime() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction groupFilesByType(assets) {\n  return (0, _lodash().groupBy)(assets, function (type) {\n    return (_mime().default.getType(type) || '').split('/')[0];\n  });\n}","map":{"version":3,"sources":["../src/groupFilesByType.ts"],"names":["type","mime"],"mappings":";;;;;;;AAQA,SAAA,OAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;EAAA,OAAA,GAAA,mBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,SAAA,KAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;EAAA,KAAA,GAAA,iBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;;;;;;;AAae,SAAA,gBAAA,CAAA,MAAA,EAAiD;EAC9D,OAAO,CAAA,GAAA,OAAA,GAAA,OAAA,EAAA,MAAA,EAAiBA,UAAAA,IAAD;IAAA,OAAU,CAACC,KAAAA,GAAAA,OAAAA,CAAAA,OAAAA,CAAAA,IAAAA,KAAD,EAAA,EAAA,KAAA,CAAA,GAAA,EAAjC,CAAiC,CAAV;EAAA,CAAhB,CAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport {groupBy} from 'lodash';\nimport mime from 'mime';\n\n/**\n * Given an array of files, it groups it by it's type.\n * Type of the file is inferred from it's mimetype based on the extension\n * file ends up with. The returned value is an object with properties that\n * correspond to the first part of the mimetype, e.g. images will be grouped\n * under `image` key since the mimetype for them is `image/jpg` etc.\n *\n * Example:\n * Given an array ['fonts/a.ttf', 'images/b.jpg'],\n * the returned object will be: {font: ['fonts/a.ttf'], image: ['images/b.jpg']}\n */\nexport default function groupFilesByType(assets: Array<string>) {\n  return groupBy(assets, (type) => (mime.getType(type) || '').split('/')[0]);\n}\n"]},"metadata":{},"sourceType":"script"}