{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar DeltaCalculator = require(\"./DeltaBundler/DeltaCalculator\");\n\nvar DeltaBundler = function () {\n  function DeltaBundler(bundler) {\n    _classCallCheck(this, DeltaBundler);\n\n    this._deltaCalculators = new Map();\n    this._bundler = bundler;\n  }\n\n  _createClass(DeltaBundler, [{\n    key: \"end\",\n    value: function end() {\n      this._deltaCalculators.forEach(function (deltaCalculator) {\n        return deltaCalculator.end();\n      });\n\n      this._deltaCalculators = new Map();\n    }\n  }, {\n    key: \"getDependencies\",\n    value: function getDependencies(entryPoints, options) {\n      var depGraph, deltaCalculator, graph;\n      return _regeneratorRuntime.async(function getDependencies$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this._bundler.getDependencyGraph());\n\n            case 2:\n              depGraph = _context.sent;\n              deltaCalculator = new DeltaCalculator(entryPoints, depGraph, options);\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(deltaCalculator.getDelta({\n                reset: true,\n                shallow: options.shallow\n              }));\n\n            case 6:\n              graph = deltaCalculator.getGraph();\n              deltaCalculator.end();\n              return _context.abrupt(\"return\", graph.dependencies);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"buildGraph\",\n    value: function buildGraph(entryPoints, options) {\n      var depGraph, deltaCalculator, graph;\n      return _regeneratorRuntime.async(function buildGraph$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this._bundler.getDependencyGraph());\n\n            case 2:\n              depGraph = _context2.sent;\n              deltaCalculator = new DeltaCalculator(entryPoints, depGraph, options);\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(deltaCalculator.getDelta({\n                reset: true,\n                shallow: options.shallow\n              }));\n\n            case 6:\n              graph = deltaCalculator.getGraph();\n\n              this._deltaCalculators.set(graph, deltaCalculator);\n\n              return _context2.abrupt(\"return\", graph);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getDelta\",\n    value: function getDelta(graph, _ref) {\n      var reset, shallow, deltaCalculator;\n      return _regeneratorRuntime.async(function getDelta$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              reset = _ref.reset, shallow = _ref.shallow;\n              deltaCalculator = this._deltaCalculators.get(graph);\n\n              if (deltaCalculator) {\n                _context3.next = 4;\n                break;\n              }\n\n              throw new Error(\"Graph not found\");\n\n            case 4:\n              _context3.next = 6;\n              return _regeneratorRuntime.awrap(deltaCalculator.getDelta({\n                reset: reset,\n                shallow: shallow\n              }));\n\n            case 6:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"listen\",\n    value: function listen(graph, callback) {\n      var deltaCalculator = this._deltaCalculators.get(graph);\n\n      if (!deltaCalculator) {\n        throw new Error(\"Graph not found\");\n      }\n\n      deltaCalculator.on(\"change\", callback);\n      return function () {\n        deltaCalculator.removeListener(\"change\", callback);\n      };\n    }\n  }, {\n    key: \"endGraph\",\n    value: function endGraph(graph) {\n      var deltaCalculator = this._deltaCalculators.get(graph);\n\n      if (!deltaCalculator) {\n        throw new Error(\"Graph not found\");\n      }\n\n      deltaCalculator.end();\n\n      this._deltaCalculators.delete(graph);\n    }\n  }]);\n\n  return DeltaBundler;\n}();\n\nmodule.exports = DeltaBundler;","map":{"version":3,"names":["DeltaCalculator","require","DeltaBundler","bundler","_deltaCalculators","Map","_bundler","forEach","deltaCalculator","end","entryPoints","options","getDependencyGraph","depGraph","getDelta","reset","shallow","graph","getGraph","dependencies","set","get","Error","callback","on","removeListener","delete","module","exports"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/metro/src/DeltaBundler.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\"use strict\";\n\nconst DeltaCalculator = require(\"./DeltaBundler/DeltaCalculator\");\n\n/**\n * `DeltaBundler` uses the `DeltaTransformer` to build bundle deltas. This\n * module handles all the transformer instances so it can support multiple\n * concurrent clients requesting their own deltas. This is done through the\n * `clientId` param (which maps a client to a specific delta transformer).\n */\nclass DeltaBundler {\n  _deltaCalculators = new Map();\n\n  constructor(bundler) {\n    this._bundler = bundler;\n  }\n\n  end() {\n    this._deltaCalculators.forEach((deltaCalculator) => deltaCalculator.end());\n\n    this._deltaCalculators = new Map();\n  }\n\n  async getDependencies(entryPoints, options) {\n    const depGraph = await this._bundler.getDependencyGraph();\n    const deltaCalculator = new DeltaCalculator(entryPoints, depGraph, options);\n    await deltaCalculator.getDelta({\n      reset: true,\n      shallow: options.shallow,\n    });\n    const graph = deltaCalculator.getGraph();\n    deltaCalculator.end();\n    return graph.dependencies;\n  } // Note: the graph returned by this function needs to be ended when finished\n  // so that we don't leak graphs that are not reachable.\n  // To get just the dependencies, use getDependencies which will not leak graphs.\n\n  async buildGraph(entryPoints, options) {\n    const depGraph = await this._bundler.getDependencyGraph();\n    const deltaCalculator = new DeltaCalculator(entryPoints, depGraph, options);\n    await deltaCalculator.getDelta({\n      reset: true,\n      shallow: options.shallow,\n    });\n    const graph = deltaCalculator.getGraph();\n\n    this._deltaCalculators.set(graph, deltaCalculator);\n\n    return graph;\n  }\n\n  async getDelta(graph, { reset, shallow }) {\n    const deltaCalculator = this._deltaCalculators.get(graph);\n\n    if (!deltaCalculator) {\n      throw new Error(\"Graph not found\");\n    }\n\n    return await deltaCalculator.getDelta({\n      reset,\n      shallow,\n    });\n  }\n\n  listen(graph, callback) {\n    const deltaCalculator = this._deltaCalculators.get(graph);\n\n    if (!deltaCalculator) {\n      throw new Error(\"Graph not found\");\n    }\n\n    deltaCalculator.on(\"change\", callback);\n    return () => {\n      deltaCalculator.removeListener(\"change\", callback);\n    };\n  }\n\n  endGraph(graph) {\n    const deltaCalculator = this._deltaCalculators.get(graph);\n\n    if (!deltaCalculator) {\n      throw new Error(\"Graph not found\");\n    }\n\n    deltaCalculator.end();\n\n    this._deltaCalculators.delete(graph);\n  }\n}\n\nmodule.exports = DeltaBundler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}