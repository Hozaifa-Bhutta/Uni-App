{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAndroidProject = getAndroidProject;\nexports.getPackageName = getPackageName;\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getAndroidProject(config) {\n  var androidProject = config.project.android;\n\n  if (!androidProject) {\n    throw new (_cliTools().CLIError)(\"\\n      Android project not found. Are you sure this is a React Native project?\\n      If your Android files are located in a non-standard location (e.g. not inside 'android' folder), consider setting\\n      `project.android.sourceDir` option to point to a new location.\\n    \");\n  }\n\n  return androidProject;\n}\n\nfunction getPackageName(manifestPath) {\n  var androidManifest = _fs().default.readFileSync(manifestPath, 'utf8');\n\n  var packageNameMatchArray = androidManifest.match(/package=\"(.+?)\"/);\n\n  if (!packageNameMatchArray || packageNameMatchArray.length === 0) {\n    throw new (_cliTools().CLIError)(\"Failed to build the app: No package name found. Found errors in \" + _chalk().default.underline.dim(\"\" + manifestPath));\n  }\n\n  var packageName = packageNameMatchArray[1];\n\n  if (!validatePackageName(packageName)) {\n    _cliTools().logger.warn(\"Invalid application's package name \\\"\" + _chalk().default.bgRed(packageName) + \"\\\" in 'AndroidManifest.xml'. Read guidelines for setting the package name here: \" + _chalk().default.underline.dim('https://developer.android.com/studio/build/application-id'));\n  }\n\n  return packageName;\n}\n\nfunction validatePackageName(packageName) {\n  return /^[a-z][a-z0-9_]*(\\.[a-z][a-z0-9_]*)+$/.test(packageName);\n}","map":{"version":3,"sources":["../../src/config/getAndroidProject.ts"],"names":["androidProject","config","CLIError","androidManifest","fs","packageNameMatchArray","chalk","packageName","validatePackageName","logger"],"mappings":";;;;;;;;AACA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,SAAA,GAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;;EAAA,GAAA,GAAA,eAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,SAAA,MAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;EAAA,MAAA,GAAA,kBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;;;;;;;AAEO,SAAA,iBAAA,CAAA,MAAA,EAA2C;EAChD,IAAMA,cAAc,GAAGC,MAAM,CAANA,OAAAA,CAAvB,OAAA;;EAEA,IAAI,CAAJ,cAAA,EAAqB;IACnB,MAAM,KAAIC,SAAAA,GAAJ,QAAA,yRAAN;EAKD;;EACD,OAAA,cAAA;AACD;;AAMM,SAAA,cAAA,CAAA,YAAA,EAA8C;EACnD,IAAMC,eAAe,GAAGC,GAAAA,GAAAA,OAAAA,CAAAA,YAAAA,CAAAA,YAAAA,EAAxB,MAAwBA,CAAxB;;EAEA,IAAIC,qBAAqB,GAAGF,eAAe,CAAfA,KAAAA,CAA5B,iBAA4BA,CAA5B;;EACA,IAAI,CAAA,qBAAA,IAA0BE,qBAAqB,CAArBA,MAAAA,KAA9B,CAAA,EAAkE;IAChE,MAAM,KAAIH,SAAAA,GAAJ,QAAA,uEAC+DI,MAAAA,GAAAA,OAAAA,CAAAA,SAAAA,CAAAA,GAAAA,MADrE,YACqEA,CAD/D,CAAN;EAKD;;EAED,IAAIC,WAAW,GAAGF,qBAAqB,CAAvC,CAAuC,CAAvC;;EAEA,IAAI,CAACG,mBAAmB,CAAxB,WAAwB,CAAxB,EAAuC;IACrCC,SAAAA,GAAAA,MAAAA,CAAAA,IAAAA,2CACyCH,MAAAA,GAAAA,OAAAA,CAAAA,KAAAA,CAAAA,WAAAA,CADzCG,wFAGqFH,MAAAA,GAAAA,OAAAA,CAAAA,SAAAA,CAAAA,GAAAA,CAHrFG,2DAGqFH,CAHrFG;EAOD;;EACD,OAAA,WAAA;AAGF;;AACA,SAAA,mBAAA,CAAA,WAAA,EAAkD;EAChD,OAAO,wCAAA,IAAA,CAAP,WAAO,CAAP;AACD","sourcesContent":["import {Config} from '@react-native-community/cli-types';\nimport {logger, CLIError} from '@react-native-community/cli-tools';\nimport fs from 'fs';\nimport chalk from 'chalk';\n\nexport function getAndroidProject(config: Config) {\n  const androidProject = config.project.android;\n\n  if (!androidProject) {\n    throw new CLIError(`\n      Android project not found. Are you sure this is a React Native project?\n      If your Android files are located in a non-standard location (e.g. not inside 'android' folder), consider setting\n      \\`project.android.sourceDir\\` option to point to a new location.\n    `);\n  }\n  return androidProject;\n}\n\n/**\n * Get the package name of the running React Native app\n * @param config\n */\nexport function getPackageName(manifestPath: string) {\n  const androidManifest = fs.readFileSync(manifestPath, 'utf8');\n\n  let packageNameMatchArray = androidManifest.match(/package=\"(.+?)\"/);\n  if (!packageNameMatchArray || packageNameMatchArray.length === 0) {\n    throw new CLIError(\n      `Failed to build the app: No package name found. Found errors in ${chalk.underline.dim(\n        `${manifestPath}`,\n      )}`,\n    );\n  }\n\n  let packageName = packageNameMatchArray[1];\n\n  if (!validatePackageName(packageName)) {\n    logger.warn(\n      `Invalid application's package name \"${chalk.bgRed(\n        packageName,\n      )}\" in 'AndroidManifest.xml'. Read guidelines for setting the package name here: ${chalk.underline.dim(\n        'https://developer.android.com/studio/build/application-id',\n      )}`,\n    );\n  }\n  return packageName;\n}\n\n// Validates that the package name is correct\nfunction validatePackageName(packageName: string) {\n  return /^[a-z][a-z0-9_]*(\\.[a-z][a-z0-9_]*)+$/.test(packageName);\n}\n"]},"metadata":{},"sourceType":"script"}