{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHealthchecks = exports.HEALTHCHECK_TYPES = void 0;\n\nvar _nodeJS = _interopRequireDefault(require(\"./nodeJS\"));\n\nvar _packageManagers = require(\"./packageManagers\");\n\nvar _jdk = _interopRequireDefault(require(\"./jdk\"));\n\nvar _watchman = _interopRequireDefault(require(\"./watchman\"));\n\nvar _androidHomeEnvVariable = _interopRequireDefault(require(\"./androidHomeEnvVariable\"));\n\nvar _androidStudio = _interopRequireDefault(require(\"./androidStudio\"));\n\nvar _androidSDK = _interopRequireDefault(require(\"./androidSDK\"));\n\nvar _androidNDK = _interopRequireDefault(require(\"./androidNDK\"));\n\nvar _xcode = _interopRequireDefault(require(\"./xcode\"));\n\nvar _cocoaPods = _interopRequireDefault(require(\"./cocoaPods\"));\n\nvar _iosDeploy = _interopRequireDefault(require(\"./iosDeploy\"));\n\nfunction _cliConfig() {\n  var data = _interopRequireDefault(require(\"@react-native-community/cli-config\"));\n\n  _cliConfig = function _cliConfig() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _xcodeEnv = _interopRequireDefault(require(\"./xcodeEnv\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar HEALTHCHECK_TYPES = {\n  ERROR: 'ERROR',\n  WARNING: 'WARNING'\n};\nexports.HEALTHCHECK_TYPES = HEALTHCHECK_TYPES;\n\nvar getHealthchecks = function getHealthchecks(_ref) {\n  var contributor = _ref.contributor;\n  var additionalChecks = [];\n\n  try {\n    var config = (0, _cliConfig().default)();\n    additionalChecks = config.healthChecks;\n  } catch (_unused) {}\n\n  return _objectSpread(_objectSpread({\n    common: {\n      label: 'Common',\n      healthchecks: [_nodeJS.default, _packageManagers.yarn, _packageManagers.npm].concat(_toConsumableArray(process.platform === 'darwin' ? [_watchman.default] : []))\n    },\n    android: {\n      label: 'Android',\n      healthchecks: [_jdk.default, _androidStudio.default, _androidSDK.default, _androidHomeEnvVariable.default].concat(_toConsumableArray(contributor ? [_androidNDK.default] : []))\n    }\n  }, process.platform === 'darwin' ? {\n    ios: {\n      label: 'iOS',\n      healthchecks: [_xcode.default, _cocoaPods.default, _iosDeploy.default, _xcodeEnv.default]\n    }\n  } : {}), additionalChecks);\n};\n\nexports.getHealthchecks = getHealthchecks;","map":{"version":3,"sources":["../../../src/tools/healthchecks/index.ts"],"names":["HEALTHCHECK_TYPES","ERROR","WARNING","getHealthchecks","contributor","additionalChecks","config","common","label","healthchecks","nodeJS","yarn","npm","process","watchman","android","jdk","androidStudio","androidSDK","androidHomeEnvVariable","androidNDK","ios","xcode","cocoaPods","iosDeploy","xcodeEnv"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,YAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,qBAAA;;AACA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,SAAA,CAAA;;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,cAAA,CAAA;;AACA,IAAA,uBAAA,GAAA,sBAAA,CAAA,OAAA,4BAAA,CAAA;;AACA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,mBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,gBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,gBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,WAAA,CAAA;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,eAAA,CAAA;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,eAAA,CAAA;;AAEA,SAAA,UAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,oCAAA,CAAA,CAAA;;EAAA,UAAA,GAAA,sBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,cAAA,CAAA;;;;;;;;AAEO,IAAMA,iBAAiB,GAAG;EAC/BC,KAAK,EAD0B,OAAA;EAE/BC,OAAO,EAAE;AAFsB,CAA1B;;;AAUA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAA0C;EAAA,IAAxCC,WAAwC,QAAxCA,WAAwC;EACvE,IAAIC,gBAAuC,GAD4B,EACvE;;EAGA,IAAI;IACF,IAAIC,MAAM,GAAG,CAAA,GAAA,UAAA,GAAb,OAAa,GAAb;IACAD,gBAAgB,GAAGC,MAAM,CAAzBD,YAAAA;EAFF,CAAA,CAGE,gBAAM,CAAE;;EAEV;IACEE,MAAM,EAAE;MACNC,KAAK,EADC,QAAA;MAENC,YAAY,GACVC,OAAAA,CADY,OAAF,EAEVC,gBAAAA,CAFY,IAAF,EAGVC,gBAAAA,CAHY,GAAF,4BAINC,OAAO,CAAPA,QAAAA,KAAAA,QAAAA,GAAgC,CAACC,SAAAA,CAAjCD,OAAgC,CAAhCA,GAJQ,EAAF;IAFN,CADV;IAUEE,OAAO,EAAE;MACPP,KAAK,EADE,SAAA;MAEPC,YAAY,GACVO,IAAAA,CADY,OAAF,EAEVC,cAAAA,CAFY,OAAF,EAGVC,WAAAA,CAHY,OAAF,EAIVC,uBAAAA,CAJY,OAAF,4BAKNf,WAAW,GAAG,CAACgB,WAAAA,CAAJ,OAAG,CAAH,GALH,EAAF;IAFL;EAVX,GAoBM,OAAO,CAAP,QAAA,KAAA,QAAA,GACA;IACEC,GAAG,EAAE;MACHb,KAAK,EADF,KAAA;MAEHC,YAAY,EAAE,CAACa,MAAAA,CAAD,OAAA,EAAQC,UAAAA,CAAR,OAAA,EAAmBC,UAAAA,CAAnB,OAAA,EAA8BC,SAAAA,CAA9B,OAAA;IAFX;EADP,CADA,GApBC,EAAP,GA4BKpB,gBA5BL;AATK,CAAA","sourcesContent":["import nodeJS from './nodeJS';\nimport {yarn, npm} from './packageManagers';\nimport jdk from './jdk';\nimport watchman from './watchman';\nimport androidHomeEnvVariable from './androidHomeEnvVariable';\nimport androidStudio from './androidStudio';\nimport androidSDK from './androidSDK';\nimport androidNDK from './androidNDK';\nimport xcode from './xcode';\nimport cocoaPods from './cocoaPods';\nimport iosDeploy from './iosDeploy';\nimport {Healthchecks, HealthCheckCategory} from '../../types';\nimport loadConfig from '@react-native-community/cli-config';\nimport xcodeEnv from './xcodeEnv';\n\nexport const HEALTHCHECK_TYPES = {\n  ERROR: 'ERROR',\n  WARNING: 'WARNING',\n};\n\ntype Options = {\n  fix: boolean | void;\n  contributor: boolean | void;\n};\n\nexport const getHealthchecks = ({contributor}: Options): Healthchecks => {\n  let additionalChecks: HealthCheckCategory[] = [];\n\n  // Doctor can run in a detached mode, where there isn't a config so this can fail\n  try {\n    let config = loadConfig();\n    additionalChecks = config.healthChecks;\n  } catch {}\n\n  return {\n    common: {\n      label: 'Common',\n      healthchecks: [\n        nodeJS,\n        yarn,\n        npm,\n        ...(process.platform === 'darwin' ? [watchman] : []),\n      ],\n    },\n    android: {\n      label: 'Android',\n      healthchecks: [\n        jdk,\n        androidStudio,\n        androidSDK,\n        androidHomeEnvVariable,\n        ...(contributor ? [androidNDK] : []),\n      ],\n    },\n    ...(process.platform === 'darwin'\n      ? {\n          ios: {\n            label: 'iOS',\n            healthchecks: [xcode, cocoaPods, iosDeploy, xcodeEnv],\n          },\n        }\n      : {}),\n    ...additionalChecks,\n  };\n};\n"]},"metadata":{},"sourceType":"script"}