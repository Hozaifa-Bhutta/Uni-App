{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _process() {\n  var data = _interopRequireDefault(require(\"process\"));\n\n  _process = function _process() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction printRunInstructions(projectDir, projectName) {\n  var iosInstructions = '';\n  var desktopInstructions = '';\n\n  if (_process().default.platform === 'darwin') {\n    var iosProjectDir = _path().default.resolve(projectDir, 'ios');\n\n    var iosPodsFile = _path().default.resolve(iosProjectDir, projectName + \".xcworkspace\");\n\n    var isUsingPods = _fs().default.existsSync(iosPodsFile);\n\n    var relativeXcodeProjectPath = _path().default.relative('..', isUsingPods ? iosPodsFile : _path().default.resolve(iosProjectDir, projectName + \".xcodeproj\"));\n\n    iosInstructions = \"\\n  \" + _chalk().default.cyan(\"Run instructions for \" + _chalk().default.bold('iOS')) + \":\\n    \\u2022 cd \\\"\" + projectDir + \"\\\" && npx react-native run-ios\\n    \" + _chalk().default.dim('- or -') + \"\\n    \\u2022 Open \" + relativeXcodeProjectPath + \" in Xcode or run \\\"xed -b ios\\\"\\n    \\u2022 Hit the Run button\\n    \";\n    desktopInstructions = \"\\n  \" + _chalk().default.magenta(\"Run instructions for \" + _chalk().default.bold('macOS')) + \":\\n    \\u2022 See \" + _chalk().default.underline('https://aka.ms/ReactNativeGuideMacOS') + \" for the latest up-to-date instructions.\\n    \";\n  }\n\n  if (_process().default.platform === 'win32') {\n    desktopInstructions = \"\\n  \" + _chalk().default.cyan(\"Run instructions for \" + _chalk().default.bold('Windows')) + \":\\n    \\u2022 See \" + _chalk().default.underline('https://aka.ms/ReactNativeGuideWindows') + \" for the latest up-to-date instructions.\\n    \";\n  }\n\n  var androidInstructions = \"\\n  \" + _chalk().default.green(\"Run instructions for \" + _chalk().default.bold('Android')) + \":\\n    \\u2022 Have an Android emulator running (quickest way to get started), or a device connected.\\n    \\u2022 cd \\\"\" + projectDir + \"\\\" && npx react-native run-android\\n  \";\n\n  _cliTools().logger.log(\"\\n  \" + androidInstructions + iosInstructions + desktopInstructions + \"\\n  \");\n}\n\nvar _default = printRunInstructions;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/init/printRunInstructions.ts"],"names":["iosInstructions","desktopInstructions","process","iosProjectDir","path","iosPodsFile","isUsingPods","fs","relativeXcodeProjectPath","chalk","projectDir","androidInstructions","logger","printRunInstructions"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport path from 'path';\nimport fs from 'fs';\nimport process from 'process';\nimport chalk from 'chalk';\nimport {logger} from '@react-native-community/cli-tools';\n\nfunction printRunInstructions(projectDir: string, projectName: string) {\n  let iosInstructions = '';\n  let desktopInstructions = '';\n\n  if (process.platform === 'darwin') {\n    const iosProjectDir = path.resolve(projectDir, 'ios');\n    const iosPodsFile = path.resolve(\n      iosProjectDir,\n      `${projectName}.xcworkspace`,\n    );\n    const isUsingPods = fs.existsSync(iosPodsFile);\n\n    const relativeXcodeProjectPath = path.relative(\n      '..',\n      isUsingPods\n        ? iosPodsFile\n        : path.resolve(iosProjectDir, `${projectName}.xcodeproj`),\n    );\n\n    iosInstructions = `\n  ${chalk.cyan(`Run instructions for ${chalk.bold('iOS')}`)}:\n    • cd \"${projectDir}\" && npx react-native run-ios\n    ${chalk.dim('- or -')}\n    • Open ${relativeXcodeProjectPath} in Xcode or run \"xed -b ios\"\n    • Hit the Run button\n    `;\n\n    desktopInstructions = `\n  ${chalk.magenta(`Run instructions for ${chalk.bold('macOS')}`)}:\n    • See ${chalk.underline(\n      'https://aka.ms/ReactNativeGuideMacOS',\n    )} for the latest up-to-date instructions.\n    `;\n  }\n\n  if (process.platform === 'win32') {\n    desktopInstructions = `\n  ${chalk.cyan(`Run instructions for ${chalk.bold('Windows')}`)}:\n    • See ${chalk.underline(\n      'https://aka.ms/ReactNativeGuideWindows',\n    )} for the latest up-to-date instructions.\n    `;\n  }\n\n  const androidInstructions = `\n  ${chalk.green(`Run instructions for ${chalk.bold('Android')}`)}:\n    • Have an Android emulator running (quickest way to get started), or a device connected.\n    • cd \"${projectDir}\" && npx react-native run-android\n  `;\n\n  logger.log(`\n  ${androidInstructions}${iosInstructions}${desktopInstructions}\n  `);\n}\n\nexport default printRunInstructions;\n"]},"metadata":{},"sourceType":"script"}