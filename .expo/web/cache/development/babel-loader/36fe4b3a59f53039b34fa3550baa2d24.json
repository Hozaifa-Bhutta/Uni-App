{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reactNativePlatformResolver = reactNativePlatformResolver;\n\nfunction reactNativePlatformResolver(platformImplementations) {\n  return function (context, moduleName, platform) {\n    var modifiedModuleName = moduleName;\n\n    if (platformImplementations[platform]) {\n      if (moduleName === 'react-native') {\n        modifiedModuleName = platformImplementations[platform];\n      } else if (moduleName.startsWith('react-native/')) {\n        modifiedModuleName = platformImplementations[platform] + \"/\" + modifiedModuleName.slice('react-native/'.length);\n      }\n    }\n\n    return context.resolveRequest(context, modifiedModuleName, platform);\n  };\n}","map":{"version":3,"sources":["../../src/tools/metroPlatformResolver.ts"],"names":["modifiedModuleName","platformImplementations","moduleName","context"],"mappings":";;;;;;;AAeO,SAAA,2BAAA,CAAA,uBAAA,EAEJ;EACD,OAAO,UAAA,OAAA,EAAA,UAAA,EAAA,QAAA,EAAwD;IAC7D,IAAIA,kBAAkB,GAAtB,UAAA;;IACA,IAAIC,uBAAuB,CAA3B,QAA2B,CAA3B,EAAuC;MACrC,IAAIC,UAAU,KAAd,cAAA,EAAmC;QACjCF,kBAAkB,GAAGC,uBAAuB,CAA5CD,QAA4C,CAA5CA;MADF,CAAA,MAEO,IAAIE,UAAU,CAAVA,UAAAA,CAAJ,eAAIA,CAAJ,EAA4C;QACjDF,kBAAkB,GAChBC,uBAAuB,CAAA,QAAA,CADP,SAEdD,kBAAkB,CAAlBA,KAAAA,CAAyB,gBAF7BA,MAEIA,CAFJA;MAGD;IACF;;IACD,OAAOG,OAAO,CAAPA,cAAAA,CAAAA,OAAAA,EAAAA,kBAAAA,EAAP,QAAOA,CAAP;EAXF,CAAA;AAaD","sourcesContent":["/**\n * This is an implementation of a metro resolveRequest option which will remap react-native imports\n * to different npm packages based on the platform requested.  This allows a single metro instance/config\n * to produce bundles for multiple out of tree platforms at a time.\n *\n * @param platformImplementations\n * A map of platform to npm package that implements that platform\n *\n * Ex:\n * {\n *    windows: 'react-native-windows'\n *    macos: 'react-native-macos'\n * }\n */\n\nexport function reactNativePlatformResolver(platformImplementations: {\n  [platform: string]: string;\n}) {\n  return (context: any, moduleName: string, platform: string) => {\n    let modifiedModuleName = moduleName;\n    if (platformImplementations[platform]) {\n      if (moduleName === 'react-native') {\n        modifiedModuleName = platformImplementations[platform];\n      } else if (moduleName.startsWith('react-native/')) {\n        modifiedModuleName = `${\n          platformImplementations[platform]\n        }/${modifiedModuleName.slice('react-native/'.length)}`;\n      }\n    }\n    return context.resolveRequest(context, modifiedModuleName, platform);\n  };\n}\n"]},"metadata":{},"sourceType":"script"}