{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _envinfo() {\n  var data = _interopRequireDefault(require(\"envinfo\"));\n\n  _envinfo = function _envinfo() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _os() {\n  var data = require(\"os\");\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getEnvironmentInfo() {\n  var json,\n      options,\n      packages,\n      outOfTreePlatforms,\n      outOfTreePlatformPackage,\n      info,\n      _args = arguments;\n  return _regeneratorRuntime.async(function getEnvironmentInfo$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          json = _args.length > 0 && _args[0] !== undefined ? _args[0] : true;\n          options = {\n            json: json,\n            showNotFound: true\n          };\n          packages = ['react', 'react-native', '@react-native-community/cli'];\n          outOfTreePlatforms = {\n            darwin: 'react-native-macos',\n            win32: 'react-native-windows'\n          };\n          outOfTreePlatformPackage = outOfTreePlatforms[(0, _os().platform)()];\n\n          if (outOfTreePlatformPackage) {\n            packages.push(outOfTreePlatformPackage);\n          }\n\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(_envinfo().default.run({\n            System: ['OS', 'CPU', 'Memory', 'Shell'],\n            Binaries: ['Node', 'Yarn', 'npm', 'Watchman'],\n            IDEs: ['Xcode', 'Android Studio', 'Visual Studio'],\n            Managers: ['CocoaPods'],\n            Languages: ['Java'],\n            SDKs: ['iOS SDK', 'Android SDK', 'Windows SDK'],\n            npmPackages: packages,\n            npmGlobalPackages: ['*react-native*']\n          }, options));\n\n        case 8:\n          info = _context.sent;\n\n          if (!options.json) {\n            _context.next = 11;\n            break;\n          }\n\n          return _context.abrupt(\"return\", JSON.parse(info));\n\n        case 11:\n          return _context.abrupt(\"return\", info.trim());\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar _default = getEnvironmentInfo;\nexports.default = _default;","map":{"version":3,"sources":["../../src/tools/envinfo.ts"],"names":["json","options","showNotFound","packages","outOfTreePlatforms","darwin","win32","outOfTreePlatformPackage","info","System","Binaries","IDEs","Managers","Languages","SDKs","npmPackages","npmGlobalPackages","JSON","getEnvironmentInfo"],"mappings":";;;;;;;;;AACA,SAAA,QAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;;EAAA,QAAA,GAAA,oBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,SAAA,GAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;EAAA,GAAA,GAAA,eAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;;;;;;;AAYA,SAAA,kBAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;IAAA;MAAA;QAAA;UACEA,IADF,2DAAA,IAAA;UAGQC,OAHR,GAGkB;YAACD,IAAD,EAACA,IAAD;YAAOE,YAAY,EAAE;UAArB,CAHlB;UAKMC,QALN,GAKiB,CAAA,OAAA,EAAA,cAAA,EAAf,6BAAe,CALjB;UAOQC,kBAPR,GAOsD;YAClDC,MAAM,EAD4C,oBAAA;YAElDC,KAAK,EAAE;UAF2C,CAPtD;UAYQC,wBAZR,GAYmCH,kBAAkB,CAAC,CAAA,GAAA,GAAA,GAApD,QAAoD,GAAD,CAZrD;;UAaE,IAAA,wBAAA,EAA8B;YAC5BD,QAAQ,CAARA,IAAAA,CAAAA,wBAAAA;UACD;;UAfH;UAAA,iCAiBsB,QAAA,GAAA,OAAA,CAAA,GAAA,CAClB;YACEM,MAAM,EAAE,CAAA,IAAA,EAAA,KAAA,EAAA,QAAA,EADV,OACU,CADV;YAEEC,QAAQ,EAAE,CAAA,MAAA,EAAA,MAAA,EAAA,KAAA,EAFZ,UAEY,CAFZ;YAGEC,IAAI,EAAE,CAAA,OAAA,EAAA,gBAAA,EAHR,eAGQ,CAHR;YAIEC,QAAQ,EAAE,CAJZ,WAIY,CAJZ;YAKEC,SAAS,EAAE,CALb,MAKa,CALb;YAMEC,IAAI,EAAE,CAAA,SAAA,EAAA,aAAA,EANR,aAMQ,CANR;YAOEC,WAAW,EAPb,QAAA;YAQEC,iBAAiB,EAAE,CAAA,gBAAA;UARrB,CADkB,EAApB,OAAoB,CAjBtB;;QAAA;UAiBQR,IAjBR;;UAAA,KA+BMP,OAAO,CAAX,IA/BF;YAAA;YAAA;UAAA;;UAAA,iCAgCWgB,IAAI,CAAJA,KAAAA,CAAP,IAAOA,CAhCX;;QAAA;UAAA,iCAmCST,IAAI,CAAX,IAAOA,EAnCT;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;eAsCeU,kB","sourcesContent":["// @ts-ignore\nimport envinfo from 'envinfo';\nimport {platform} from 'os';\nimport {EnvironmentInfo} from '../types';\n\n/**\n * Returns information about the running system.\n * If `json === true`, or no options are passed,\n * the return type will be an `EnvironmentInfo`.\n * If set to `false`, it will be a `string`.\n */\nasync function getEnvironmentInfo(): Promise<EnvironmentInfo>;\nasync function getEnvironmentInfo(json: true): Promise<EnvironmentInfo>;\nasync function getEnvironmentInfo(json: false): Promise<string>;\nasync function getEnvironmentInfo(\n  json = true,\n): Promise<string | EnvironmentInfo> {\n  const options = {json, showNotFound: true};\n\n  let packages = ['react', 'react-native', '@react-native-community/cli'];\n\n  const outOfTreePlatforms: {[key: string]: string} = {\n    darwin: 'react-native-macos',\n    win32: 'react-native-windows',\n  };\n\n  const outOfTreePlatformPackage = outOfTreePlatforms[platform()];\n  if (outOfTreePlatformPackage) {\n    packages.push(outOfTreePlatformPackage);\n  }\n\n  const info = (await envinfo.run(\n    {\n      System: ['OS', 'CPU', 'Memory', 'Shell'],\n      Binaries: ['Node', 'Yarn', 'npm', 'Watchman'],\n      IDEs: ['Xcode', 'Android Studio', 'Visual Studio'],\n      Managers: ['CocoaPods'],\n      Languages: ['Java'],\n      SDKs: ['iOS SDK', 'Android SDK', 'Windows SDK'],\n      npmPackages: packages,\n      npmGlobalPackages: ['*react-native*'],\n    },\n    options,\n  )) as string;\n\n  if (options.json) {\n    return JSON.parse(info);\n  }\n\n  return info.trim();\n}\n\nexport default getEnvironmentInfo;\n"]},"metadata":{},"sourceType":"script"}