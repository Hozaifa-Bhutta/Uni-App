{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _runServer = _interopRequireDefault(require(\"./runServer\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _default = {\n  name: 'start',\n  func: _runServer.default,\n  description: 'starts the webserver',\n  options: [{\n    name: '--port <number>',\n    parse: Number\n  }, {\n    name: '--host <string>',\n    default: ''\n  }, {\n    name: '--projectRoot <path>',\n    description: 'Path to a custom project root',\n    parse: function parse(val) {\n      return _path().default.resolve(val);\n    }\n  }, {\n    name: '--watchFolders <list>',\n    description: 'Specify any additional folders to be added to the watch list',\n    parse: function parse(val) {\n      return val.split(',').map(function (folder) {\n        return _path().default.resolve(folder);\n      });\n    }\n  }, {\n    name: '--assetPlugins <list>',\n    description: 'Specify any additional asset plugins to be used by the packager by full filepath',\n    parse: function parse(val) {\n      return val.split(',');\n    }\n  }, {\n    name: '--sourceExts <list>',\n    description: 'Specify any additional source extensions to be used by the packager',\n    parse: function parse(val) {\n      return val.split(',');\n    }\n  }, {\n    name: '--max-workers <number>',\n    description: 'Specifies the maximum number of workers the worker-pool ' + 'will spawn for transforming files. This defaults to the number of the ' + 'cores available on your machine.',\n    parse: function parse(workers) {\n      return Number(workers);\n    }\n  }, {\n    name: '--transformer <string>',\n    description: 'Specify a custom transformer to be used'\n  }, {\n    name: '--reset-cache, --resetCache',\n    description: 'Removes cached files'\n  }, {\n    name: '--custom-log-reporter-path, --customLogReporterPath <string>',\n    description: 'Path to a JavaScript file that exports a log reporter as a replacement for TerminalReporter'\n  }, {\n    name: '--https',\n    description: 'Enables https connections to the server'\n  }, {\n    name: '--key <path>',\n    description: 'Path to custom SSL key'\n  }, {\n    name: '--cert <path>',\n    description: 'Path to custom SSL cert'\n  }, {\n    name: '--config <string>',\n    description: 'Path to the CLI configuration file',\n    parse: function parse(val) {\n      return _path().default.resolve(val);\n    }\n  }, {\n    name: '--no-interactive',\n    description: 'Disables interactive mode'\n  }]\n};\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/start/index.ts"],"names":["name","func","runServer","description","options","parse","Number","default","val","path","folder","workers"],"mappings":";;;;;;;AAQA,SAAA,KAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;EAAA,KAAA,GAAA,iBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,eAAA,CAAA;;;;;;;;eAEe;EACbA,IAAI,EADS,OAAA;EAEbC,IAAI,EAAEC,UAAAA,CAFO,OAAA;EAGbC,WAAW,EAHE,sBAAA;EAIbC,OAAO,EAAE,CACP;IACEJ,IAAI,EADN,iBAAA;IAEEK,KAAK,EAAEC;EAFT,CADO,EAKP;IACEN,IAAI,EADN,iBAAA;IAEEO,OAAO,EAAE;EAFX,CALO,EASP;IACEP,IAAI,EADN,sBAAA;IAEEG,WAAW,EAFb,+BAAA;IAGEE,KAAK,EAAGG,eAAAA,GAAD;MAAA,OAAiBC,KAAAA,GAAAA,OAAAA,CAAAA,OAAAA,CAAAA,GAAAA,CAAjB;IAAA;EAHT,CATO,EAcP;IACET,IAAI,EADN,uBAAA;IAEEG,WAAW,EAFb,8DAAA;IAIEE,KAAK,EAAGG,eAAAA,GAAD;MAAA,OACLA,GAAG,CAAHA,KAAAA,CAAAA,GAAAA,EAAAA,GAAAA,CAA4BE,UAAAA,MAAD;QAAA,OAAoBD,KAAAA,GAAAA,OAAAA,CAAAA,OAAAA,CAA/CD,MAA+CC,CAApB;MAAA,CAA3BD,CADK;IAAA;EAJT,CAdO,EAqBP;IACER,IAAI,EADN,uBAAA;IAEEG,WAAW,EAFb,kFAAA;IAIEE,KAAK,EAAGG,eAAAA,GAAD;MAAA,OAAiBA,GAAG,CAAHA,KAAAA,CAAAA,GAAAA,CAAjB;IAAA;EAJT,CArBO,EA2BP;IACER,IAAI,EADN,qBAAA;IAEEG,WAAW,EAFb,qEAAA;IAIEE,KAAK,EAAGG,eAAAA,GAAD;MAAA,OAAiBA,GAAG,CAAHA,KAAAA,CAAAA,GAAAA,CAAjB;IAAA;EAJT,CA3BO,EAiCP;IACER,IAAI,EADN,wBAAA;IAEEG,WAAW,EACT,6DAAA,wEAAA,GAHJ,kCAAA;IAMEE,KAAK,EAAGM,eAAAA,OAAD;MAAA,OAAqBL,MAAM,CAAA,OAAA,CAA3B;IAAA;EANT,CAjCO,EAyCP;IACEN,IAAI,EADN,wBAAA;IAEEG,WAAW,EAAE;EAFf,CAzCO,EA6CP;IACEH,IAAI,EADN,6BAAA;IAEEG,WAAW,EAAE;EAFf,CA7CO,EAiDP;IACEH,IAAI,EADN,8DAAA;IAEEG,WAAW,EACT;EAHJ,CAjDO,EAsDP;IACEH,IAAI,EADN,SAAA;IAEEG,WAAW,EAAE;EAFf,CAtDO,EA0DP;IACEH,IAAI,EADN,cAAA;IAEEG,WAAW,EAAE;EAFf,CA1DO,EA8DP;IACEH,IAAI,EADN,eAAA;IAEEG,WAAW,EAAE;EAFf,CA9DO,EAkEP;IACEH,IAAI,EADN,mBAAA;IAEEG,WAAW,EAFb,oCAAA;IAGEE,KAAK,EAAGG,eAAAA,GAAD;MAAA,OAAiBC,KAAAA,GAAAA,OAAAA,CAAAA,OAAAA,CAAAA,GAAAA,CAAjB;IAAA;EAHT,CAlEO,EAuEP;IACET,IAAI,EADN,kBAAA;IAEEG,WAAW,EAAE;EAFf,CAvEO;AAJI,C","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport path from 'path';\nimport runServer from './runServer';\n\nexport default {\n  name: 'start',\n  func: runServer,\n  description: 'starts the webserver',\n  options: [\n    {\n      name: '--port <number>',\n      parse: Number,\n    },\n    {\n      name: '--host <string>',\n      default: '',\n    },\n    {\n      name: '--projectRoot <path>',\n      description: 'Path to a custom project root',\n      parse: (val: string) => path.resolve(val),\n    },\n    {\n      name: '--watchFolders <list>',\n      description:\n        'Specify any additional folders to be added to the watch list',\n      parse: (val: string) =>\n        val.split(',').map<string>((folder: string) => path.resolve(folder)),\n    },\n    {\n      name: '--assetPlugins <list>',\n      description:\n        'Specify any additional asset plugins to be used by the packager by full filepath',\n      parse: (val: string) => val.split(','),\n    },\n    {\n      name: '--sourceExts <list>',\n      description:\n        'Specify any additional source extensions to be used by the packager',\n      parse: (val: string) => val.split(','),\n    },\n    {\n      name: '--max-workers <number>',\n      description:\n        'Specifies the maximum number of workers the worker-pool ' +\n        'will spawn for transforming files. This defaults to the number of the ' +\n        'cores available on your machine.',\n      parse: (workers: string) => Number(workers),\n    },\n    {\n      name: '--transformer <string>',\n      description: 'Specify a custom transformer to be used',\n    },\n    {\n      name: '--reset-cache, --resetCache',\n      description: 'Removes cached files',\n    },\n    {\n      name: '--custom-log-reporter-path, --customLogReporterPath <string>',\n      description:\n        'Path to a JavaScript file that exports a log reporter as a replacement for TerminalReporter',\n    },\n    {\n      name: '--https',\n      description: 'Enables https connections to the server',\n    },\n    {\n      name: '--key <path>',\n      description: 'Path to custom SSL key',\n    },\n    {\n      name: '--cert <path>',\n      description: 'Path to custom SSL cert',\n    },\n    {\n      name: '--config <string>',\n      description: 'Path to the CLI configuration file',\n      parse: (val: string) => path.resolve(val),\n    },\n    {\n      name: '--no-interactive',\n      description: 'Disables interactive mode',\n    },\n  ],\n};\n"]},"metadata":{},"sourceType":"script"}