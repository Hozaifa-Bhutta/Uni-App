{"ast":null,"code":"\"use strict\";\n\nvar parsePlatformFilePath = require(\"./parsePlatformFilePath\");\n\nvar path = require(\"path\");\n\nvar ASSET_BASE_NAME_RE = /(.+?)(@([\\d.]+)x)?$/;\n\nfunction parseBaseName(baseName) {\n  var match = baseName.match(ASSET_BASE_NAME_RE);\n\n  if (!match) {\n    throw new Error(\"invalid asset name: `\" + baseName + \"'\");\n  }\n\n  var rootName = match[1];\n\n  if (match[3] != null) {\n    var resolution = parseFloat(match[3]);\n\n    if (!Number.isNaN(resolution)) {\n      return {\n        rootName: rootName,\n        resolution: resolution\n      };\n    }\n  }\n\n  return {\n    rootName: rootName,\n    resolution: 1\n  };\n}\n\nfunction tryParse(filePath, platforms) {\n  var result = parsePlatformFilePath(filePath, platforms);\n  var dirPath = result.dirPath,\n      baseName = result.baseName,\n      platform = result.platform,\n      extension = result.extension;\n\n  if (extension == null) {\n    return null;\n  }\n\n  var _parseBaseName = parseBaseName(baseName),\n      rootName = _parseBaseName.rootName,\n      resolution = _parseBaseName.resolution;\n\n  return {\n    assetName: path.join(dirPath, rootName + \".\" + extension),\n    name: rootName,\n    platform: platform,\n    resolution: resolution,\n    type: extension\n  };\n}\n\nfunction parse(filePath, platforms) {\n  var result = tryParse(filePath, platforms);\n\n  if (result == null) {\n    throw new Error(\"invalid asset file path: `${filePath}\");\n  }\n\n  return result;\n}\n\nmodule.exports = {\n  parse: parse,\n  tryParse: tryParse\n};","map":{"version":3,"names":["parsePlatformFilePath","require","path","ASSET_BASE_NAME_RE","parseBaseName","baseName","match","Error","rootName","resolution","parseFloat","Number","isNaN","tryParse","filePath","platforms","result","dirPath","platform","extension","assetName","join","name","type","parse","module","exports"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/metro/src/node-haste/lib/AssetPaths.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\"use strict\";\n\nconst parsePlatformFilePath = require(\"./parsePlatformFilePath\");\n\nconst path = require(\"path\");\n\nconst ASSET_BASE_NAME_RE = /(.+?)(@([\\d.]+)x)?$/;\n\nfunction parseBaseName(baseName) {\n  const match = baseName.match(ASSET_BASE_NAME_RE);\n\n  if (!match) {\n    throw new Error(`invalid asset name: \\`${baseName}'`);\n  }\n\n  const rootName = match[1];\n\n  if (match[3] != null) {\n    const resolution = parseFloat(match[3]);\n\n    if (!Number.isNaN(resolution)) {\n      return {\n        rootName,\n        resolution,\n      };\n    }\n  }\n\n  return {\n    rootName,\n    resolution: 1,\n  };\n}\n/**\n * Return `null` if the `filePath` doesn't have a valid extension, required\n * to describe the type of an asset.\n */\n\nfunction tryParse(filePath, platforms) {\n  const result = parsePlatformFilePath(filePath, platforms);\n  const { dirPath, baseName, platform, extension } = result;\n\n  if (extension == null) {\n    return null;\n  }\n\n  const { rootName, resolution } = parseBaseName(baseName);\n  return {\n    assetName: path.join(dirPath, `${rootName}.${extension}`),\n    name: rootName,\n    platform,\n    resolution,\n    type: extension,\n  };\n}\n\nfunction parse(filePath, platforms) {\n  const result = tryParse(filePath, platforms);\n\n  if (result == null) {\n    throw new Error(\"invalid asset file path: `${filePath}\");\n  }\n\n  return result;\n}\n\nmodule.exports = {\n  parse,\n  tryParse,\n};\n"],"mappings":"AASA;;AAEA,IAAMA,qBAAqB,GAAGC,OAAO,2BAArC;;AAEA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAME,kBAAkB,GAAG,qBAA3B;;AAEA,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;EAC/B,IAAMC,KAAK,GAAGD,QAAQ,CAACC,KAAT,CAAeH,kBAAf,CAAd;;EAEA,IAAI,CAACG,KAAL,EAAY;IACV,MAAM,IAAIC,KAAJ,2BAAmCF,QAAnC,OAAN;EACD;;EAED,IAAMG,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAAtB;;EAEA,IAAIA,KAAK,CAAC,CAAD,CAAL,IAAY,IAAhB,EAAsB;IACpB,IAAMG,UAAU,GAAGC,UAAU,CAACJ,KAAK,CAAC,CAAD,CAAN,CAA7B;;IAEA,IAAI,CAACK,MAAM,CAACC,KAAP,CAAaH,UAAb,CAAL,EAA+B;MAC7B,OAAO;QACLD,QAAQ,EAARA,QADK;QAELC,UAAU,EAAVA;MAFK,CAAP;IAID;EACF;;EAED,OAAO;IACLD,QAAQ,EAARA,QADK;IAELC,UAAU,EAAE;EAFP,CAAP;AAID;;AAMD,SAASI,QAAT,CAAkBC,QAAlB,EAA4BC,SAA5B,EAAuC;EACrC,IAAMC,MAAM,GAAGhB,qBAAqB,CAACc,QAAD,EAAWC,SAAX,CAApC;EACA,IAAQE,OAAR,GAAmDD,MAAnD,CAAQC,OAAR;EAAA,IAAiBZ,QAAjB,GAAmDW,MAAnD,CAAiBX,QAAjB;EAAA,IAA2Ba,QAA3B,GAAmDF,MAAnD,CAA2BE,QAA3B;EAAA,IAAqCC,SAArC,GAAmDH,MAAnD,CAAqCG,SAArC;;EAEA,IAAIA,SAAS,IAAI,IAAjB,EAAuB;IACrB,OAAO,IAAP;EACD;;EAED,qBAAiCf,aAAa,CAACC,QAAD,CAA9C;EAAA,IAAQG,QAAR,kBAAQA,QAAR;EAAA,IAAkBC,UAAlB,kBAAkBA,UAAlB;;EACA,OAAO;IACLW,SAAS,EAAElB,IAAI,CAACmB,IAAL,CAAUJ,OAAV,EAAsBT,QAAtB,SAAkCW,SAAlC,CADN;IAELG,IAAI,EAAEd,QAFD;IAGLU,QAAQ,EAARA,QAHK;IAILT,UAAU,EAAVA,UAJK;IAKLc,IAAI,EAAEJ;EALD,CAAP;AAOD;;AAED,SAASK,KAAT,CAAeV,QAAf,EAAyBC,SAAzB,EAAoC;EAClC,IAAMC,MAAM,GAAGH,QAAQ,CAACC,QAAD,EAAWC,SAAX,CAAvB;;EAEA,IAAIC,MAAM,IAAI,IAAd,EAAoB;IAClB,MAAM,IAAIT,KAAJ,CAAU,uCAAV,CAAN;EACD;;EAED,OAAOS,MAAP;AACD;;AAEDS,MAAM,CAACC,OAAP,GAAiB;EACfF,KAAK,EAALA,KADe;EAEfX,QAAQ,EAARA;AAFe,CAAjB"},"metadata":{},"sourceType":"script"}