{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createEventsSocketEndpoint;\n\nfunction _ws() {\n  var data = require(\"ws\");\n\n  _ws = function _ws() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _prettyFormat() {\n  var data = _interopRequireDefault(require(\"pretty-format\"));\n\n  _prettyFormat = function _prettyFormat() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar PROTOCOL_VERSION = 2;\n\nfunction parseMessage(data) {\n  try {\n    var message = JSON.parse(data);\n\n    if (message.version === PROTOCOL_VERSION) {\n      return message;\n    }\n\n    _cliTools().logger.error('Received message had wrong protocol version: ' + message.version);\n  } catch (_unused) {\n    _cliTools().logger.error('Failed to parse the message as JSON:\\n' + data);\n  }\n\n  return undefined;\n}\n\nfunction serializeMessage(message) {\n  var toSerialize = message;\n\n  if (message && message.error && message.error instanceof Error) {\n    toSerialize = _objectSpread(_objectSpread({}, message), {}, {\n      error: (0, _prettyFormat().default)(message.error, {\n        escapeString: true,\n        highlight: true,\n        maxDepth: 3,\n        min: true\n      })\n    });\n  } else if (message && message.type === 'client_log') {\n    toSerialize = _objectSpread(_objectSpread({}, message), {}, {\n      data: message.data.map(function (item) {\n        return typeof item === 'string' ? item : (0, _prettyFormat().default)(item, {\n          escapeString: true,\n          highlight: true,\n          maxDepth: 3,\n          min: true,\n          plugins: [_prettyFormat().default.plugins.ReactElement]\n        });\n      })\n    });\n  }\n\n  try {\n    return JSON.stringify(toSerialize);\n  } catch (e) {\n    _cliTools().logger.error('Failed to serialize: ' + e);\n\n    return null;\n  }\n}\n\nfunction createEventsSocketEndpoint(broadcast) {\n  var wss = new (_ws().Server)({\n    noServer: true,\n    verifyClient: function verifyClient(_ref) {\n      var origin = _ref.origin;\n      return !origin || origin.startsWith('http://localhost:') || origin.startsWith('file:');\n    }\n  });\n  var clients = new Map();\n  var nextClientId = 0;\n\n  function broadCastEvent(message) {\n    if (!clients.size) {\n      return;\n    }\n\n    var serialized = serializeMessage(message);\n\n    if (!serialized) {\n      return;\n    }\n\n    for (var _iterator = _createForOfIteratorHelperLoose(clients.values()), _step; !(_step = _iterator()).done;) {\n      var ws = _step.value;\n\n      try {\n        ws.send(serialized);\n      } catch (e) {\n        _cliTools().logger.error(\"Failed to send broadcast to client due to:\\n \" + e.toString());\n      }\n    }\n  }\n\n  wss.on('connection', function (clientWs) {\n    var clientId = \"client#\" + nextClientId++;\n    clients.set(clientId, clientWs);\n\n    clientWs.onclose = clientWs.onerror = function () {\n      clients.delete(clientId);\n    };\n\n    clientWs.onmessage = function (event) {\n      var message = parseMessage(event.data.toString());\n\n      if (message == null) {\n        return;\n      }\n\n      if (message.type === 'command') {\n        try {\n          broadcast(message.command, message.params);\n        } catch (e) {\n          _cliTools().logger.error('Failed to forward message to clients: ', e);\n        }\n      } else {\n        _cliTools().logger.error('Unknown message type: ', message.type);\n      }\n    };\n  });\n  return {\n    server: wss,\n    reportEvent: function reportEvent(event) {\n      broadCastEvent(event);\n    }\n  };\n}","map":{"version":3,"sources":["../../src/websocket/createEventsSocketEndpoint.ts"],"names":["PROTOCOL_VERSION","message","JSON","logger","toSerialize","error","escapeString","highlight","maxDepth","min","data","item","plugins","prettyFormat","wss","WebSocketServer","noServer","verifyClient","origin","clients","nextClientId","serialized","serializeMessage","ws","e","clientId","clientWs","event","parseMessage","broadcast","server","reportEvent","broadCastEvent"],"mappings":"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","sourcesContent":["import {Server as WebSocketServer} from 'ws';\nimport {logger} from '@react-native-community/cli-tools';\nimport prettyFormat from 'pretty-format';\n\n/**\n * The eventsSocket websocket listens at the 'events/` for websocket\n * connections, on which all Metro reports will be emitted.\n *\n * This is mostly useful for developer tools (clients) that wants to monitor Metro,\n * and the apps connected to Metro.\n *\n * The eventsSocket provides the following features:\n * - it reports any Metro event (that is reported through a reporter) to all clients\n * - it reports any console.log's (and friends) from the connected app to all clients\n *   (as client_log event)\n * - it allows connected clients to send commands through Metro to the connected app.\n *   This reuses the generic command mechanism.\n *   Two useful commands are 'reload' and 'devmenu'.\n */\n\ntype Command = {\n  version: number;\n  type: 'command';\n  command: string;\n  params?: any;\n};\n\n/**\n * This number is used to version the communication protocol between\n * Dev tooling like Flipper and Metro, so that in the future we can recognize\n * messages coming from old clients, so that it will be simpler to implement\n * backward compatibility.\n *\n * We start at 2 as the protocol is currently the same as used internally at FB,\n * which happens to be at version 2 as well.\n */\nconst PROTOCOL_VERSION = 2;\n\nfunction parseMessage<T extends Object>(data: string): T | undefined {\n  try {\n    const message = JSON.parse(data);\n    if (message.version === PROTOCOL_VERSION) {\n      return message;\n    }\n    logger.error(\n      'Received message had wrong protocol version: ' + message.version,\n    );\n  } catch {\n    logger.error('Failed to parse the message as JSON:\\n' + data);\n  }\n  return undefined;\n}\n\n/**\n * Two types of messages will arrive in this function,\n * 1) messages generated by Metro itself (through the reporter abstraction)\n *    those are yet to be serialized, and can contain any kind of data structure\n * 2) a specific event generated by Metro is `client_log`, which describes\n *    console.* calls in the app.\n *    The arguments send to the console are pretty printed so that they can be\n *    displayed in a nicer way in dev tools\n *\n * @param message\n */\nfunction serializeMessage(message: any) {\n  // We do want to send Metro report messages, but their contents is not guaranteed to be serializable.\n  // For some known types we will pretty print otherwise not serializable parts first:\n  let toSerialize = message;\n  if (message && message.error && message.error instanceof Error) {\n    toSerialize = {\n      ...message,\n      error: prettyFormat(message.error, {\n        escapeString: true,\n        highlight: true,\n        maxDepth: 3,\n        min: true,\n      }),\n    };\n  } else if (message && message.type === 'client_log') {\n    toSerialize = {\n      ...message,\n      data: message.data.map((item: any) =>\n        typeof item === 'string'\n          ? item\n          : prettyFormat(item, {\n              escapeString: true,\n              highlight: true,\n              maxDepth: 3,\n              min: true,\n              plugins: [prettyFormat.plugins.ReactElement],\n            }),\n      ),\n    };\n  }\n  try {\n    return JSON.stringify(toSerialize);\n  } catch (e) {\n    logger.error('Failed to serialize: ' + e);\n    return null;\n  }\n}\n\n/**\n * Starts the eventsSocket at the given path\n *\n */\nexport default function createEventsSocketEndpoint(\n  broadcast: (method: string, params?: Record<string, any>) => void,\n): {\n  server: WebSocketServer;\n  reportEvent: (event: any) => void;\n} {\n  const wss = new WebSocketServer({\n    noServer: true,\n    verifyClient({origin}: {origin: string}) {\n      // This exposes the full JS logs and enables issuing commands like reload\n      // so let's make sure only locally running stuff can connect to it\n      // origin is only checked if it is set, e.g. when the request is made from a (CORS) browser\n      // any 'back-end' connection isn't CORS at all, and has full control over the origin header,\n      // so there is no point in checking it security wise\n      return (\n        !origin ||\n        origin.startsWith('http://localhost:') ||\n        origin.startsWith('file:')\n      );\n    },\n  });\n\n  const clients = new Map();\n  let nextClientId = 0;\n\n  /**\n   * broadCastEvent is called by reportEvent (below), which is called by the\n   * default reporter of this server, to make sure that all Metro events are\n   * broadcasted to all connected clients\n   * (that is, all devtools such as Flipper, _not_: connected apps)\n   *\n   * @param message\n   */\n  function broadCastEvent(message: any) {\n    if (!clients.size) {\n      return;\n    }\n    const serialized = serializeMessage(message);\n    if (!serialized) {\n      return;\n    }\n    for (const ws of clients.values()) {\n      try {\n        ws.send(serialized);\n      } catch (e) {\n        logger.error(\n          `Failed to send broadcast to client due to:\\n ${e.toString()}`,\n        );\n      }\n    }\n  }\n\n  wss.on('connection', function (clientWs) {\n    const clientId = `client#${nextClientId++}`;\n\n    clients.set(clientId, clientWs);\n\n    clientWs.onclose = clientWs.onerror = () => {\n      clients.delete(clientId);\n    };\n\n    clientWs.onmessage = (event) => {\n      const message: Command | undefined = parseMessage(event.data.toString());\n      if (message == null) {\n        return;\n      }\n      if (message.type === 'command') {\n        try {\n          /**\n           * messageSocket.broadcast (not to be confused with our own broadcast above)\n           * forwards a command to all connected React Native applications.\n           */\n          broadcast(message.command, message.params);\n        } catch (e) {\n          logger.error('Failed to forward message to clients: ', e);\n        }\n      } else {\n        logger.error('Unknown message type: ', message.type);\n      }\n    };\n  });\n\n  return {\n    server: wss,\n    reportEvent: (event: any) => {\n      broadCastEvent(event);\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}