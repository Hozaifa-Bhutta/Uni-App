{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getLatestRelease;\n\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n\n  _semver = function _semver() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _releaseCacheManager = _interopRequireDefault(require(\"./releaseCacheManager\"));\n\nvar _fetch = require(\"../fetch\");\n\nvar _logger = _interopRequireDefault(require(\"../logger\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getLatestRelease(name, currentVersion) {\n  var cachedLatest, aWeek, lastChecked, now, eTag, latestVersion;\n  return _regeneratorRuntime.async(function getLatestRelease$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _logger.default.debug('Checking for a newer version of React Native');\n\n          _context.prev = 1;\n\n          _logger.default.debug(\"Current version: \" + currentVersion);\n\n          cachedLatest = _releaseCacheManager.default.get(name, 'latestVersion');\n\n          if (cachedLatest) {\n            _logger.default.debug(\"Cached release version: \" + cachedLatest);\n          }\n\n          aWeek = 7 * 24 * 60 * 60 * 1000;\n          lastChecked = _releaseCacheManager.default.get(name, 'lastChecked');\n          now = new Date();\n\n          if (!(lastChecked && Number(now) - Number(new Date(lastChecked)) < aWeek)) {\n            _context.next = 11;\n            break;\n          }\n\n          _logger.default.debug('Cached release is still recent, skipping remote check');\n\n          return _context.abrupt(\"return\");\n\n        case 11:\n          _logger.default.debug('Checking for newer releases on GitHub');\n\n          eTag = _releaseCacheManager.default.get(name, 'eTag');\n          _context.next = 15;\n          return _regeneratorRuntime.awrap(getLatestRnDiffPurgeVersion(name, eTag));\n\n        case 15:\n          latestVersion = _context.sent;\n\n          _logger.default.debug(\"Latest release: \" + latestVersion);\n\n          if (!(_semver().default.compare(latestVersion, currentVersion) === 1 && !_semver().default.prerelease(latestVersion))) {\n            _context.next = 19;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {\n            version: latestVersion,\n            changelogUrl: buildChangelogUrl(latestVersion),\n            diffUrl: buildDiffUrl(currentVersion)\n          });\n\n        case 19:\n          _context.next = 25;\n          break;\n\n        case 21:\n          _context.prev = 21;\n          _context.t0 = _context[\"catch\"](1);\n\n          _logger.default.debug('Something went wrong with remote version checking, moving on');\n\n          _logger.default.debug(_context.t0);\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 21]], Promise);\n}\n\nfunction buildChangelogUrl(version) {\n  return \"https://github.com/facebook/react-native/releases/tag/v\" + version;\n}\n\nfunction buildDiffUrl(version) {\n  return \"https://react-native-community.github.io/upgrade-helper/?from=\" + version;\n}\n\nfunction getLatestRnDiffPurgeVersion(name, eTag) {\n  var options, _await, data, status, headers, body, latestVersion, eTagHeader, _latestVersion;\n\n  return _regeneratorRuntime.async(function getLatestRnDiffPurgeVersion$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          options = {\n            headers: {\n              'User-Agent': 'React-Native-CLI'\n            }\n          };\n\n          if (eTag) {\n            options.headers['If-None-Match'] = eTag;\n          }\n\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap((0, _fetch.fetch)('https://api.github.com/repos/react-native-community/rn-diff-purge/tags', options));\n\n        case 4:\n          _await = _context2.sent;\n          data = _await.data;\n          status = _await.status;\n          headers = _await.headers;\n\n          if (!(status === 200)) {\n            _context2.next = 14;\n            break;\n          }\n\n          body = data;\n          latestVersion = body[0].name.substring(8);\n          eTagHeader = headers.get('eTag');\n\n          if (!_semver().default.prerelease(latestVersion) && eTagHeader) {\n            _logger.default.debug(\"Saving \" + eTagHeader + \" to cache\");\n\n            _releaseCacheManager.default.set(name, 'eTag', eTagHeader);\n\n            _releaseCacheManager.default.set(name, 'latestVersion', latestVersion);\n          }\n\n          return _context2.abrupt(\"return\", latestVersion);\n\n        case 14:\n          if (!(status === 304)) {\n            _context2.next = 18;\n            break;\n          }\n\n          _latestVersion = _releaseCacheManager.default.get(name, 'latestVersion');\n\n          if (!_latestVersion) {\n            _context2.next = 18;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", _latestVersion);\n\n        case 18:\n          return _context2.abrupt(\"return\", '0.0.0');\n\n        case 19:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../../src/releaseChecker/getLatestRelease.ts"],"names":["logger","cachedLatest","cacheManager","aWeek","lastChecked","now","Number","eTag","latestVersion","getLatestRnDiffPurgeVersion","semver","version","changelogUrl","buildChangelogUrl","diffUrl","buildDiffUrl","options","headers","status","body","eTagHeader"],"mappings":"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","sourcesContent":["import semver from 'semver';\nimport cacheManager from './releaseCacheManager';\nimport {fetch} from '../fetch';\nimport logger from '../logger';\n\nexport type Release = {\n  version: string;\n  changelogUrl: string;\n  diffUrl: string;\n};\n\n/**\n * Checks via GitHub API if there is a newer stable React Native release and,\n * if it exists, returns the release data.\n *\n * If the latest release is not newer or if it's a prerelease, the function\n * will return undefined.\n */\nexport default async function getLatestRelease(\n  name: string,\n  currentVersion: string,\n): Promise<Release | void> {\n  logger.debug('Checking for a newer version of React Native');\n  try {\n    logger.debug(`Current version: ${currentVersion}`);\n\n    const cachedLatest = cacheManager.get(name, 'latestVersion');\n\n    if (cachedLatest) {\n      logger.debug(`Cached release version: ${cachedLatest}`);\n    }\n\n    const aWeek = 7 * 24 * 60 * 60 * 1000;\n    const lastChecked = cacheManager.get(name, 'lastChecked');\n    const now = new Date();\n    if (lastChecked && Number(now) - Number(new Date(lastChecked)) < aWeek) {\n      logger.debug('Cached release is still recent, skipping remote check');\n      return;\n    }\n\n    logger.debug('Checking for newer releases on GitHub');\n    const eTag = cacheManager.get(name, 'eTag');\n    const latestVersion = await getLatestRnDiffPurgeVersion(name, eTag);\n    logger.debug(`Latest release: ${latestVersion}`);\n\n    if (\n      semver.compare(latestVersion, currentVersion) === 1 &&\n      !semver.prerelease(latestVersion)\n    ) {\n      return {\n        version: latestVersion,\n        changelogUrl: buildChangelogUrl(latestVersion),\n        diffUrl: buildDiffUrl(currentVersion),\n      };\n    }\n  } catch (e) {\n    logger.debug(\n      'Something went wrong with remote version checking, moving on',\n    );\n    logger.debug(e);\n  }\n}\n\nfunction buildChangelogUrl(version: string) {\n  return `https://github.com/facebook/react-native/releases/tag/v${version}`;\n}\n\nfunction buildDiffUrl(version: string) {\n  return `https://react-native-community.github.io/upgrade-helper/?from=${version}`;\n}\n\n/**\n * Returns the most recent React Native version available to upgrade to.\n */\nasync function getLatestRnDiffPurgeVersion(\n  name: string,\n  eTag?: string,\n): Promise<string> {\n  const options = {\n    // https://developer.github.com/v3/#user-agent-required\n    headers: {'User-Agent': 'React-Native-CLI'} as Headers,\n  };\n\n  if (eTag) {\n    options.headers['If-None-Match'] = eTag;\n  }\n\n  const {data, status, headers} = await fetch(\n    'https://api.github.com/repos/react-native-community/rn-diff-purge/tags',\n    options,\n  );\n\n  // Remote is newer.\n  if (status === 200) {\n    const body: Array<any> = data;\n    const latestVersion = body[0].name.substring(8);\n    const eTagHeader = headers.get('eTag');\n\n    // Update cache only if newer release is stable.\n    if (!semver.prerelease(latestVersion) && eTagHeader) {\n      logger.debug(`Saving ${eTagHeader} to cache`);\n      cacheManager.set(name, 'eTag', eTagHeader);\n      cacheManager.set(name, 'latestVersion', latestVersion);\n    }\n\n    return latestVersion;\n  }\n\n  // Cache is still valid.\n  if (status === 304) {\n    const latestVersion = cacheManager.get(name, 'latestVersion');\n    if (latestVersion) {\n      return latestVersion;\n    }\n  }\n\n  // Should be returned only if something went wrong.\n  return '0.0.0';\n}\n\ntype Headers = {\n  'User-Agent': string;\n  [header: string]: string;\n};\n"]},"metadata":{},"sourceType":"script"}