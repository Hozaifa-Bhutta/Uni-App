{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _walk = _interopRequireDefault(require(\"./walk\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction copyFiles(srcPath, destPath) {\n  var options,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function copyFiles$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n          return _context2.abrupt(\"return\", Promise.all((0, _walk.default)(srcPath).map(function _callee(absoluteSrcFilePath) {\n            var exclude, relativeFilePath;\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    exclude = options.exclude;\n\n                    if (!(exclude && exclude.some(function (p) {\n                      return p.test(absoluteSrcFilePath);\n                    }))) {\n                      _context.next = 3;\n                      break;\n                    }\n\n                    return _context.abrupt(\"return\");\n\n                  case 3:\n                    relativeFilePath = _path().default.relative(srcPath, absoluteSrcFilePath);\n                    _context.next = 6;\n                    return _regeneratorRuntime.awrap(copyFile(absoluteSrcFilePath, _path().default.resolve(destPath, relativeFilePath)));\n\n                  case 6:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          })));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction copyFile(srcPath, destPath) {\n  if (_fs().default.lstatSync(srcPath).isDirectory()) {\n    if (!_fs().default.existsSync(destPath)) {\n      _fs().default.mkdirSync(destPath);\n    }\n\n    return;\n  }\n\n  return new Promise(function (resolve, reject) {\n    copyBinaryFile(srcPath, destPath, function (err) {\n      if (err) {\n        reject(err);\n      }\n\n      resolve(destPath);\n    });\n  });\n}\n\nfunction copyBinaryFile(srcPath, destPath, cb) {\n  var cbCalled = false;\n\n  var _fs$default$statSync = _fs().default.statSync(srcPath),\n      mode = _fs$default$statSync.mode;\n\n  var readStream = _fs().default.createReadStream(srcPath);\n\n  var writeStream = _fs().default.createWriteStream(destPath);\n\n  readStream.on('error', function (err) {\n    done(err);\n  });\n  writeStream.on('error', function (err) {\n    done(err);\n  });\n  readStream.on('close', function () {\n    done();\n\n    _fs().default.chmodSync(destPath, mode);\n  });\n  readStream.pipe(writeStream);\n\n  function done(err) {\n    if (!cbCalled) {\n      cb(err);\n      cbCalled = true;\n    }\n  }\n}\n\nvar _default = copyFiles;\nexports.default = _default;","map":{"version":3,"sources":["../../src/tools/copyFiles.ts"],"names":["options","exclude","p","relativeFilePath","path","copyFile","fs","copyBinaryFile","err","reject","resolve","cbCalled","mode","readStream","writeStream","done","cb","copyFiles"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport walk from './walk';\n\ntype Options = {\n  exclude?: Array<RegExp>;\n};\n\n/**\n * Copy files (binary included) recursively.\n */\nasync function copyFiles(\n  srcPath: string,\n  destPath: string,\n  options: Options = {},\n) {\n  return Promise.all(\n    walk(srcPath).map(async (absoluteSrcFilePath: string) => {\n      const exclude = options.exclude;\n      if (exclude && exclude.some((p) => p.test(absoluteSrcFilePath))) {\n        return;\n      }\n      const relativeFilePath = path.relative(srcPath, absoluteSrcFilePath);\n      await copyFile(\n        absoluteSrcFilePath,\n        path.resolve(destPath, relativeFilePath),\n      );\n    }),\n  );\n}\n\n/**\n * Copy a file to given destination.\n */\nfunction copyFile(srcPath: string, destPath: string) {\n  if (fs.lstatSync(srcPath).isDirectory()) {\n    if (!fs.existsSync(destPath)) {\n      fs.mkdirSync(destPath);\n    }\n    // Not recursive\n    return;\n  }\n\n  return new Promise((resolve, reject) => {\n    copyBinaryFile(srcPath, destPath, (err) => {\n      if (err) {\n        reject(err);\n      }\n      resolve(destPath);\n    });\n  });\n}\n\n/**\n * Same as 'cp' on Unix. Don't do any replacements.\n */\nfunction copyBinaryFile(\n  srcPath: string,\n  destPath: string,\n  cb: (err?: Error) => void,\n) {\n  let cbCalled = false;\n  const {mode} = fs.statSync(srcPath);\n  const readStream = fs.createReadStream(srcPath);\n  const writeStream = fs.createWriteStream(destPath);\n  readStream.on('error', (err) => {\n    done(err);\n  });\n  writeStream.on('error', (err) => {\n    done(err);\n  });\n  readStream.on('close', () => {\n    done();\n    fs.chmodSync(destPath, mode);\n  });\n  readStream.pipe(writeStream);\n  function done(err?: Error) {\n    if (!cbCalled) {\n      cb(err);\n      cbCalled = true;\n    }\n  }\n}\n\nexport default copyFiles;\n"]},"metadata":{},"sourceType":"script"}