{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateSourcemap = generateSourcemap;\nexports.findSourcemap = findSourcemap;\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _os() {\n  var data = _interopRequireDefault(require(\"os\"));\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ip() {\n  var data = _interopRequireDefault(require(\"ip\"));\n\n  _ip = function _ip() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getTempFilePath(filename) {\n  return _path().default.join(_os().default.tmpdir(), filename);\n}\n\nfunction writeJsonSync(targetPath, data) {\n  var json;\n\n  try {\n    json = JSON.stringify(data);\n  } catch (e) {\n    throw new (_cliTools().CLIError)(\"Failed to serialize data to json before writing to \" + targetPath, e);\n  }\n\n  try {\n    _fs().default.writeFileSync(targetPath, json, 'utf-8');\n  } catch (e) {\n    throw new (_cliTools().CLIError)(\"Failed to write json to \" + targetPath, e);\n  }\n}\n\nfunction getSourcemapFromServer(port) {\n  var DEBUG_SERVER_PORT, IP_ADDRESS, PLATFORM, requestURL, _await, data;\n\n  return _regeneratorRuntime.async(function getSourcemapFromServer$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _cliTools().logger.debug('Getting source maps from Metro packager server');\n\n          DEBUG_SERVER_PORT = port || '8081';\n          IP_ADDRESS = _ip().default.address();\n          PLATFORM = 'android';\n          requestURL = \"http://\" + IP_ADDRESS + \":\" + DEBUG_SERVER_PORT + \"/index.map?platform=\" + PLATFORM + \"&dev=true\";\n          _context.prev = 5;\n          _context.next = 8;\n          return _regeneratorRuntime.awrap((0, _cliTools().fetch)(requestURL));\n\n        case 8:\n          _await = _context.sent;\n          data = _await.data;\n          return _context.abrupt(\"return\", data);\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](5);\n\n          _cliTools().logger.debug(\"Failed to fetch source map from \\\"\" + requestURL + \"\\\"\");\n\n          return _context.abrupt(\"return\", undefined);\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[5, 13]], Promise);\n}\n\nfunction generateSourcemap(port) {\n  var sourceMapPath, sourceMapResult;\n  return _regeneratorRuntime.async(function generateSourcemap$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          sourceMapPath = getTempFilePath('index.map');\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(getSourcemapFromServer(port));\n\n        case 3:\n          sourceMapResult = _context2.sent;\n\n          if (!sourceMapResult) {\n            _context2.next = 11;\n            break;\n          }\n\n          _cliTools().logger.debug('Using source maps from Metro packager server');\n\n          writeJsonSync(sourceMapPath, sourceMapResult);\n\n          _cliTools().logger.debug(\"Successfully obtained the source map and stored it in \" + sourceMapPath);\n\n          return _context2.abrupt(\"return\", sourceMapPath);\n\n        case 11:\n          _cliTools().logger.error('Cannot obtain source maps from Metro packager server');\n\n          return _context2.abrupt(\"return\", undefined);\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction findSourcemap(ctx, port) {\n  var intermediateBuildPath, generatedBuildPath;\n  return _regeneratorRuntime.async(function findSourcemap$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          intermediateBuildPath = _path().default.join(ctx.root, 'android', 'app', 'build', 'intermediates', 'sourcemaps', 'react', 'debug', 'index.android.bundle.packager.map');\n          generatedBuildPath = _path().default.join(ctx.root, 'android', 'app', 'build', 'generated', 'sourcemaps', 'react', 'debug', 'index.android.bundle.map');\n\n          if (!_fs().default.existsSync(generatedBuildPath)) {\n            _context3.next = 7;\n            break;\n          }\n\n          _cliTools().logger.debug(\"Getting the source map from \" + generateSourcemap);\n\n          return _context3.abrupt(\"return\", generatedBuildPath);\n\n        case 7:\n          if (!_fs().default.existsSync(intermediateBuildPath)) {\n            _context3.next = 12;\n            break;\n          }\n\n          _cliTools().logger.debug(\"Getting the source map from \" + intermediateBuildPath);\n\n          return _context3.abrupt(\"return\", intermediateBuildPath);\n\n        case 12:\n          return _context3.abrupt(\"return\", generateSourcemap(port));\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../../src/profileHermes/sourcemapUtils.ts"],"names":["path","os","json","JSON","CLIError","fs","logger","DEBUG_SERVER_PORT","port","IP_ADDRESS","ip","PLATFORM","requestURL","data","sourceMapPath","getTempFilePath","sourceMapResult","getSourcemapFromServer","writeJsonSync","intermediateBuildPath","ctx","generatedBuildPath","generateSourcemap"],"mappings":"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","sourcesContent":["import {Config} from '@react-native-community/cli-types';\nimport {logger, CLIError, fetch} from '@react-native-community/cli-tools';\nimport fs from 'fs';\nimport path from 'path';\nimport os from 'os';\nimport {SourceMap} from 'hermes-profile-transformer';\nimport ip from 'ip';\n\nfunction getTempFilePath(filename: string) {\n  return path.join(os.tmpdir(), filename);\n}\n\nfunction writeJsonSync(targetPath: string, data: any) {\n  let json;\n  try {\n    json = JSON.stringify(data);\n  } catch (e) {\n    throw new CLIError(\n      `Failed to serialize data to json before writing to ${targetPath}`,\n      e,\n    );\n  }\n\n  try {\n    fs.writeFileSync(targetPath, json, 'utf-8');\n  } catch (e) {\n    throw new CLIError(`Failed to write json to ${targetPath}`, e);\n  }\n}\n\nasync function getSourcemapFromServer(\n  port?: string,\n): Promise<SourceMap | undefined> {\n  logger.debug('Getting source maps from Metro packager server');\n  const DEBUG_SERVER_PORT = port || '8081';\n  const IP_ADDRESS = ip.address();\n  const PLATFORM = 'android';\n\n  const requestURL = `http://${IP_ADDRESS}:${DEBUG_SERVER_PORT}/index.map?platform=${PLATFORM}&dev=true`;\n  try {\n    const {data} = await fetch(requestURL);\n    return data as SourceMap;\n  } catch (e) {\n    logger.debug(`Failed to fetch source map from \"${requestURL}\"`);\n    return undefined;\n  }\n}\n\n/**\n * Generate a sourcemap by fetching it from a running metro server\n */\nexport async function generateSourcemap(\n  port?: string,\n): Promise<string | undefined> {\n  // Fetch the source map to a temp directory\n  const sourceMapPath = getTempFilePath('index.map');\n  const sourceMapResult = await getSourcemapFromServer(port);\n\n  if (sourceMapResult) {\n    logger.debug('Using source maps from Metro packager server');\n    writeJsonSync(sourceMapPath, sourceMapResult);\n    logger.debug(\n      `Successfully obtained the source map and stored it in ${sourceMapPath}`,\n    );\n    return sourceMapPath;\n  } else {\n    logger.error('Cannot obtain source maps from Metro packager server');\n    return undefined;\n  }\n}\n\n/**\n *\n * @param ctx\n */\nexport async function findSourcemap(\n  ctx: Config,\n  port?: string,\n): Promise<string | undefined> {\n  const intermediateBuildPath = path.join(\n    ctx.root,\n    'android',\n    'app',\n    'build',\n    'intermediates',\n    'sourcemaps',\n    'react',\n    'debug',\n    'index.android.bundle.packager.map',\n  );\n\n  const generatedBuildPath = path.join(\n    ctx.root,\n    'android',\n    'app',\n    'build',\n    'generated',\n    'sourcemaps',\n    'react',\n    'debug',\n    'index.android.bundle.map',\n  );\n\n  if (fs.existsSync(generatedBuildPath)) {\n    logger.debug(`Getting the source map from ${generateSourcemap}`);\n    return generatedBuildPath;\n  } else if (fs.existsSync(intermediateBuildPath)) {\n    logger.debug(`Getting the source map from ${intermediateBuildPath}`);\n    return intermediateBuildPath;\n  } else {\n    return generateSourcemap(port);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}