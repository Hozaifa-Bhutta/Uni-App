{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar ALLOWED_SCALES = {\n  ios: [1, 2, 3]\n};\n\nfunction filterPlatformAssetScales(platform, scales) {\n  var whitelist = ALLOWED_SCALES[platform];\n\n  if (!whitelist) {\n    return scales;\n  }\n\n  var result = scales.filter(function (scale) {\n    return whitelist.indexOf(scale) > -1;\n  });\n\n  if (result.length === 0 && scales.length > 0) {\n    var maxScale = whitelist[whitelist.length - 1];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(scales), _step; !(_step = _iterator()).done;) {\n      var scale = _step.value;\n\n      if (scale > maxScale) {\n        result.push(scale);\n        break;\n      }\n    }\n\n    if (result.length === 0) {\n      result.push(scales[scales.length - 1]);\n    }\n  }\n\n  return result;\n}\n\nvar _default = filterPlatformAssetScales;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/bundle/filterPlatformAssetScales.ts"],"names":["ALLOWED_SCALES","ios","whitelist","result","scales","scale","maxScale","filterPlatformAssetScales"],"mappings":";;;;;;;;;;;;AAQA,IAAMA,cAAyC,GAAG;EAChDC,GAAG,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAD2C,CAAlD;;AAIA,SAAA,yBAAA,CAAA,QAAA,EAAA,MAAA,EAGyB;EACvB,IAAMC,SAAmB,GAAGF,cAAc,CAA1C,QAA0C,CAA1C;;EACA,IAAI,CAAJ,SAAA,EAAgB;IACd,OAAA,MAAA;EACD;;EACD,IAAMG,MAAM,GAAGC,MAAM,CAANA,MAAAA,CAAeC,UAAAA,KAAD;IAAA,OAAWH,SAAS,CAATA,OAAAA,CAAAA,KAAAA,IAA2B,CAAnE,CAA6B;EAAA,CAAdE,CAAf;;EACA,IAAID,MAAM,CAANA,MAAAA,KAAAA,CAAAA,IAAuBC,MAAM,CAANA,MAAAA,GAA3B,CAAA,EAA8C;IAI5C,IAAME,QAAQ,GAAGJ,SAAS,CAACA,SAAS,CAATA,MAAAA,GAA3B,CAA0B,CAA1B;;IACA,qDAAA,MAAA,wCAA4B;MAAA,IAA5B,KAA4B;;MAC1B,IAAIG,KAAK,GAAT,QAAA,EAAsB;QACpBF,MAAM,CAANA,IAAAA,CAAAA,KAAAA;QACA;MACD;IATyC;;IAa5C,IAAIA,MAAM,CAANA,MAAAA,KAAJ,CAAA,EAAyB;MACvBA,MAAM,CAANA,IAAAA,CAAYC,MAAM,CAACA,MAAM,CAANA,MAAAA,GAAnBD,CAAkB,CAAlBA;IACD;EACF;;EACD,OAAA,MAAA;AACD;;eAEcI,yB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst ALLOWED_SCALES: {[key: string]: number[]} = {\n  ios: [1, 2, 3],\n};\n\nfunction filterPlatformAssetScales(\n  platform: string,\n  scales: ReadonlyArray<number>,\n): ReadonlyArray<number> {\n  const whitelist: number[] = ALLOWED_SCALES[platform];\n  if (!whitelist) {\n    return scales;\n  }\n  const result = scales.filter((scale) => whitelist.indexOf(scale) > -1);\n  if (result.length === 0 && scales.length > 0) {\n    // No matching scale found, but there are some available. Ideally we don't\n    // want to be in this situation and should throw, but for now as a fallback\n    // let's just use the closest larger image\n    const maxScale = whitelist[whitelist.length - 1];\n    for (const scale of scales) {\n      if (scale > maxScale) {\n        result.push(scale);\n        break;\n      }\n    }\n\n    // There is no larger scales available, use the largest we have\n    if (result.length === 0) {\n      result.push(scales[scales.length - 1]);\n    }\n  }\n  return result;\n}\n\nexport default filterPlatformAssetScales;\n"]},"metadata":{},"sourceType":"script"}