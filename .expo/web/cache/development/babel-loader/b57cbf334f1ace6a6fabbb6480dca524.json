{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _require = require(\"../cli-utils\"),\n    makeAsyncCommand = _require.makeAsyncCommand,\n    watchFile = _require.watchFile;\n\nvar MetroApi = require(\"../index\");\n\nvar _require2 = require(\"metro-config\"),\n    loadConfig = _require2.loadConfig,\n    resolveConfig = _require2.resolveConfig;\n\nvar _require3 = require(\"util\"),\n    promisify = _require3.promisify;\n\nmodule.exports = function () {\n  return {\n    command: \"serve\",\n    description: \"Starts Metro on the given port, building bundles on the fly\",\n    builder: function builder(yargs) {\n      yargs.option(\"project-roots\", {\n        alias: \"P\",\n        type: \"string\",\n        array: true\n      });\n      yargs.option(\"host\", {\n        alias: \"h\",\n        type: \"string\",\n        default: \"localhost\"\n      });\n      yargs.option(\"port\", {\n        alias: \"p\",\n        type: \"number\",\n        default: 8080\n      });\n      yargs.option(\"max-workers\", {\n        alias: \"j\",\n        type: \"number\"\n      });\n      yargs.option(\"secure\", {\n        type: \"boolean\",\n        describe: \"(deprecated)\"\n      });\n      yargs.option(\"secure-key\", {\n        type: \"string\",\n        describe: \"(deprecated)\"\n      });\n      yargs.option(\"secure-cert\", {\n        type: \"string\",\n        describe: \"(deprecated)\"\n      });\n      yargs.option(\"secure-server-options\", {\n        alias: \"s\",\n        type: \"string\",\n        describe: \"Use dot notation for object path\"\n      });\n      yargs.option(\"hmr-enabled\", {\n        alias: \"hmr\",\n        type: \"boolean\"\n      });\n      yargs.option(\"config\", {\n        alias: \"c\",\n        type: \"string\"\n      });\n      yargs.option(\"reset-cache\", {\n        type: \"boolean\"\n      });\n      yargs.example(\"secure-server-options\", '-s.cert=\"$(cat path/to/cert)\" -s.key=\"$(cat path/to/key\")');\n    },\n    handler: makeAsyncCommand(function _callee(argv) {\n      var server, restarting, restart, foundConfig;\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              restart = function _restart() {\n                var config;\n                return _regeneratorRuntime.async(function restart$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!restarting) {\n                          _context.next = 4;\n                          break;\n                        }\n\n                        return _context.abrupt(\"return\");\n\n                      case 4:\n                        restarting = true;\n\n                      case 5:\n                        if (!server) {\n                          _context.next = 9;\n                          break;\n                        }\n\n                        console.log(\"Configuration changed. Restarting the server...\");\n                        _context.next = 9;\n                        return _regeneratorRuntime.awrap(promisify(server.close).call(server));\n\n                      case 9:\n                        _context.next = 11;\n                        return _regeneratorRuntime.awrap(loadConfig(argv));\n\n                      case 11:\n                        config = _context.sent;\n                        _context.next = 14;\n                        return _regeneratorRuntime.awrap(MetroApi.runServer(config, argv));\n\n                      case 14:\n                        server = _context.sent;\n                        restarting = false;\n\n                      case 16:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              };\n\n              server = null;\n              restarting = false;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(resolveConfig(argv.config, argv.cwd));\n\n            case 5:\n              foundConfig = _context2.sent;\n\n              if (!foundConfig) {\n                _context2.next = 11;\n                break;\n              }\n\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(watchFile(foundConfig.filepath, restart));\n\n            case 9:\n              _context2.next = 13;\n              break;\n\n            case 11:\n              _context2.next = 13;\n              return _regeneratorRuntime.awrap(restart());\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })\n  };\n};","map":{"version":3,"names":["require","makeAsyncCommand","watchFile","MetroApi","loadConfig","resolveConfig","promisify","module","exports","command","description","builder","yargs","option","alias","type","array","default","describe","example","handler","argv","restart","restarting","server","console","log","close","call","config","runServer","cwd","foundConfig","filepath"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/metro/src/commands/serve.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\"use strict\";\n\nconst { makeAsyncCommand, watchFile } = require(\"../cli-utils\");\n\nconst MetroApi = require(\"../index\");\n\nconst { loadConfig, resolveConfig } = require(\"metro-config\");\n\nconst { promisify } = require(\"util\");\n\nmodule.exports = () => ({\n  command: \"serve\",\n  description: \"Starts Metro on the given port, building bundles on the fly\",\n  builder: (yargs) => {\n    yargs.option(\"project-roots\", {\n      alias: \"P\",\n      type: \"string\",\n      array: true,\n    });\n    yargs.option(\"host\", {\n      alias: \"h\",\n      type: \"string\",\n      default: \"localhost\",\n    });\n    yargs.option(\"port\", {\n      alias: \"p\",\n      type: \"number\",\n      default: 8080,\n    });\n    yargs.option(\"max-workers\", {\n      alias: \"j\",\n      type: \"number\",\n    });\n    yargs.option(\"secure\", {\n      type: \"boolean\",\n      describe: \"(deprecated)\",\n    });\n    yargs.option(\"secure-key\", {\n      type: \"string\",\n      describe: \"(deprecated)\",\n    });\n    yargs.option(\"secure-cert\", {\n      type: \"string\",\n      describe: \"(deprecated)\",\n    });\n    yargs.option(\"secure-server-options\", {\n      alias: \"s\",\n      type: \"string\",\n      describe: \"Use dot notation for object path\",\n    });\n    yargs.option(\"hmr-enabled\", {\n      alias: \"hmr\",\n      type: \"boolean\",\n    });\n    yargs.option(\"config\", {\n      alias: \"c\",\n      type: \"string\",\n    }); // Deprecated\n\n    yargs.option(\"reset-cache\", {\n      type: \"boolean\",\n    }); // Examples\n\n    yargs.example(\n      \"secure-server-options\",\n      '-s.cert=\"$(cat path/to/cert)\" -s.key=\"$(cat path/to/key\")'\n    );\n  },\n  handler: makeAsyncCommand(async (argv) => {\n    let server = null;\n    let restarting = false;\n\n    async function restart() {\n      if (restarting) {\n        return;\n      } else {\n        restarting = true;\n      }\n\n      if (server) {\n        // eslint-disable-next-line no-console\n        console.log(\"Configuration changed. Restarting the server...\"); // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n\n        await promisify(server.close).call(server);\n      }\n\n      const config = await loadConfig(argv); // $FlowExpectedError YargArguments and RunBuildOptions are used interchangeable but their types are not yet compatible\n\n      server = await MetroApi.runServer(config, argv);\n      restarting = false;\n    }\n\n    const foundConfig = await resolveConfig(argv.config, argv.cwd);\n\n    if (foundConfig) {\n      await watchFile(foundConfig.filepath, restart);\n    } else {\n      await restart();\n    }\n  }),\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}