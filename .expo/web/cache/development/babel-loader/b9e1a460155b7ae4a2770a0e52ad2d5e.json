{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _defineEnumerableProperties = require(\"@babel/runtime/helpers/defineEnumerableProperties\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _findDependencies = _interopRequireDefault(require(\"./findDependencies\"));\n\nvar _resolveReactNativePath = _interopRequireDefault(require(\"./resolveReactNativePath\"));\n\nvar _readConfigFromDisk = require(\"./readConfigFromDisk\");\n\nvar _assign = _interopRequireDefault(require(\"./assign\"));\n\nvar _merge = _interopRequireDefault(require(\"./merge\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getDependencyConfig(root, dependencyName, finalConfig, config, userConfig, isPlatform) {\n  return (0, _merge.default)({\n    root: root,\n    name: dependencyName,\n    platforms: Object.keys(finalConfig.platforms).reduce(function (dependency, platform) {\n      var platformConfig = finalConfig.platforms[platform];\n      dependency[platform] = isPlatform || !platformConfig ? null : platformConfig.dependencyConfig(root, config.dependency.platforms[platform]);\n      return dependency;\n    }, {})\n  }, userConfig.dependencies[dependencyName] || {});\n}\n\nfunction loadConfig() {\n  var projectRoot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _cliTools().findProjectRoot)();\n  var lazyProject;\n  var userConfig = (0, _readConfigFromDisk.readConfigFromDisk)(projectRoot);\n  var initialConfig = {\n    root: projectRoot,\n\n    get reactNativePath() {\n      return userConfig.reactNativePath ? _path().default.resolve(projectRoot, userConfig.reactNativePath) : (0, _resolveReactNativePath.default)(projectRoot);\n    },\n\n    dependencies: userConfig.dependencies,\n    commands: userConfig.commands,\n    healthChecks: [],\n    platforms: userConfig.platforms,\n\n    get project() {\n      if (lazyProject) {\n        return lazyProject;\n      }\n\n      lazyProject = {};\n\n      for (var platform in finalConfig.platforms) {\n        var platformConfig = finalConfig.platforms[platform];\n\n        if (platformConfig) {\n          lazyProject[platform] = platformConfig.projectConfig(projectRoot, userConfig.project[platform] || {});\n        }\n      }\n\n      return lazyProject;\n    }\n\n  };\n  var finalConfig = Array.from(new Set([].concat(_toConsumableArray(Object.keys(userConfig.dependencies)), _toConsumableArray((0, _findDependencies.default)(projectRoot))))).reduce(function (acc, dependencyName) {\n    var _ref, _mutatorMap;\n\n    var localDependencyRoot = userConfig.dependencies[dependencyName] && userConfig.dependencies[dependencyName].root;\n    var root;\n    var config;\n\n    try {\n      root = localDependencyRoot || (0, _cliTools().resolveNodeModuleDir)(projectRoot, dependencyName);\n      config = (0, _readConfigFromDisk.readDependencyConfigFromDisk)(root);\n    } catch (error) {\n      _cliTools().logger.warn((0, _cliTools().inlineString)(\"\\n          Package \" + _chalk().default.bold(dependencyName) + \" has been ignored because it contains invalid configuration.\\n\\n          Reason: \" + _chalk().default.dim(error.message)));\n\n      return acc;\n    }\n\n    var isPlatform = Object.keys(config.platforms).length > 0;\n    return (0, _assign.default)({}, acc, {\n      dependencies: (0, _assign.default)({}, acc.dependencies, (_ref = {}, _mutatorMap = {}, _mutatorMap[dependencyName] = _mutatorMap[dependencyName] || {}, _mutatorMap[dependencyName].get = function () {\n        return getDependencyConfig(root, dependencyName, finalConfig, config, userConfig, isPlatform);\n      }, _defineEnumerableProperties(_ref, _mutatorMap), _ref)),\n      commands: [].concat(_toConsumableArray(acc.commands), _toConsumableArray(config.commands)),\n      platforms: _objectSpread(_objectSpread({}, acc.platforms), config.platforms),\n      healthChecks: [].concat(_toConsumableArray(acc.healthChecks), _toConsumableArray(config.healthChecks))\n    });\n  }, initialConfig);\n  return finalConfig;\n}\n\nvar _default = loadConfig;\nexports.default = _default;","map":{"version":3,"sources":["../src/loadConfig.ts"],"names":["root","name","platforms","finalConfig","platformConfig","dependency","isPlatform","config","userConfig","projectRoot","initialConfig","path","dependencies","commands","healthChecks","lazyProject","Object","localDependencyRoot","logger","chalk","error","acc","getDependencyConfig","loadConfig"],"mappings":"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","sourcesContent":["import path from 'path';\nimport chalk from 'chalk';\nimport {\n  UserDependencyConfig,\n  ProjectConfig,\n  DependencyConfig,\n  UserConfig,\n  Config,\n} from '@react-native-community/cli-types';\nimport {\n  logger,\n  inlineString,\n  findProjectRoot,\n  resolveNodeModuleDir,\n} from '@react-native-community/cli-tools';\nimport findDependencies from './findDependencies';\nimport resolveReactNativePath from './resolveReactNativePath';\nimport {\n  readConfigFromDisk,\n  readDependencyConfigFromDisk,\n} from './readConfigFromDisk';\nimport assign from './assign';\nimport merge from './merge';\n\nfunction getDependencyConfig(\n  root: string,\n  dependencyName: string,\n  finalConfig: Config,\n  config: UserDependencyConfig,\n  userConfig: UserConfig,\n  isPlatform: boolean,\n): DependencyConfig {\n  return merge(\n    {\n      root,\n      name: dependencyName,\n      platforms: Object.keys(finalConfig.platforms).reduce(\n        (dependency, platform) => {\n          const platformConfig = finalConfig.platforms[platform];\n          dependency[platform] =\n            // Linking platforms is not supported\n            isPlatform || !platformConfig\n              ? null\n              : platformConfig.dependencyConfig(\n                  root,\n                  config.dependency.platforms[platform],\n                );\n          return dependency;\n        },\n        {} as Config['platforms'],\n      ),\n    },\n    userConfig.dependencies[dependencyName] || {},\n  ) as DependencyConfig;\n}\n\n/**\n * Loads CLI configuration\n */\nfunction loadConfig(projectRoot: string = findProjectRoot()): Config {\n  let lazyProject: ProjectConfig;\n  const userConfig = readConfigFromDisk(projectRoot);\n\n  const initialConfig: Config = {\n    root: projectRoot,\n    get reactNativePath() {\n      return userConfig.reactNativePath\n        ? path.resolve(projectRoot, userConfig.reactNativePath)\n        : resolveReactNativePath(projectRoot);\n    },\n    dependencies: userConfig.dependencies,\n    commands: userConfig.commands,\n    healthChecks: [],\n    platforms: userConfig.platforms,\n    get project() {\n      if (lazyProject) {\n        return lazyProject;\n      }\n\n      lazyProject = {};\n      for (const platform in finalConfig.platforms) {\n        const platformConfig = finalConfig.platforms[platform];\n        if (platformConfig) {\n          lazyProject[platform] = platformConfig.projectConfig(\n            projectRoot,\n            userConfig.project[platform] || {},\n          );\n        }\n      }\n\n      return lazyProject;\n    },\n  };\n\n  const finalConfig = Array.from(\n    new Set([\n      ...Object.keys(userConfig.dependencies),\n      ...findDependencies(projectRoot),\n    ]),\n  ).reduce((acc: Config, dependencyName) => {\n    const localDependencyRoot =\n      userConfig.dependencies[dependencyName] &&\n      userConfig.dependencies[dependencyName].root;\n    let root: string;\n    let config: UserDependencyConfig;\n    try {\n      root =\n        localDependencyRoot ||\n        resolveNodeModuleDir(projectRoot, dependencyName);\n      config = readDependencyConfigFromDisk(root);\n    } catch (error) {\n      logger.warn(\n        inlineString(`\n          Package ${chalk.bold(\n            dependencyName,\n          )} has been ignored because it contains invalid configuration.\n\n          Reason: ${chalk.dim(error.message)}`),\n      );\n      return acc;\n    }\n\n    const isPlatform = Object.keys(config.platforms).length > 0;\n\n    return assign({}, acc, {\n      dependencies: assign({}, acc.dependencies, {\n        get [dependencyName](): DependencyConfig {\n          return getDependencyConfig(\n            root,\n            dependencyName,\n            finalConfig,\n            config,\n            userConfig,\n            isPlatform,\n          );\n        },\n      }),\n      commands: [...acc.commands, ...config.commands],\n      platforms: {\n        ...acc.platforms,\n        ...config.platforms,\n      },\n      healthChecks: [...acc.healthChecks, ...config.healthChecks],\n    }) as Config;\n  }, initialConfig);\n\n  return finalConfig;\n}\n\nexport default loadConfig;\n"]},"metadata":{},"sourceType":"script"}