{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _wrapNativeSuper = require(\"@babel/runtime/helpers/wrapNativeSuper\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar formatFileCandidates = require(\"./formatFileCandidates\");\n\nvar FailedToResolvePathError = function (_Error) {\n  _inherits(FailedToResolvePathError, _Error);\n\n  var _super = _createSuper(FailedToResolvePathError);\n\n  function FailedToResolvePathError(candidates) {\n    var _this;\n\n    _classCallCheck(this, FailedToResolvePathError);\n\n    _this = _super.call(this, \"The module could not be resolved because none of these files exist:\\n\\n\" + (\"  * \" + formatFileCandidates(candidates.file) + \"\\n\") + (\"  * \" + formatFileCandidates(candidates.dir)));\n    _this.candidates = candidates;\n    return _this;\n  }\n\n  return _createClass(FailedToResolvePathError);\n}(_wrapNativeSuper(Error));\n\nmodule.exports = FailedToResolvePathError;","map":{"version":3,"names":["formatFileCandidates","require","FailedToResolvePathError","candidates","file","dir","Error","module","exports"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/metro-resolver/src/FailedToResolvePathError.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\"use strict\";\n\nconst formatFileCandidates = require(\"./formatFileCandidates\");\n\nclass FailedToResolvePathError extends Error {\n  constructor(candidates) {\n    super(\n      \"The module could not be resolved because none of these files exist:\\n\\n\" +\n        `  * ${formatFileCandidates(candidates.file)}\\n` +\n        `  * ${formatFileCandidates(candidates.dir)}`\n    );\n    this.candidates = candidates;\n  }\n}\n\nmodule.exports = FailedToResolvePathError;\n"],"mappings":"AASA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,oBAAoB,GAAGC,OAAO,0BAApC;;IAEMC,wB;;;;;EACJ,kCAAYC,UAAZ,EAAwB;IAAA;;IAAA;;IACtB,0BACE,sFACSH,oBAAoB,CAACG,UAAU,CAACC,IAAZ,CAD7B,qBAESJ,oBAAoB,CAACG,UAAU,CAACE,GAAZ,CAF7B,CADF;IAKA,MAAKF,UAAL,GAAkBA,UAAlB;IANsB;EAOvB;;;mBARoCG,K;;AAWvCC,MAAM,CAACC,OAAP,GAAiBN,wBAAjB"},"metadata":{},"sourceType":"script"}