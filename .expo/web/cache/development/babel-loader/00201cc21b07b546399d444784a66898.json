{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.promptCocoaPodsInstallationQuestion = promptCocoaPodsInstallationQuestion;\nexports.runSudo = runSudo;\nexports.installCocoaPods = installCocoaPods;\nexports.default = void 0;\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _prompts() {\n  var data = _interopRequireDefault(require(\"prompts\"));\n\n  _prompts = function _prompts() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _sudoPrompt() {\n  var data = _interopRequireDefault(require(\"sudo-prompt\"));\n\n  _sudoPrompt = function _sudoPrompt() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _brewInstall = require(\"./brewInstall\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction runPodInstall(loader, directory) {\n  var shouldHandleRepoUpdate,\n      stderr,\n      _args = arguments;\n  return _regeneratorRuntime.async(function runPodInstall$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          shouldHandleRepoUpdate = _args.length > 2 && _args[2] !== undefined ? _args[2] : true;\n          _context.prev = 1;\n          loader.start(\"Installing CocoaPods dependencies \" + _chalk().default.dim('(this may take a few minutes)'));\n          _context.next = 5;\n          return _regeneratorRuntime.awrap((0, _execa().default)('pod', ['install']));\n\n        case 5:\n          _context.next = 19;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](1);\n          stderr = _context.t0.stderr || _context.t0.stdout;\n\n          if (!(stderr.includes('pod repo update') && shouldHandleRepoUpdate)) {\n            _context.next = 17;\n            break;\n          }\n\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(runPodUpdate(loader));\n\n        case 13:\n          _context.next = 15;\n          return _regeneratorRuntime.awrap(runPodInstall(loader, directory, false));\n\n        case 15:\n          _context.next = 19;\n          break;\n\n        case 17:\n          loader.fail();\n          throw new Error(\"Failed to install CocoaPods dependencies for iOS project, which is required by this template.\\nPlease try again manually: \\\"cd ./\" + directory + \"/ios && pod install\\\".\\nCocoaPods documentation: \" + _chalk().default.dim.underline('https://cocoapods.org/'));\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 7]], Promise);\n}\n\nfunction runPodUpdate(loader) {\n  return _regeneratorRuntime.async(function runPodUpdate$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          loader.start(\"Updating CocoaPods repositories \" + _chalk().default.dim('(this may take a few minutes)'));\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap((0, _execa().default)('pod', ['repo', 'update']));\n\n        case 4:\n          _context2.next = 11;\n          break;\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n\n          _cliTools().logger.log(_context2.t0.stderr || _context2.t0.stdout);\n\n          loader.fail();\n          throw new Error(\"Failed to update CocoaPods repositories for iOS project.\\nPlease try again manually: \\\"pod repo update\\\".\\nCocoaPods documentation: \" + _chalk().default.dim.underline('https://cocoapods.org/'));\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\n\nfunction runSudo(command) {\n  return new Promise(function (resolve, reject) {\n    _sudoPrompt().default.exec(command, {\n      name: 'React Native CLI'\n    }, function (error) {\n      if (error) {\n        reject(error);\n      }\n\n      resolve();\n    });\n  });\n}\n\nfunction promptCocoaPodsInstallationQuestion() {\n  var promptQuestion, installWithGem, installWithHomebrew, _await, installMethod;\n\n  return _regeneratorRuntime.async(function promptCocoaPodsInstallationQuestion$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          promptQuestion = \"CocoaPods \" + _chalk().default.dim.underline('(https://cocoapods.org/)') + \" \" + _chalk().default.reset.bold('is not installed. CocoaPods is necessary for the iOS project to run correctly. Do you want to install it?');\n          installWithGem = 'Yes, with gem (may require sudo)';\n          installWithHomebrew = 'Yes, with Homebrew';\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap((0, _prompts().default)([{\n            type: 'select',\n            name: 'installMethod',\n            message: promptQuestion,\n            choices: [{\n              title: installWithGem,\n              value: 'gem'\n            }, {\n              title: installWithHomebrew,\n              value: 'homebrew'\n            }]\n          }]));\n\n        case 5:\n          _await = _context3.sent;\n          installMethod = _await.installMethod;\n          return _context3.abrupt(\"return\", {\n            installMethod: installMethod,\n            promptQuestion: \"? \" + promptQuestion + \" \" + (installMethod === 'gem' ? installWithGem : installWithHomebrew)\n          });\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction installCocoaPodsWithGem() {\n  var options;\n  return _regeneratorRuntime.async(function installCocoaPodsWithGem$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          options = ['install', 'cocoapods', '--no-document'];\n          _context4.prev = 1;\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap((0, _execa().default)('gem', options));\n\n        case 4:\n          _context4.next = 10;\n          break;\n\n        case 6:\n          _context4.prev = 6;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 10;\n          return _regeneratorRuntime.awrap(runSudo(\"gem \" + options.join(' ')));\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[1, 6]], Promise);\n}\n\nfunction installCocoaPods(loader) {\n  var _await$promptCocoaPod, installMethod;\n\n  return _regeneratorRuntime.async(function installCocoaPods$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          loader.stop();\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(promptCocoaPodsInstallationQuestion());\n\n        case 3:\n          _await$promptCocoaPod = _context5.sent;\n          installMethod = _await$promptCocoaPod.installMethod;\n\n          if (!(installMethod === 'gem')) {\n            _context5.next = 18;\n            break;\n          }\n\n          loader.start('Installing CocoaPods');\n          _context5.prev = 7;\n          _context5.next = 10;\n          return _regeneratorRuntime.awrap(installCocoaPodsWithGem());\n\n        case 10:\n          return _context5.abrupt(\"return\", loader.succeed());\n\n        case 13:\n          _context5.prev = 13;\n          _context5.t0 = _context5[\"catch\"](7);\n          loader.fail();\n\n          _cliTools().logger.error(_context5.t0.stderr);\n\n          throw new Error(\"An error occured while trying to install CocoaPods, which is required by this template.\\nPlease try again manually: sudo gem install cocoapods.\\nCocoaPods documentation: \" + _chalk().default.dim.underline('https://cocoapods.org/'));\n\n        case 18:\n          if (!(installMethod === 'homebrew')) {\n            _context5.next = 22;\n            break;\n          }\n\n          _context5.next = 21;\n          return _regeneratorRuntime.awrap((0, _brewInstall.brewInstall)({\n            pkg: 'cocoapods',\n            label: 'Installing CocoaPods',\n            loader: loader\n          }));\n\n        case 21:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 22:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[7, 13]], Promise);\n}\n\nfunction installPods(_ref) {\n  var directory, loader, hasPods;\n  return _regeneratorRuntime.async(function installPods$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          directory = _ref.directory, loader = _ref.loader;\n          loader = loader || new (_cliTools().NoopLoader)();\n          _context6.prev = 2;\n\n          if (_fs().default.existsSync('ios')) {\n            _context6.next = 5;\n            break;\n          }\n\n          return _context6.abrupt(\"return\");\n\n        case 5:\n          process.chdir('ios');\n          hasPods = _fs().default.existsSync('Podfile');\n\n          if (hasPods) {\n            _context6.next = 9;\n            break;\n          }\n\n          return _context6.abrupt(\"return\");\n\n        case 9:\n          _context6.prev = 9;\n          _context6.next = 12;\n          return _regeneratorRuntime.awrap((0, _execa().default)('pod', ['--version']));\n\n        case 12:\n          _context6.next = 19;\n          break;\n\n        case 14:\n          _context6.prev = 14;\n          _context6.t0 = _context6[\"catch\"](9);\n          loader.info();\n          _context6.next = 19;\n          return _regeneratorRuntime.awrap(installCocoaPods(loader));\n\n        case 19:\n          _context6.next = 21;\n          return _regeneratorRuntime.awrap(runPodInstall(loader, directory));\n\n        case 21:\n          _context6.next = 26;\n          break;\n\n        case 23:\n          _context6.prev = 23;\n          _context6.t1 = _context6[\"catch\"](2);\n          throw _context6.t1;\n\n        case 26:\n          _context6.prev = 26;\n          process.chdir('..');\n          return _context6.finish(26);\n\n        case 29:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[2, 23, 26, 29], [9, 14]], Promise);\n}\n\nvar _default = installPods;\nexports.default = _default;","map":{"version":3,"sources":["../../src/tools/installPods.ts"],"names":["shouldHandleRepoUpdate","loader","chalk","stderr","error","runPodUpdate","runPodInstall","directory","logger","sudo","name","reject","resolve","promptQuestion","installWithGem","installWithHomebrew","installMethod","type","message","choices","title","value","options","runSudo","promptCocoaPodsInstallationQuestion","installCocoaPodsWithGem","pkg","label","NoopLoader","fs","process","hasPods","installCocoaPods","installPods"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport execa from 'execa';\nimport chalk from 'chalk';\nimport prompts from 'prompts';\nimport {logger, NoopLoader} from '@react-native-community/cli-tools';\n// @ts-ignore untyped\nimport sudo from 'sudo-prompt';\nimport {brewInstall} from './brewInstall';\nimport {Loader} from '../types';\n\ntype PromptCocoaPodsInstallation = {\n  installMethod: 'gem' | 'homebrew';\n  promptQuestion: string;\n};\n\nasync function runPodInstall(\n  loader: Loader,\n  directory: string,\n  shouldHandleRepoUpdate: boolean = true,\n) {\n  try {\n    loader.start(\n      `Installing CocoaPods dependencies ${chalk.dim(\n        '(this may take a few minutes)',\n      )}`,\n    );\n    await execa('pod', ['install']);\n  } catch (error) {\n    // \"pod\" command outputs errors to stdout (at least some of them)\n    const stderr = error.stderr || error.stdout;\n\n    /**\n     * If CocoaPods failed due to repo being out of date, it will\n     * include the update command in the error message.\n     *\n     * `shouldHandleRepoUpdate` will be set to `false` to\n     * prevent infinite loop (unlikely scenario)\n     */\n    if (stderr.includes('pod repo update') && shouldHandleRepoUpdate) {\n      await runPodUpdate(loader);\n      await runPodInstall(loader, directory, false);\n    } else {\n      loader.fail();\n      throw new Error(\n        `Failed to install CocoaPods dependencies for iOS project, which is required by this template.\\nPlease try again manually: \"cd ./${directory}/ios && pod install\".\\nCocoaPods documentation: ${chalk.dim.underline(\n          'https://cocoapods.org/',\n        )}`,\n      );\n    }\n  }\n}\n\nasync function runPodUpdate(loader: Loader) {\n  try {\n    loader.start(\n      `Updating CocoaPods repositories ${chalk.dim(\n        '(this may take a few minutes)',\n      )}`,\n    );\n    await execa('pod', ['repo', 'update']);\n  } catch (error) {\n    // \"pod\" command outputs errors to stdout (at least some of them)\n    logger.log(error.stderr || error.stdout);\n    loader.fail();\n\n    throw new Error(\n      `Failed to update CocoaPods repositories for iOS project.\\nPlease try again manually: \"pod repo update\".\\nCocoaPods documentation: ${chalk.dim.underline(\n        'https://cocoapods.org/',\n      )}`,\n    );\n  }\n}\n\nfunction runSudo(command: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    sudo.exec(command, {name: 'React Native CLI'}, (error) => {\n      if (error) {\n        reject(error);\n      }\n\n      resolve();\n    });\n  });\n}\n\nasync function promptCocoaPodsInstallationQuestion(): Promise<\n  PromptCocoaPodsInstallation\n> {\n  const promptQuestion = `CocoaPods ${chalk.dim.underline(\n    '(https://cocoapods.org/)',\n  )} ${chalk.reset.bold(\n    'is not installed. CocoaPods is necessary for the iOS project to run correctly. Do you want to install it?',\n  )}`;\n  const installWithGem = 'Yes, with gem (may require sudo)';\n  const installWithHomebrew = 'Yes, with Homebrew';\n\n  const {installMethod} = await prompts([\n    {\n      type: 'select',\n      name: 'installMethod',\n      message: promptQuestion,\n      choices: [\n        {title: installWithGem, value: 'gem'},\n        {title: installWithHomebrew, value: 'homebrew'},\n      ],\n    },\n  ]);\n\n  return {\n    installMethod,\n    // This is used for removing the message in `doctor` after it's answered\n    promptQuestion: `? ${promptQuestion} ${\n      installMethod === 'gem' ? installWithGem : installWithHomebrew\n    }`,\n  };\n}\n\nasync function installCocoaPodsWithGem() {\n  const options = ['install', 'cocoapods', '--no-document'];\n\n  try {\n    // First attempt to install `cocoapods`\n    await execa('gem', options);\n  } catch (_error) {\n    // If that doesn't work then try with sudo\n    await runSudo(`gem ${options.join(' ')}`);\n  }\n}\n\nasync function installCocoaPods(loader: Loader) {\n  loader.stop();\n\n  const {installMethod} = await promptCocoaPodsInstallationQuestion();\n\n  if (installMethod === 'gem') {\n    loader.start('Installing CocoaPods');\n\n    try {\n      await installCocoaPodsWithGem();\n\n      return loader.succeed();\n    } catch (error) {\n      loader.fail();\n      logger.error(error.stderr);\n\n      throw new Error(\n        `An error occured while trying to install CocoaPods, which is required by this template.\\nPlease try again manually: sudo gem install cocoapods.\\nCocoaPods documentation: ${chalk.dim.underline(\n          'https://cocoapods.org/',\n        )}`,\n      );\n    }\n  }\n\n  if (installMethod === 'homebrew') {\n    return await brewInstall({\n      pkg: 'cocoapods',\n      label: 'Installing CocoaPods',\n      loader,\n    });\n  }\n}\n\nasync function installPods({\n  directory,\n  loader,\n}: {\n  directory: string;\n  loader?: Loader;\n}) {\n  loader = loader || new NoopLoader();\n  try {\n    if (!fs.existsSync('ios')) {\n      return;\n    }\n\n    process.chdir('ios');\n\n    const hasPods = fs.existsSync('Podfile');\n\n    if (!hasPods) {\n      return;\n    }\n\n    try {\n      // Check if \"pod\" is available and usable. It happens that there are\n      // multiple versions of \"pod\" command and even though it's there, it exits\n      // with a failure\n      await execa('pod', ['--version']);\n    } catch (e) {\n      loader.info();\n      await installCocoaPods(loader);\n    }\n\n    await runPodInstall(loader, directory);\n  } catch (error) {\n    throw error;\n  } finally {\n    process.chdir('..');\n  }\n}\n\nexport {promptCocoaPodsInstallationQuestion, runSudo, installCocoaPods};\n\nexport default installPods;\n"]},"metadata":{},"sourceType":"script"}