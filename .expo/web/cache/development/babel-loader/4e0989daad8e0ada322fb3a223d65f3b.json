{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _wrapNativeSuper = require(\"@babel/runtime/helpers/wrapNativeSuper\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inlineString = exports.CLIError = void 0;\n\nvar CLIError = function (_Error) {\n  _inherits(CLIError, _Error);\n\n  var _super = _createSuper(CLIError);\n\n  function CLIError(msg, originalError) {\n    var _this;\n\n    _classCallCheck(this, CLIError);\n\n    _this = _super.call(this, inlineString(msg));\n\n    if (originalError) {\n      _this.stack = typeof originalError === 'string' ? originalError : originalError.stack || ''.split('\\n').slice(0, 2).join('\\n');\n    } else {\n      delete _this.stack;\n    }\n\n    return _this;\n  }\n\n  return _createClass(CLIError);\n}(_wrapNativeSuper(Error));\n\nexports.CLIError = CLIError;\n\nvar inlineString = function inlineString(str) {\n  return str.replace(/(\\s{2,})/gm, ' ').trim();\n};\n\nexports.inlineString = inlineString;","map":{"version":3,"sources":["../src/errors.ts"],"names":["constructor","inlineString","originalError","str"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;IAIO,Q;;;;;EACLA,kBAAW,GAAXA,EAAW,aAAXA,EAAyD;IAAA;;IAAA;;IACvD,0BAAMC,YAAY,CAAlB,GAAkB,CAAlB;;IACA,IAAA,aAAA,EAAmB;MACjB,MAAA,KAAA,GACE,OAAA,aAAA,KAAA,QAAA,GAAA,aAAA,GAEIC,aAAa,CAAbA,KAAAA,IAAuB,GAAA,KAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA,EAAA,CAAA,EAAA,IAAA,CAH7B,IAG6B,CAH7B;IADF,CAAA,MAKO;MAIL,OAAO,MAAP,KAAA;IACD;;IAZsD;EAaxD;;;mBAdI,K;;;;AAiBA,IAAMD,YAAY,GAAIE,SAAhBF,YAAgBE,CAAAA,GAAD;EAAA,OAC1BA,GAAG,CAAHA,OAAAA,CAAAA,YAAAA,EAAAA,GAAAA,EADK,IACLA,EAD0B;AAAA,CAArB","sourcesContent":["/**\n * A custom Error that creates a single-lined message to match current styling inside CLI.\n * Uses original stack trace when `originalError` is passed or erase the stack if it's not defined.\n */\nexport class CLIError extends Error {\n  constructor(msg: string, originalError?: Error | string) {\n    super(inlineString(msg));\n    if (originalError) {\n      this.stack =\n        typeof originalError === 'string'\n          ? originalError\n          : originalError.stack || ''.split('\\n').slice(0, 2).join('\\n');\n    } else {\n      // When the \"originalError\" is not passed, it means that we know exactly\n      // what went wrong and provide means to fix it. In such cases showing the\n      // stack is an unnecessary clutter to the CLI output, hence removing it.\n      delete this.stack;\n    }\n  }\n}\n\nexport const inlineString = (str: string) =>\n  str.replace(/(\\s{2,})/gm, ' ').trim();\n"]},"metadata":{},"sourceType":"script"}