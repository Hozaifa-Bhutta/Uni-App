{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.projectConfig = projectConfig;\nexports.dependencyConfig = dependencyConfig;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _findAndroidDir = _interopRequireDefault(require(\"./findAndroidDir\"));\n\nvar _findManifest = _interopRequireDefault(require(\"./findManifest\"));\n\nvar _findPackageClassName = _interopRequireDefault(require(\"./findPackageClassName\"));\n\nvar _getAndroidProject = require(\"./getAndroidProject\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction projectConfig(root) {\n  var userConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var src = userConfig.sourceDir || (0, _findAndroidDir.default)(root);\n\n  if (!src) {\n    return null;\n  }\n\n  var sourceDir = _path().default.join(root, src);\n\n  var appName = getAppName(sourceDir, userConfig.appName);\n  var manifestPath = userConfig.manifestPath ? _path().default.join(sourceDir, userConfig.manifestPath) : (0, _findManifest.default)(_path().default.join(sourceDir, appName));\n\n  if (!manifestPath) {\n    return null;\n  }\n\n  var packageName = userConfig.packageName || (0, _getAndroidProject.getPackageName)(manifestPath);\n\n  if (!packageName) {\n    throw new Error(\"Package name not found in \" + manifestPath);\n  }\n\n  return {\n    sourceDir: sourceDir,\n    appName: appName,\n    packageName: packageName,\n    dependencyConfiguration: userConfig.dependencyConfiguration\n  };\n}\n\nfunction getAppName(sourceDir, userConfigAppName) {\n  var appName = '';\n\n  if (typeof userConfigAppName === 'string' && _fs().default.existsSync(_path().default.join(sourceDir, userConfigAppName))) {\n    appName = userConfigAppName;\n  } else if (_fs().default.existsSync(_path().default.join(sourceDir, 'app'))) {\n    appName = 'app';\n  }\n\n  return appName;\n}\n\nfunction dependencyConfig(root) {\n  var userConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (userConfig === null) {\n    return null;\n  }\n\n  var src = userConfig.sourceDir || (0, _findAndroidDir.default)(root);\n\n  if (!src) {\n    return null;\n  }\n\n  var sourceDir = _path().default.join(root, src);\n\n  var manifestPath = userConfig.manifestPath ? _path().default.join(sourceDir, userConfig.manifestPath) : (0, _findManifest.default)(sourceDir);\n\n  if (!manifestPath) {\n    return null;\n  }\n\n  var packageName = userConfig.packageName || (0, _getAndroidProject.getPackageName)(manifestPath);\n  var packageClassName = (0, _findPackageClassName.default)(sourceDir);\n\n  if (!packageClassName) {\n    return null;\n  }\n\n  var packageImportPath = userConfig.packageImportPath || \"import \" + packageName + \".\" + packageClassName + \";\";\n  var packageInstance = userConfig.packageInstance || \"new \" + packageClassName + \"()\";\n  var buildTypes = userConfig.buildTypes || [];\n  var dependencyConfiguration = userConfig.dependencyConfiguration;\n  return {\n    sourceDir: sourceDir,\n    packageImportPath: packageImportPath,\n    packageInstance: packageInstance,\n    buildTypes: buildTypes,\n    dependencyConfiguration: dependencyConfiguration\n  };\n}","map":{"version":3,"sources":["../../src/config/index.ts"],"names":["userConfig","src","sourceDir","path","appName","getAppName","manifestPath","packageName","dependencyConfiguration","fs","packageClassName","packageImportPath","packageInstance","buildTypes"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport path from 'path';\nimport fs from 'fs';\nimport findAndroidDir from './findAndroidDir';\nimport findManifest from './findManifest';\nimport findPackageClassName from './findPackageClassName';\nimport {\n  AndroidProjectParams,\n  AndroidProjectConfig,\n  AndroidDependencyParams,\n  AndroidDependencyConfig,\n} from '@react-native-community/cli-types';\nimport {getPackageName} from './getAndroidProject';\n\n/**\n * Gets android project config by analyzing given folder and taking some\n * defaults specified by user into consideration\n */\nexport function projectConfig(\n  root: string,\n  userConfig: AndroidProjectParams = {},\n): AndroidProjectConfig | null {\n  const src = userConfig.sourceDir || findAndroidDir(root);\n\n  if (!src) {\n    return null;\n  }\n\n  const sourceDir = path.join(root, src);\n\n  const appName = getAppName(sourceDir, userConfig.appName);\n\n  const manifestPath = userConfig.manifestPath\n    ? path.join(sourceDir, userConfig.manifestPath)\n    : findManifest(path.join(sourceDir, appName));\n\n  if (!manifestPath) {\n    return null;\n  }\n\n  const packageName = userConfig.packageName || getPackageName(manifestPath);\n\n  if (!packageName) {\n    throw new Error(`Package name not found in ${manifestPath}`);\n  }\n\n  return {\n    sourceDir,\n    appName,\n    packageName,\n    dependencyConfiguration: userConfig.dependencyConfiguration,\n  };\n}\n\nfunction getAppName(sourceDir: string, userConfigAppName: string | undefined) {\n  let appName = '';\n  if (\n    typeof userConfigAppName === 'string' &&\n    fs.existsSync(path.join(sourceDir, userConfigAppName))\n  ) {\n    appName = userConfigAppName;\n  } else if (fs.existsSync(path.join(sourceDir, 'app'))) {\n    appName = 'app';\n  }\n  return appName;\n}\n\n/**\n * Same as projectConfigAndroid except it returns\n * different config that applies to packages only\n */\nexport function dependencyConfig(\n  root: string,\n  userConfig: AndroidDependencyParams | null = {},\n): AndroidDependencyConfig | null {\n  if (userConfig === null) {\n    return null;\n  }\n\n  const src = userConfig.sourceDir || findAndroidDir(root);\n\n  if (!src) {\n    return null;\n  }\n\n  const sourceDir = path.join(root, src);\n  const manifestPath = userConfig.manifestPath\n    ? path.join(sourceDir, userConfig.manifestPath)\n    : findManifest(sourceDir);\n\n  if (!manifestPath) {\n    return null;\n  }\n\n  const packageName = userConfig.packageName || getPackageName(manifestPath);\n  const packageClassName = findPackageClassName(sourceDir);\n\n  /**\n   * This module has no package to export\n   */\n  if (!packageClassName) {\n    return null;\n  }\n\n  const packageImportPath =\n    userConfig.packageImportPath ||\n    `import ${packageName}.${packageClassName};`;\n\n  const packageInstance =\n    userConfig.packageInstance || `new ${packageClassName}()`;\n\n  const buildTypes = userConfig.buildTypes || [];\n  const dependencyConfiguration = userConfig.dependencyConfiguration;\n\n  return {\n    sourceDir,\n    packageImportPath,\n    packageInstance,\n    buildTypes,\n    dependencyConfiguration,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}