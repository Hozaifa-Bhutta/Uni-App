{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.downloadProfile = downloadProfile;\n\nfunction _child_process() {\n  var data = require(\"child_process\");\n\n  _child_process = function _child_process() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _os() {\n  var data = _interopRequireDefault(require(\"os\"));\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _hermesProfileTransformer() {\n  var data = _interopRequireDefault(require(\"hermes-profile-transformer\"));\n\n  _hermesProfileTransformer = function _hermesProfileTransformer() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _sourcemapUtils = require(\"./sourcemapUtils\");\n\nfunction _cliPlatformAndroid() {\n  var data = require(\"@react-native-community/cli-platform-android\");\n\n  _cliPlatformAndroid = function _cliPlatformAndroid() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getLatestFile(packageNameWithSuffix) {\n  try {\n    var file = (0, _child_process().execSync)(\"adb shell run-as \" + packageNameWithSuffix + \" ls cache/ -tp | grep -v /$ | grep -E '.cpuprofile' | head -1\\n        \");\n    return file.toString().trim();\n  } catch (e) {\n    throw new Error(e);\n  }\n}\n\nfunction execSyncWithLog(command) {\n  _cliTools().logger.debug(\"\" + command);\n\n  return (0, _child_process().execSync)(command);\n}\n\nfunction downloadProfile(ctx, dstPath, filename, sourcemapPath, raw, shouldGenerateSourcemap, port, appId, appIdSuffix) {\n  var androidProject, packageNameWithSuffix, file, osTmpDir, tempFilePath, events, transformedFilePath;\n  return _regeneratorRuntime.async(function downloadProfile$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          androidProject = (0, _cliPlatformAndroid().getAndroidProject)(ctx);\n          packageNameWithSuffix = [appId || androidProject.packageName, appIdSuffix].filter(Boolean).join('.');\n          file = filename || getLatestFile(packageNameWithSuffix);\n\n          if (file) {\n            _context.next = 6;\n            break;\n          }\n\n          throw new (_cliTools().CLIError)('There is no file in the cache/ directory. Did you record a profile from the developer menu?');\n\n        case 6:\n          _cliTools().logger.info(\"File to be pulled: \" + file);\n\n          dstPath = dstPath || ctx.root;\n\n          _cliTools().logger.debug('Internal commands run to pull the file:');\n\n          if (!raw) {\n            _context.next = 14;\n            break;\n          }\n\n          execSyncWithLog(\"adb shell run-as \" + packageNameWithSuffix + \" cat cache/\" + file + \" > \" + dstPath + \"/\" + file);\n\n          _cliTools().logger.success(\"Successfully pulled the file to \" + dstPath + \"/\" + file);\n\n          _context.next = 34;\n          break;\n\n        case 14:\n          osTmpDir = _os().default.tmpdir();\n          tempFilePath = _path().default.join(osTmpDir, file);\n          execSyncWithLog(\"adb shell run-as \" + packageNameWithSuffix + \" cat cache/\" + file + \" > \" + tempFilePath);\n\n          if (sourcemapPath) {\n            _context.next = 28;\n            break;\n          }\n\n          if (!shouldGenerateSourcemap) {\n            _context.next = 24;\n            break;\n          }\n\n          _context.next = 21;\n          return _regeneratorRuntime.awrap((0, _sourcemapUtils.generateSourcemap)(port));\n\n        case 21:\n          sourcemapPath = _context.sent;\n          _context.next = 27;\n          break;\n\n        case 24:\n          _context.next = 26;\n          return _regeneratorRuntime.awrap((0, _sourcemapUtils.findSourcemap)(ctx, port));\n\n        case 26:\n          sourcemapPath = _context.sent;\n\n        case 27:\n          if (!sourcemapPath) {\n            _cliTools().logger.warn('Cannot find source maps, running the transformer without it');\n\n            _cliTools().logger.info('Instructions on how to get source maps: set `bundleInDebug: true` in your app/build.gradle file, inside the `project.ext.react` map.');\n          }\n\n        case 28:\n          _context.next = 30;\n          return _regeneratorRuntime.awrap((0, _hermesProfileTransformer().default)(tempFilePath, sourcemapPath, 'index.bundle'));\n\n        case 30:\n          events = _context.sent;\n          transformedFilePath = dstPath + \"/\" + _path().default.basename(file, '.cpuprofile') + \"-converted.json\";\n\n          _fs().default.writeFileSync(transformedFilePath, JSON.stringify(events, undefined, 4), 'utf-8');\n\n          _cliTools().logger.success(\"Successfully converted to Chrome tracing format and pulled the file to \" + transformedFilePath);\n\n        case 34:\n          _context.next = 39;\n          break;\n\n        case 36:\n          _context.prev = 36;\n          _context.t0 = _context[\"catch\"](0);\n          throw _context.t0;\n\n        case 39:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 36]], Promise);\n}","map":{"version":3,"sources":["../../src/profileHermes/downloadProfile.ts"],"names":["file","packageNameWithSuffix","logger","androidProject","appId","filename","getLatestFile","CLIError","dstPath","ctx","execSyncWithLog","osTmpDir","os","tempFilePath","path","sourcemapPath","events","transformedFilePath","fs","JSON"],"mappings":"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","sourcesContent":["import {Config} from '@react-native-community/cli-types';\nimport {execSync} from 'child_process';\nimport {logger, CLIError} from '@react-native-community/cli-tools';\nimport fs from 'fs';\nimport path from 'path';\nimport os from 'os';\nimport transformer from 'hermes-profile-transformer';\nimport {findSourcemap, generateSourcemap} from './sourcemapUtils';\nimport {getAndroidProject} from '@react-native-community/cli-platform-android';\n/**\n * Get the last modified hermes profile\n * @param packageNameWithSuffix\n */\nfunction getLatestFile(packageNameWithSuffix: string): string {\n  try {\n    const file = execSync(`adb shell run-as ${packageNameWithSuffix} ls cache/ -tp | grep -v /$ | grep -E '.cpuprofile' | head -1\n        `);\n    return file.toString().trim();\n  } catch (e) {\n    throw new Error(e);\n  }\n}\n\nfunction execSyncWithLog(command: string) {\n  logger.debug(`${command}`);\n  return execSync(command);\n}\n\n/**\n * Pull and convert a Hermes tracing profile to Chrome tracing profile\n * @param ctx\n * @param dstPath\n * @param fileName\n * @param sourceMapPath\n * @param raw\n * @param generateSourceMap\n * @param appId\n * @param appIdSuffix\n */\nexport async function downloadProfile(\n  ctx: Config,\n  dstPath: string,\n  filename?: string,\n  sourcemapPath?: string,\n  raw?: boolean,\n  shouldGenerateSourcemap?: boolean,\n  port?: string,\n  appId?: string,\n  appIdSuffix?: string,\n) {\n  try {\n    const androidProject = getAndroidProject(ctx);\n    const packageNameWithSuffix = [\n      appId || androidProject.packageName,\n      appIdSuffix,\n    ]\n      .filter(Boolean)\n      .join('.');\n\n    // If file name is not specified, pull the latest file from device\n    const file = filename || getLatestFile(packageNameWithSuffix);\n    if (!file) {\n      throw new CLIError(\n        'There is no file in the cache/ directory. Did you record a profile from the developer menu?',\n      );\n    }\n\n    logger.info(`File to be pulled: ${file}`);\n\n    // If destination path is not specified, pull to the current directory\n    dstPath = dstPath || ctx.root;\n\n    logger.debug('Internal commands run to pull the file:');\n\n    // If --raw, pull the hermes profile to dstPath\n    if (raw) {\n      execSyncWithLog(\n        `adb shell run-as ${packageNameWithSuffix} cat cache/${file} > ${dstPath}/${file}`,\n      );\n      logger.success(`Successfully pulled the file to ${dstPath}/${file}`);\n    }\n\n    // Else: transform the profile to Chrome format and pull it to dstPath\n    else {\n      const osTmpDir = os.tmpdir();\n      const tempFilePath = path.join(osTmpDir, file);\n\n      execSyncWithLog(\n        `adb shell run-as ${packageNameWithSuffix} cat cache/${file} > ${tempFilePath}`,\n      );\n      // If path to source map is not given\n      if (!sourcemapPath) {\n        // Get or generate the source map\n        if (shouldGenerateSourcemap) {\n          sourcemapPath = await generateSourcemap(port);\n        } else {\n          sourcemapPath = await findSourcemap(ctx, port);\n        }\n\n        // Run without source map\n        if (!sourcemapPath) {\n          logger.warn(\n            'Cannot find source maps, running the transformer without it',\n          );\n          logger.info(\n            'Instructions on how to get source maps: set `bundleInDebug: true` in your app/build.gradle file, inside the `project.ext.react` map.',\n          );\n        }\n      }\n\n      // Run transformer tool to convert from Hermes to Chrome format\n      const events = await transformer(\n        tempFilePath,\n        sourcemapPath,\n        'index.bundle',\n      );\n\n      const transformedFilePath = `${dstPath}/${path.basename(\n        file,\n        '.cpuprofile',\n      )}-converted.json`;\n      fs.writeFileSync(\n        transformedFilePath,\n        JSON.stringify(events, undefined, 4),\n        'utf-8',\n      );\n      logger.success(\n        `Successfully converted to Chrome tracing format and pulled the file to ${transformedFilePath}`,\n      );\n    }\n  } catch (e) {\n    throw e;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}