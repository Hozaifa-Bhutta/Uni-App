{"ast":null,"code":"\"use strict\";\n\nvar path = require(\"path\");\n\nvar list = [/\\/__tests__\\/.*/];\n\nfunction escapeRegExp(pattern) {\n  if (Object.prototype.toString.call(pattern) === \"[object RegExp]\") {\n    return pattern.source.replace(/\\/|\\\\\\//g, \"\\\\\" + path.sep);\n  } else if (typeof pattern === \"string\") {\n    var escaped = pattern.replace(/[\\-\\[\\]\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n    return escaped.replace(/\\//g, \"\\\\\" + path.sep);\n  } else {\n    throw new Error(\"Unexpected exclusion pattern: \" + pattern);\n  }\n}\n\nfunction exclusionList(additionalExclusions) {\n  return new RegExp(\"(\" + (additionalExclusions || []).concat(list).map(escapeRegExp).join(\"|\") + \")$\");\n}\n\nmodule.exports = exclusionList;","map":{"version":3,"names":["path","require","list","escapeRegExp","pattern","Object","prototype","toString","call","source","replace","sep","escaped","Error","exclusionList","additionalExclusions","RegExp","concat","map","join","module","exports"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/metro-config/src/defaults/exclusionList.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\"use strict\";\n\nvar path = require(\"path\");\n\nvar list = [/\\/__tests__\\/.*/];\n\nfunction escapeRegExp(pattern) {\n  if (Object.prototype.toString.call(pattern) === \"[object RegExp]\") {\n    // the forward slash may or may not be escaped in regular expression depends\n    // on if it's in brackets. See this post for details\n    // https://github.com/nodejs/help/issues/3039. The or condition in string\n    // replace regexp is to cover both use cases.\n    // We should replace all forward slashes to proper OS specific separators.\n    // The separator needs to be escaped in the regular expression source string,\n    // hence the '\\\\' prefix.\n    return pattern.source.replace(/\\/|\\\\\\//g, \"\\\\\" + path.sep);\n  } else if (typeof pattern === \"string\") {\n    // Make sure all the special characters used by regular expression are properly\n    // escaped. The string inputs are supposed to match as is.\n    var escaped = pattern.replace(/[\\-\\[\\]\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\"); // convert the '/' into an escaped local file separator. The separator needs\n    // to be escaped in the regular expression source string, hence the '\\\\' prefix.\n\n    return escaped.replace(/\\//g, \"\\\\\" + path.sep);\n  } else {\n    throw new Error(\"Unexpected exclusion pattern: \" + pattern);\n  }\n}\n\nfunction exclusionList(additionalExclusions) {\n  return new RegExp(\n    \"(\" +\n      (additionalExclusions || []).concat(list).map(escapeRegExp).join(\"|\") +\n      \")$\"\n  );\n}\n\nmodule.exports = exclusionList;\n"],"mappings":"AAQA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIC,IAAI,GAAG,CAAC,iBAAD,CAAX;;AAEA,SAASC,YAAT,CAAsBC,OAAtB,EAA+B;EAC7B,IAAIC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,OAA/B,MAA4C,iBAAhD,EAAmE;IAQjE,OAAOA,OAAO,CAACK,MAAR,CAAeC,OAAf,CAAuB,UAAvB,EAAmC,OAAOV,IAAI,CAACW,GAA/C,CAAP;EACD,CATD,MASO,IAAI,OAAOP,OAAP,KAAmB,QAAvB,EAAiC;IAGtC,IAAIQ,OAAO,GAAGR,OAAO,CAACM,OAAR,CAAgB,mCAAhB,EAAqD,MAArD,CAAd;IAGA,OAAOE,OAAO,CAACF,OAAR,CAAgB,KAAhB,EAAuB,OAAOV,IAAI,CAACW,GAAnC,CAAP;EACD,CAPM,MAOA;IACL,MAAM,IAAIE,KAAJ,CAAU,mCAAmCT,OAA7C,CAAN;EACD;AACF;;AAED,SAASU,aAAT,CAAuBC,oBAAvB,EAA6C;EAC3C,OAAO,IAAIC,MAAJ,CACL,MACE,CAACD,oBAAoB,IAAI,EAAzB,EAA6BE,MAA7B,CAAoCf,IAApC,EAA0CgB,GAA1C,CAA8Cf,YAA9C,EAA4DgB,IAA5D,CAAiE,GAAjE,CADF,GAEE,IAHG,CAAP;AAKD;;AAEDC,MAAM,CAACC,OAAP,GAAiBP,aAAjB"},"metadata":{},"sourceType":"script"}