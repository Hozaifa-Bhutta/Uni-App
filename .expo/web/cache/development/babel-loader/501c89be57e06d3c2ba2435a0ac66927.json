{"ast":null,"code":"var fs = require('graceful-fs');\n\nvar path = require('path');\n\nvar invalidWin32Path = require(\"./win32\").invalidWin32Path;\n\nvar o777 = parseInt('0777', 8);\n\nfunction mkdirs(p, opts, callback, made) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else if (!opts || typeof opts !== 'object') {\n    opts = {\n      mode: opts\n    };\n  }\n\n  if (process.platform === 'win32' && invalidWin32Path(p)) {\n    var errInval = new Error(p + ' contains invalid WIN32 path characters.');\n    errInval.code = 'EINVAL';\n    return callback(errInval);\n  }\n\n  var mode = opts.mode;\n  var xfs = opts.fs || fs;\n\n  if (mode === undefined) {\n    mode = o777 & ~process.umask();\n  }\n\n  if (!made) made = null;\n\n  callback = callback || function () {};\n\n  p = path.resolve(p);\n  xfs.mkdir(p, mode, function (er) {\n    if (!er) {\n      made = made || p;\n      return callback(null, made);\n    }\n\n    switch (er.code) {\n      case 'ENOENT':\n        if (path.dirname(p) === p) return callback(er);\n        mkdirs(path.dirname(p), opts, function (er, made) {\n          if (er) callback(er, made);else mkdirs(p, opts, callback, made);\n        });\n        break;\n\n      default:\n        xfs.stat(p, function (er2, stat) {\n          if (er2 || !stat.isDirectory()) callback(er, made);else callback(null, made);\n        });\n        break;\n    }\n  });\n}\n\nmodule.exports = mkdirs;","map":{"version":3,"names":["fs","require","path","invalidWin32Path","o777","parseInt","mkdirs","p","opts","callback","made","mode","process","platform","errInval","Error","code","xfs","undefined","umask","resolve","mkdir","er","dirname","stat","er2","isDirectory","module","exports"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/fs-extra/lib/mkdirs/mkdirs.js"],"sourcesContent":["var fs = require('graceful-fs')\nvar path = require('path')\nvar invalidWin32Path = require('./win32').invalidWin32Path\n\nvar o777 = parseInt('0777', 8)\n\nfunction mkdirs (p, opts, callback, made) {\n  if (typeof opts === 'function') {\n    callback = opts\n    opts = {}\n  } else if (!opts || typeof opts !== 'object') {\n    opts = { mode: opts }\n  }\n\n  if (process.platform === 'win32' && invalidWin32Path(p)) {\n    var errInval = new Error(p + ' contains invalid WIN32 path characters.')\n    errInval.code = 'EINVAL'\n    return callback(errInval)\n  }\n\n  var mode = opts.mode\n  var xfs = opts.fs || fs\n\n  if (mode === undefined) {\n    mode = o777 & (~process.umask())\n  }\n  if (!made) made = null\n\n  callback = callback || function () {}\n  p = path.resolve(p)\n\n  xfs.mkdir(p, mode, function (er) {\n    if (!er) {\n      made = made || p\n      return callback(null, made)\n    }\n    switch (er.code) {\n      case 'ENOENT':\n        if (path.dirname(p) === p) return callback(er)\n        mkdirs(path.dirname(p), opts, function (er, made) {\n          if (er) callback(er, made)\n          else mkdirs(p, opts, callback, made)\n        })\n        break\n\n      // In the case of any other error, just see if there's a dir\n      // there already.  If so, then hooray!  If not, then something\n      // is borked.\n      default:\n        xfs.stat(p, function (er2, stat) {\n          // if the stat fails, then that's super weird.\n          // let the original error be the failure reason.\n          if (er2 || !stat.isDirectory()) callback(er, made)\n          else callback(null, made)\n        })\n        break\n    }\n  })\n}\n\nmodule.exports = mkdirs\n"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,WAAP,CAAmBE,gBAA1C;;AAEA,IAAIC,IAAI,GAAGC,QAAQ,CAAC,MAAD,EAAS,CAAT,CAAnB;;AAEA,SAASC,MAAT,CAAiBC,CAAjB,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,IAApC,EAA0C;EACxC,IAAI,OAAOF,IAAP,KAAgB,UAApB,EAAgC;IAC9BC,QAAQ,GAAGD,IAAX;IACAA,IAAI,GAAG,EAAP;EACD,CAHD,MAGO,IAAI,CAACA,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;IAC5CA,IAAI,GAAG;MAAEG,IAAI,EAAEH;IAAR,CAAP;EACD;;EAED,IAAII,OAAO,CAACC,QAAR,KAAqB,OAArB,IAAgCV,gBAAgB,CAACI,CAAD,CAApD,EAAyD;IACvD,IAAIO,QAAQ,GAAG,IAAIC,KAAJ,CAAUR,CAAC,GAAG,0CAAd,CAAf;IACAO,QAAQ,CAACE,IAAT,GAAgB,QAAhB;IACA,OAAOP,QAAQ,CAACK,QAAD,CAAf;EACD;;EAED,IAAIH,IAAI,GAAGH,IAAI,CAACG,IAAhB;EACA,IAAIM,GAAG,GAAGT,IAAI,CAACR,EAAL,IAAWA,EAArB;;EAEA,IAAIW,IAAI,KAAKO,SAAb,EAAwB;IACtBP,IAAI,GAAGP,IAAI,GAAI,CAACQ,OAAO,CAACO,KAAR,EAAhB;EACD;;EACD,IAAI,CAACT,IAAL,EAAWA,IAAI,GAAG,IAAP;;EAEXD,QAAQ,GAAGA,QAAQ,IAAI,YAAY,CAAE,CAArC;;EACAF,CAAC,GAAGL,IAAI,CAACkB,OAAL,CAAab,CAAb,CAAJ;EAEAU,GAAG,CAACI,KAAJ,CAAUd,CAAV,EAAaI,IAAb,EAAmB,UAAUW,EAAV,EAAc;IAC/B,IAAI,CAACA,EAAL,EAAS;MACPZ,IAAI,GAAGA,IAAI,IAAIH,CAAf;MACA,OAAOE,QAAQ,CAAC,IAAD,EAAOC,IAAP,CAAf;IACD;;IACD,QAAQY,EAAE,CAACN,IAAX;MACE,KAAK,QAAL;QACE,IAAId,IAAI,CAACqB,OAAL,CAAahB,CAAb,MAAoBA,CAAxB,EAA2B,OAAOE,QAAQ,CAACa,EAAD,CAAf;QAC3BhB,MAAM,CAACJ,IAAI,CAACqB,OAAL,CAAahB,CAAb,CAAD,EAAkBC,IAAlB,EAAwB,UAAUc,EAAV,EAAcZ,IAAd,EAAoB;UAChD,IAAIY,EAAJ,EAAQb,QAAQ,CAACa,EAAD,EAAKZ,IAAL,CAAR,CAAR,KACKJ,MAAM,CAACC,CAAD,EAAIC,IAAJ,EAAUC,QAAV,EAAoBC,IAApB,CAAN;QACN,CAHK,CAAN;QAIA;;MAKF;QACEO,GAAG,CAACO,IAAJ,CAASjB,CAAT,EAAY,UAAUkB,GAAV,EAAeD,IAAf,EAAqB;UAG/B,IAAIC,GAAG,IAAI,CAACD,IAAI,CAACE,WAAL,EAAZ,EAAgCjB,QAAQ,CAACa,EAAD,EAAKZ,IAAL,CAAR,CAAhC,KACKD,QAAQ,CAAC,IAAD,EAAOC,IAAP,CAAR;QACN,CALD;QAMA;IAnBJ;EAqBD,CA1BD;AA2BD;;AAEDiB,MAAM,CAACC,OAAP,GAAiBtB,MAAjB"},"metadata":{},"sourceType":"script"}