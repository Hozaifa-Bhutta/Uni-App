{"ast":null,"code":"\"use strict\";\n\nvar chalk = require(\"chalk\");\n\nvar util = require(\"util\");\n\nvar groupStack = [];\nvar collapsedGuardTimer;\n\nmodule.exports = function (terminal, level, mode) {\n  var logFunction = console[level] && level !== \"trace\" ? level : \"log\";\n  var color = level === \"error\" ? chalk.inverse.red : level === \"warn\" ? chalk.inverse.yellow : chalk.inverse.white;\n\n  if (level === \"group\") {\n    groupStack.push(level);\n  } else if (level === \"groupCollapsed\") {\n    groupStack.push(level);\n    clearTimeout(collapsedGuardTimer);\n    collapsedGuardTimer = setTimeout(function () {\n      if (groupStack.includes(\"groupCollapsed\")) {\n        terminal.log(chalk.inverse.yellow.bold(\" WARN \"), \"Expected `console.groupEnd` to be called after `console.groupCollapsed`.\");\n        groupStack.length = 0;\n      }\n    }, 3000);\n    return;\n  } else if (level === \"groupEnd\") {\n    groupStack.pop();\n\n    if (!groupStack.length) {\n      clearTimeout(collapsedGuardTimer);\n    }\n\n    return;\n  }\n\n  if (!groupStack.includes(\"groupCollapsed\")) {\n    for (var _len = arguments.length, data = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      data[_key - 3] = arguments[_key];\n    }\n\n    var lastItem = data[data.length - 1];\n\n    if (typeof lastItem === \"string\") {\n      data[data.length - 1] = lastItem.trimEnd();\n    }\n\n    var modePrefix = !mode || mode == \"BRIDGE\" ? \"\" : \"(\" + mode.toUpperCase() + \") \";\n    terminal.log(color.bold(\" \" + modePrefix + logFunction.toUpperCase() + \" \") + \"\".padEnd(groupStack.length * 2, \" \"), util.format.apply(util, data));\n  }\n};","map":{"version":3,"names":["chalk","require","util","groupStack","collapsedGuardTimer","module","exports","terminal","level","mode","logFunction","console","color","inverse","red","yellow","white","push","clearTimeout","setTimeout","includes","log","bold","length","pop","data","lastItem","trimEnd","modePrefix","toUpperCase","padEnd","format"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/metro/src/lib/logToConsole.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *\n */\n\n/* eslint-disable no-console */\n\"use strict\";\n\nconst chalk = require(\"chalk\");\n\nconst util = require(\"util\");\n\nconst groupStack = [];\nlet collapsedGuardTimer;\n\nmodule.exports = (terminal, level, mode, ...data) => {\n  const logFunction = console[level] && level !== \"trace\" ? level : \"log\";\n  const color =\n    level === \"error\"\n      ? chalk.inverse.red\n      : level === \"warn\"\n      ? chalk.inverse.yellow\n      : chalk.inverse.white;\n\n  if (level === \"group\") {\n    groupStack.push(level);\n  } else if (level === \"groupCollapsed\") {\n    groupStack.push(level);\n    clearTimeout(collapsedGuardTimer); // Inform users that logs get swallowed if they forget to call `groupEnd`.\n\n    collapsedGuardTimer = setTimeout(() => {\n      if (groupStack.includes(\"groupCollapsed\")) {\n        terminal.log(\n          chalk.inverse.yellow.bold(\" WARN \"),\n          \"Expected `console.groupEnd` to be called after `console.groupCollapsed`.\"\n        );\n        groupStack.length = 0;\n      }\n    }, 3000);\n    return;\n  } else if (level === \"groupEnd\") {\n    groupStack.pop();\n\n    if (!groupStack.length) {\n      clearTimeout(collapsedGuardTimer);\n    }\n\n    return;\n  }\n\n  if (!groupStack.includes(\"groupCollapsed\")) {\n    // Remove excess whitespace at the end of a log message, if possible.\n    const lastItem = data[data.length - 1];\n\n    if (typeof lastItem === \"string\") {\n      data[data.length - 1] = lastItem.trimEnd();\n    }\n\n    const modePrefix =\n      !mode || mode == \"BRIDGE\" ? \"\" : `(${mode.toUpperCase()}) `;\n    terminal.log(\n      color.bold(` ${modePrefix}${logFunction.toUpperCase()} `) +\n        \"\".padEnd(groupStack.length * 2, \" \"), // `util.format` actually accepts any arguments.\n      // If the first argument is a string, it tries to format it.\n      // Otherwise, it just concatenates all arguments.\n      // $FlowIssue[incompatible-call] util.format expected the first argument to be a string\n      util.format(...data)\n    );\n  }\n};\n"],"mappings":"AAWA;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAME,UAAU,GAAG,EAAnB;AACA,IAAIC,mBAAJ;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAACC,QAAD,EAAWC,KAAX,EAAkBC,IAAlB,EAAoC;EACnD,IAAMC,WAAW,GAAGC,OAAO,CAACH,KAAD,CAAP,IAAkBA,KAAK,KAAK,OAA5B,GAAsCA,KAAtC,GAA8C,KAAlE;EACA,IAAMI,KAAK,GACTJ,KAAK,KAAK,OAAV,GACIR,KAAK,CAACa,OAAN,CAAcC,GADlB,GAEIN,KAAK,KAAK,MAAV,GACAR,KAAK,CAACa,OAAN,CAAcE,MADd,GAEAf,KAAK,CAACa,OAAN,CAAcG,KALpB;;EAOA,IAAIR,KAAK,KAAK,OAAd,EAAuB;IACrBL,UAAU,CAACc,IAAX,CAAgBT,KAAhB;EACD,CAFD,MAEO,IAAIA,KAAK,KAAK,gBAAd,EAAgC;IACrCL,UAAU,CAACc,IAAX,CAAgBT,KAAhB;IACAU,YAAY,CAACd,mBAAD,CAAZ;IAEAA,mBAAmB,GAAGe,UAAU,CAAC,YAAM;MACrC,IAAIhB,UAAU,CAACiB,QAAX,CAAoB,gBAApB,CAAJ,EAA2C;QACzCb,QAAQ,CAACc,GAAT,CACErB,KAAK,CAACa,OAAN,CAAcE,MAAd,CAAqBO,IAArB,CAA0B,QAA1B,CADF,EAEE,0EAFF;QAIAnB,UAAU,CAACoB,MAAX,GAAoB,CAApB;MACD;IACF,CAR+B,EAQ7B,IAR6B,CAAhC;IASA;EACD,CAdM,MAcA,IAAIf,KAAK,KAAK,UAAd,EAA0B;IAC/BL,UAAU,CAACqB,GAAX;;IAEA,IAAI,CAACrB,UAAU,CAACoB,MAAhB,EAAwB;MACtBL,YAAY,CAACd,mBAAD,CAAZ;IACD;;IAED;EACD;;EAED,IAAI,CAACD,UAAU,CAACiB,QAAX,CAAoB,gBAApB,CAAL,EAA4C;IAAA,kCAnCFK,IAmCE;MAnCFA,IAmCE;IAAA;;IAE1C,IAAMC,QAAQ,GAAGD,IAAI,CAACA,IAAI,CAACF,MAAL,GAAc,CAAf,CAArB;;IAEA,IAAI,OAAOG,QAAP,KAAoB,QAAxB,EAAkC;MAChCD,IAAI,CAACA,IAAI,CAACF,MAAL,GAAc,CAAf,CAAJ,GAAwBG,QAAQ,CAACC,OAAT,EAAxB;IACD;;IAED,IAAMC,UAAU,GACd,CAACnB,IAAD,IAASA,IAAI,IAAI,QAAjB,GAA4B,EAA5B,SAAqCA,IAAI,CAACoB,WAAL,EAArC,OADF;IAEAtB,QAAQ,CAACc,GAAT,CACET,KAAK,CAACU,IAAN,OAAeM,UAAf,GAA4BlB,WAAW,CAACmB,WAAZ,EAA5B,UACE,GAAGC,MAAH,CAAU3B,UAAU,CAACoB,MAAX,GAAoB,CAA9B,EAAiC,GAAjC,CAFJ,EAMErB,IAAI,CAAC6B,MAAL,OAAA7B,IAAI,EAAWuB,IAAX,CANN;EAQD;AACF,CAtDD"},"metadata":{},"sourceType":"script"}