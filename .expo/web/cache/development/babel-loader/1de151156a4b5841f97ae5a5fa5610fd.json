{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readConfigFromDisk = readConfigFromDisk;\nexports.readDependencyConfigFromDisk = readDependencyConfigFromDisk;\n\nfunction _cosmiconfig() {\n  var data = _interopRequireDefault(require(\"cosmiconfig\"));\n\n  _cosmiconfig = function _cosmiconfig() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _errors = require(\"./errors\");\n\nvar schema = _interopRequireWildcard(require(\"./schema\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar searchPlaces = ['react-native.config.js'];\n\nfunction readConfigFromDisk(rootFolder) {\n  var explorer = (0, _cosmiconfig().default)('react-native', {\n    searchPlaces: searchPlaces,\n    stopDir: rootFolder\n  });\n  var searchResult = explorer.searchSync(rootFolder);\n  var config = searchResult ? searchResult.config : undefined;\n  var result = schema.projectConfig.validate(config);\n\n  if (result.error) {\n    throw new _errors.JoiError(result.error);\n  }\n\n  return result.value;\n}\n\nfunction readDependencyConfigFromDisk(rootFolder) {\n  var explorer = (0, _cosmiconfig().default)('react-native', {\n    stopDir: rootFolder,\n    searchPlaces: searchPlaces\n  });\n  var searchResult = explorer.searchSync(rootFolder);\n  var config = searchResult ? searchResult.config : emptyDependencyConfig;\n  var result = schema.dependencyConfig.validate(config);\n\n  if (result.error) {\n    throw new _errors.JoiError(result.error);\n  }\n\n  return result.value;\n}\n\nvar emptyDependencyConfig = {\n  dependency: {\n    platforms: {}\n  },\n  commands: [],\n  platforms: {}\n};","map":{"version":3,"sources":["../src/readConfigFromDisk.ts"],"names":["searchPlaces","explorer","stopDir","rootFolder","searchResult","config","result","schema","JoiError","emptyDependencyConfig","dependency","platforms","commands"],"mappings":";;;;;;;;AAAA,SAAA,YAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;EAAA,YAAA,GAAA,wBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,IAAA,OAAA,GAAA,OAAA,YAAA;;AACA,IAAA,MAAA,GAAA,uBAAA,CAAA,OAAA,YAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAMA,YAAY,GAAG,CAArB,wBAAqB,CAArB;;AAMO,SAAA,kBAAA,CAAA,UAAA,EAA4D;EACjE,IAAMC,QAAQ,GAAG,CAAA,GAAA,YAAA,GAAA,OAAA,EAAA,cAAA,EAA4B;IAC3CD,YAD2C,EAC3CA,YAD2C;IAE3CE,OAAO,EAAEC;EAFkC,CAA5B,CAAjB;EAKA,IAAMC,YAAY,GAAGH,QAAQ,CAARA,UAAAA,CAArB,UAAqBA,CAArB;EACA,IAAMI,MAAM,GAAGD,YAAY,GAAGA,YAAY,CAAf,MAAA,GAA3B,SAAA;EACA,IAAME,MAAM,GAAGC,MAAM,CAANA,aAAAA,CAAAA,QAAAA,CAAf,MAAeA,CAAf;;EAEA,IAAID,MAAM,CAAV,KAAA,EAAkB;IAChB,MAAM,IAAIE,OAAAA,CAAJ,QAAA,CAAaF,MAAM,CAAzB,KAAM,CAAN;EACD;;EAED,OAAOA,MAAM,CAAb,KAAA;AACD;;AAMM,SAAA,4BAAA,CAAA,UAAA,EAEiB;EACtB,IAAML,QAAQ,GAAG,CAAA,GAAA,YAAA,GAAA,OAAA,EAAA,cAAA,EAA4B;IAC3CC,OAAO,EADoC,UAAA;IAE3CF,YAAAA,EAAAA;EAF2C,CAA5B,CAAjB;EAKA,IAAMI,YAAY,GAAGH,QAAQ,CAARA,UAAAA,CAArB,UAAqBA,CAArB;EACA,IAAMI,MAAM,GAAGD,YAAY,GAAGA,YAAY,CAAf,MAAA,GAA3B,qBAAA;EAEA,IAAME,MAAM,GAAGC,MAAM,CAANA,gBAAAA,CAAAA,QAAAA,CAAf,MAAeA,CAAf;;EAEA,IAAID,MAAM,CAAV,KAAA,EAAkB;IAChB,MAAM,IAAIE,OAAAA,CAAJ,QAAA,CAAaF,MAAM,CAAzB,KAAM,CAAN;EACD;;EAED,OAAOA,MAAM,CAAb,KAAA;AACD;;AAED,IAAMG,qBAAqB,GAAG;EAC5BC,UAAU,EAAE;IACVC,SAAS,EAAE;EADD,CADgB;EAI5BC,QAAQ,EAJoB,EAAA;EAK5BD,SAAS,EAAE;AALiB,CAA9B","sourcesContent":["import cosmiconfig from 'cosmiconfig';\nimport {JoiError} from './errors';\nimport * as schema from './schema';\nimport {\n  UserConfig,\n  UserDependencyConfig,\n} from '@react-native-community/cli-types';\n\n/**\n * Places to look for the configuration file.\n */\nconst searchPlaces = ['react-native.config.js'];\n\n/**\n * Reads a project configuration as defined by the user in the current\n * workspace.\n */\nexport function readConfigFromDisk(rootFolder: string): UserConfig {\n  const explorer = cosmiconfig('react-native', {\n    searchPlaces,\n    stopDir: rootFolder,\n  });\n\n  const searchResult = explorer.searchSync(rootFolder);\n  const config = searchResult ? searchResult.config : undefined;\n  const result = schema.projectConfig.validate(config);\n\n  if (result.error) {\n    throw new JoiError(result.error);\n  }\n\n  return result.value as UserConfig;\n}\n\n/**\n * Reads a dependency configuration as defined by the developer\n * inside `node_modules`.\n */\nexport function readDependencyConfigFromDisk(\n  rootFolder: string,\n): UserDependencyConfig {\n  const explorer = cosmiconfig('react-native', {\n    stopDir: rootFolder,\n    searchPlaces,\n  });\n\n  const searchResult = explorer.searchSync(rootFolder);\n  const config = searchResult ? searchResult.config : emptyDependencyConfig;\n\n  const result = schema.dependencyConfig.validate(config);\n\n  if (result.error) {\n    throw new JoiError(result.error);\n  }\n\n  return result.value as UserDependencyConfig;\n}\n\nconst emptyDependencyConfig = {\n  dependency: {\n    platforms: {},\n  },\n  commands: [],\n  platforms: {},\n};\n"]},"metadata":{},"sourceType":"script"}