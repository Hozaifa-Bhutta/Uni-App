{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.enableAMDH = exports.enableHAXM = exports.enableWHPX = exports.getBestHypervisor = exports.createAVD = exports.installComponent = exports.getAndroidSdkRootInstallation = exports.getUserAndroidPath = void 0;\n\nfunction _fsExtra() {\n  var data = require(\"fs-extra\");\n\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = require(\"path\");\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _executeWinCommand = require(\"./executeWinCommand\");\n\nvar _processorType = require(\"./processorType\");\n\nvar getUserAndroidPath = function getUserAndroidPath() {\n  return (0, _path().join)(process.env.LOCALAPPDATA || '', 'Android');\n};\n\nexports.getUserAndroidPath = getUserAndroidPath;\n\nvar getAndroidSdkRootInstallation = function getAndroidSdkRootInstallation() {\n  var env = process.env.ANDROID_SDK_ROOT || process.env.ANDROID_HOME;\n  var installPath = env ? env : (0, _path().join)(getUserAndroidPath(), 'Sdk');\n\n  if ((0, _fsExtra().pathExistsSync)(installPath)) {\n    return installPath;\n  } else {\n    return '';\n  }\n};\n\nexports.getAndroidSdkRootInstallation = getAndroidSdkRootInstallation;\n\nvar installComponent = function installComponent(component, androidSdkRoot) {\n  return new Promise(function (done, error) {\n    var _child$stdout, _child$stderr;\n\n    var sdkmanager = (0, _path().join)(androidSdkRoot, 'tools', 'bin', 'sdkmanager.bat');\n    var command = \"\\\"\" + sdkmanager + \"\\\" --sdk_root=\\\"\" + androidSdkRoot + \"\\\" \\\"\" + component + \"\\\"\";\n    var child = (0, _executeWinCommand.executeCommand)(command);\n    var stderr = '';\n    (_child$stdout = child.stdout) === null || _child$stdout === void 0 ? void 0 : _child$stdout.on('data', function (data) {\n      if (data.includes('(y/N)')) {\n        var _child$stdin;\n\n        (_child$stdin = child.stdin) === null || _child$stdin === void 0 ? void 0 : _child$stdin.write('y\\n');\n      }\n    });\n    (_child$stderr = child.stderr) === null || _child$stderr === void 0 ? void 0 : _child$stderr.on('data', function (data) {\n      stderr += data.toString('utf-8');\n    });\n    child.on('close', function (exitStatus) {\n      if (exitStatus === 0) {\n        done();\n      } else {\n        error({\n          stderr: stderr\n        });\n      }\n    });\n    child.on('error', error);\n  });\n};\n\nexports.installComponent = installComponent;\n\nvar parseHypervisor = function parseHypervisor(status, customHypervisor) {\n  if (status.includes('is not installed, but Windows Hypervisor Platform is available.')) {\n    return {\n      hypervisor: 'WHPX',\n      installed: false\n    };\n  }\n\n  if (/WHPX \\((\\d|\\.)+\\) is installed and usable\\./.test(status)) {\n    return {\n      hypervisor: 'WHPX',\n      installed: true\n    };\n  }\n\n  if (/is installed and usable\\./.test(status)) {\n    return {\n      hypervisor: customHypervisor,\n      installed: true\n    };\n  }\n\n  if (status.includes(\"Your CPU: 'AuthenticAMD'\")) {\n    return {\n      hypervisor: customHypervisor,\n      installed: false\n    };\n  }\n\n  if (status.includes('is not installed on this machine')) {\n    return {\n      hypervisor: 'none',\n      installed: false\n    };\n  }\n\n  return null;\n};\n\nvar getEmulatorAccelOutputInformation = function _callee(androidSDKRoot) {\n  var _await, stdout, _stdout;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap((0, _executeWinCommand.executeCommand)(\"\\\"\" + (0, _path().join)(androidSDKRoot, 'emulator', 'emulator-check.exe') + \"\\\" accel\"));\n\n        case 3:\n          _await = _context.sent;\n          stdout = _await.stdout;\n          return _context.abrupt(\"return\", stdout);\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _stdout = _context.t0.stdout;\n          return _context.abrupt(\"return\", _stdout);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\n\nvar createAVD = function _callee2(androidSDKRoot, name, device, image) {\n  var abi, tag, avdmanager, _await2, stdout, configPath, content, updatedContent, stderr;\n\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          abi = image.includes('x86_64') ? 'x86_64' : 'x86';\n          tag = image.includes('google_apis') ? 'google_apis' : 'generic';\n          avdmanager = (0, _path().join)(androidSDKRoot, 'tools', 'bin', 'avdmanager.bat');\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap((0, _executeWinCommand.executeCommand)(avdmanager + \" -s create avd --force --name \\\"\" + name + \"\\\" --device \\\"\" + device + \"\\\" --package \\\"\" + image + \"\\\" --tag \\\"\" + tag + \"\\\" --abi \\\"\" + abi + \"\\\"\"));\n\n        case 6:\n          _await2 = _context2.sent;\n          stdout = _await2.stdout;\n          configPath = (0, _path().join)(process.env.HOMEPATH || '', '.android', 'avd', name + \".avd\", 'config.ini');\n          _context2.next = 11;\n          return _regeneratorRuntime.awrap((0, _fsExtra().readFile)(configPath, 'utf-8'));\n\n        case 11:\n          content = _context2.sent;\n          updatedContent = content.replace(/Sdk\\\\system-images/g, 'system-images');\n          _context2.next = 15;\n          return _regeneratorRuntime.awrap((0, _fsExtra().writeFile)(configPath, updatedContent, 'utf-8'));\n\n        case 15:\n          return _context2.abrupt(\"return\", stdout);\n\n        case 18:\n          _context2.prev = 18;\n          _context2.t0 = _context2[\"catch\"](0);\n          stderr = _context2.t0.stderr;\n          return _context2.abrupt(\"return\", stderr);\n\n        case 22:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 18]], Promise);\n};\n\nexports.createAVD = createAVD;\n\nvar getBestHypervisor = function _callee3(androidSDKRoot) {\n  var customHypervisor, stdout, lines, _iterator, _step, line, hypervisor;\n\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          customHypervisor = (0, _processorType.getProcessorType)() === 'Intel' ? 'HAXM' : 'AMDH';\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(getEmulatorAccelOutputInformation(androidSDKRoot));\n\n        case 3:\n          stdout = _context3.sent;\n          lines = stdout.split('\\n');\n          _iterator = _createForOfIteratorHelperLoose(lines);\n\n        case 6:\n          if ((_step = _iterator()).done) {\n            _context3.next = 13;\n            break;\n          }\n\n          line = _step.value;\n          hypervisor = parseHypervisor(line, customHypervisor);\n\n          if (!hypervisor) {\n            _context3.next = 11;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", hypervisor);\n\n        case 11:\n          _context3.next = 6;\n          break;\n\n        case 13:\n          return _context3.abrupt(\"return\", {\n            hypervisor: 'none',\n            installed: false\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.getBestHypervisor = getBestHypervisor;\n\nvar enableWHPX = function enableWHPX() {\n  return (0, _executeWinCommand.executeCommand)('DISM /Quiet /NoRestart /Online /Enable-Feature /All /FeatureName:Microsoft-Hyper-V /FeatureName:HypervisorPlatform', true);\n};\n\nexports.enableWHPX = enableWHPX;\n\nvar enableHAXM = function _callee4(androidSdkInstallPath) {\n  return _regeneratorRuntime.async(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(installComponent('extras;intel;Hardware_Accelerated_Execution_Manager', androidSdkInstallPath));\n\n        case 2:\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap((0, _executeWinCommand.executeCommand)((0, _path().join)(androidSdkInstallPath, 'Sdk', 'extras', 'intel', 'Hardware_Accelerated_Execution_Manager', 'silent_install.bat')));\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.enableHAXM = enableHAXM;\n\nvar enableAMDH = function _callee5(androidSdkInstallPath) {\n  return _regeneratorRuntime.async(function _callee5$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(installComponent('extras;google;Android_Emulator_Hypervisor_Driver', androidSdkInstallPath));\n\n        case 2:\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap((0, _executeWinCommand.executeCommand)((0, _path().join)(androidSdkInstallPath, 'Sdk', 'extras', 'google', 'Android_Emulator_Hypervisor_Driver', 'silent_install.bat')));\n\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.enableAMDH = enableAMDH;","map":{"version":3,"sources":["../../../src/tools/windows/androidWinHelpers.ts"],"names":["getUserAndroidPath","process","getAndroidSdkRootInstallation","env","installPath","installComponent","sdkmanager","command","androidSdkRoot","child","stderr","data","exitStatus","done","error","parseHypervisor","status","hypervisor","installed","getEmulatorAccelOutputInformation","stdout","createAVD","abi","image","tag","avdmanager","name","device","configPath","content","updatedContent","getBestHypervisor","customHypervisor","lines","enableWHPX","enableHAXM","enableAMDH"],"mappings":"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","sourcesContent":["import {readFile, writeFile, pathExistsSync} from 'fs-extra';\nimport {join} from 'path';\nimport {executeCommand} from './executeWinCommand';\nimport {getProcessorType} from './processorType';\n\ntype HypervisorStatus = {\n  hypervisor: 'WHPX' | 'HAXM' | 'AMDH' | 'none';\n  installed: boolean;\n};\n\n/**\n * Returns the path to where all Android related things should be installed\n * locally to the user.\n */\nexport const getUserAndroidPath = () => {\n  return join(process.env.LOCALAPPDATA || '', 'Android');\n};\n\n/**\n * Deals with ANDROID_HOME, ANDROID_SDK_ROOT or generates a new one\n */\nexport const getAndroidSdkRootInstallation = () => {\n  const env = process.env.ANDROID_SDK_ROOT || process.env.ANDROID_HOME;\n  const installPath = env\n    ? // Happens if previous installations or not fully completed\n      env\n    : // All Android zip files have a root folder, using `Android` as the common place\n      join(getUserAndroidPath(), 'Sdk');\n\n  if (pathExistsSync(installPath)) {\n    return installPath;\n  } else {\n    return '';\n  }\n};\n\n/**\n * Installs an Android component (e.g.: `platform-tools`, `emulator`)\n * using the `sdkmanager` tool and automatically accepting the licenses.\n */\nexport const installComponent = (component: string, androidSdkRoot: string) => {\n  return new Promise((done, error) => {\n    const sdkmanager = join(androidSdkRoot, 'tools', 'bin', 'sdkmanager.bat');\n\n    const command = `\"${sdkmanager}\" --sdk_root=\"${androidSdkRoot}\" \"${component}\"`;\n\n    const child = executeCommand(command);\n    let stderr = '';\n\n    child.stdout?.on('data', (data) => {\n      if (data.includes('(y/N)')) {\n        child.stdin?.write('y\\n');\n      }\n    });\n\n    child.stderr?.on('data', (data) => {\n      stderr += data.toString('utf-8');\n    });\n\n    child.on('close', (exitStatus) => {\n      if (exitStatus === 0) {\n        done();\n      } else {\n        error({stderr});\n      }\n    });\n    child.on('error', error);\n  });\n};\n\n/**\n * For the given custom Hypervisor and the output of `emulator-check accel`\n * returns the preferred Hypervisor to use and its installation status.\n * The recommendation order is:\n * 1. WHPX\n * 2. HAXM if Intel\n * 3. AMDH if AMD\n */\nconst parseHypervisor = (\n  status: string,\n  customHypervisor: 'HAXM' | 'AMDH',\n): HypervisorStatus | null => {\n  /**\n   * Messages:\n   * Android Emulator requires an Intel processor with VT-x and NX support.  Your CPU: 'AuthenticAMD'\n   * HAXM is not installed, but Windows Hypervisor Platform is available.\n   * WHPX (10.0.19041) is installed and usable.\n   * * This message outputs for WHPX and when the AMD Hypervisor is installed\n   * HAXM version 6.2.1 (4) is installed and usable.\n   * HAXM is not installed on this machine\n   */\n\n  if (\n    status.includes(\n      'is not installed, but Windows Hypervisor Platform is available.',\n    )\n  ) {\n    return {\n      hypervisor: 'WHPX',\n      installed: false,\n    };\n  }\n\n  if (/WHPX \\((\\d|\\.)+\\) is installed and usable\\./.test(status)) {\n    return {\n      hypervisor: 'WHPX',\n      installed: true,\n    };\n  }\n\n  if (/is installed and usable\\./.test(status)) {\n    return {\n      hypervisor: customHypervisor,\n      installed: true,\n    };\n  }\n\n  if (status.includes(\"Your CPU: 'AuthenticAMD'\")) {\n    return {\n      hypervisor: customHypervisor,\n      installed: false,\n    };\n  }\n\n  if (status.includes('is not installed on this machine')) {\n    return {\n      hypervisor: 'none',\n      installed: false,\n    };\n  }\n\n  return null;\n};\n\nconst getEmulatorAccelOutputInformation = async (androidSDKRoot: string) => {\n  /**\n   * The output of the following command is something like:\n   *\n   * ```\n   * accel:\n   * 0\n   * WHPX (10.0.19041) is installed and usable.\n   * accel\n   * ```\n   *\n   * If it fails it will still output to stdout with a similar format:\n   *\n   * ```\n   * accel:\n   * 1\n   * Android Emulator does not support nested virtualization.  Your VM host: 'Microsoft Hv' (Hyper-V)\n   * accel\n   * ```\n   *\n   */\n\n  try {\n    const {stdout} = await executeCommand(\n      `\"${join(androidSDKRoot, 'emulator', 'emulator-check.exe')}\" accel`,\n    );\n\n    return stdout;\n  } catch (e) {\n    const {stdout} = e;\n\n    return stdout;\n  }\n};\n\n/**\n * Creates a new Android Virtual Device in the default folder with the\n * name, device and system image passed by parameter.\n */\nexport const createAVD = async (\n  androidSDKRoot: string,\n  name: string,\n  device: string,\n  image: string,\n) => {\n  try {\n    const abi = image.includes('x86_64') ? 'x86_64' : 'x86';\n    const tag = image.includes('google_apis') ? 'google_apis' : 'generic';\n    const avdmanager = join(androidSDKRoot, 'tools', 'bin', 'avdmanager.bat');\n\n    const {stdout} = await executeCommand(\n      `${avdmanager} -s create avd --force --name \"${name}\" --device \"${device}\" --package \"${image}\" --tag \"${tag}\" --abi \"${abi}\"`,\n    );\n\n    // For some reason `image.sysdir.1` in `config.ini` points to the wrong location and needs to be updated\n    const configPath = join(\n      process.env.HOMEPATH || '',\n      '.android',\n      'avd',\n      `${name}.avd`,\n      'config.ini',\n    );\n\n    const content = await readFile(configPath, 'utf-8');\n    const updatedContent = content.replace(\n      /Sdk\\\\system-images/g,\n      'system-images',\n    );\n\n    await writeFile(configPath, updatedContent, 'utf-8');\n\n    return stdout;\n  } catch (e) {\n    const {stderr} = e;\n\n    return stderr;\n  }\n};\n\n/**\n * Returns what hypervisor should be installed for the Android emulator\n * using [Microsoft's official\n * documentation](https://docs.microsoft.com/en-us/xamarin/android/get-started/installation/android-emulator/hardware-acceleration?pivots=windows)\n * as a reference.\n */\nexport const getBestHypervisor = async (\n  androidSDKRoot: string,\n): Promise<HypervisorStatus> => {\n  const customHypervisor = getProcessorType() === 'Intel' ? 'HAXM' : 'AMDH';\n\n  const stdout = await getEmulatorAccelOutputInformation(androidSDKRoot);\n\n  const lines = stdout.split('\\n');\n\n  for (const line of lines) {\n    const hypervisor = parseHypervisor(line, customHypervisor);\n\n    if (hypervisor) {\n      return hypervisor;\n    }\n  }\n\n  // Couldn't identify the best one to run so not doing anything\n  return {\n    hypervisor: 'none',\n    installed: false,\n  };\n};\n\n/**\n * Enables the Windows HypervisorPlatform and Hyper-V features.\n * Will prompt the User Account Control (UAC)\n */\nexport const enableWHPX = () => {\n  return executeCommand(\n    'DISM /Quiet /NoRestart /Online /Enable-Feature /All /FeatureName:Microsoft-Hyper-V /FeatureName:HypervisorPlatform',\n    true,\n  );\n};\n\n/**\n * Installs and enables the [HAXM](https://github.com/intel/haxm)\n * version available through the Android SDK manager.\n * @param androidSdkInstallPath The path to the Android SDK installation\n */\nexport const enableHAXM = async (androidSdkInstallPath: string) => {\n  await installComponent(\n    'extras;intel;Hardware_Accelerated_Execution_Manager',\n    androidSdkInstallPath,\n  );\n\n  await executeCommand(\n    join(\n      androidSdkInstallPath,\n      'Sdk',\n      'extras',\n      'intel',\n      'Hardware_Accelerated_Execution_Manager',\n      'silent_install.bat',\n    ),\n  );\n};\n\n/**\n * Installs and enables the\n * [Hypervisor Driver for AMD Processors](https://androidstudio.googleblog.com/2019/10/android-emulator-hypervisor-driver-for.html)\n * version available through the Android SDK manager.\n * @param androidSdkInstallPath The path to the Android SDK installation\n */\nexport const enableAMDH = async (androidSdkInstallPath: string) => {\n  await installComponent(\n    'extras;google;Android_Emulator_Hypervisor_Driver',\n    androidSdkInstallPath,\n  );\n\n  await executeCommand(\n    join(\n      androidSdkInstallPath,\n      'Sdk',\n      'extras',\n      'google',\n      'Android_Emulator_Hypervisor_Driver',\n      'silent_install.bat',\n    ),\n  );\n};\n"]},"metadata":{},"sourceType":"script"}