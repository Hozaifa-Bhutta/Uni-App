{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.npm = exports.yarn = exports.packageManager = void 0;\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _versionRanges = _interopRequireDefault(require(\"../versionRanges\"));\n\nvar _checkInstallation = require(\"../checkInstallation\");\n\nvar _install = require(\"../install\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar packageManager = function () {\n  if (_fs().default.existsSync('yarn.lock')) {\n    return _checkInstallation.PACKAGE_MANAGERS.YARN;\n  }\n\n  if (_fs().default.existsSync('package-lock.json')) {\n    return _checkInstallation.PACKAGE_MANAGERS.NPM;\n  }\n\n  return undefined;\n}();\n\nexports.packageManager = packageManager;\nvar yarn = {\n  label: 'yarn',\n  getDiagnostics: function getDiagnostics(_ref) {\n    var Binaries;\n    return _regeneratorRuntime.async(function getDiagnostics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Binaries = _ref.Binaries;\n            return _context.abrupt(\"return\", {\n              needsToBeFixed: (0, _checkInstallation.doesSoftwareNeedToBeFixed)({\n                version: Binaries.Yarn.version,\n                versionRange: _versionRanges.default.YARN\n              }),\n              version: Binaries.Yarn.version,\n              versionRange: _versionRanges.default.YARN\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  visible: packageManager === _checkInstallation.PACKAGE_MANAGERS.YARN || packageManager === undefined,\n  runAutomaticFix: function runAutomaticFix(_ref2) {\n    var loader;\n    return _regeneratorRuntime.async(function runAutomaticFix$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            loader = _ref2.loader;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap((0, _install.install)({\n              pkg: 'yarn',\n              label: 'yarn',\n              url: 'https://yarnpkg.com/docs/install',\n              loader: loader\n            }));\n\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexports.yarn = yarn;\nvar npm = {\n  label: 'npm',\n  getDiagnostics: function getDiagnostics(_ref3) {\n    var Binaries;\n    return _regeneratorRuntime.async(function getDiagnostics$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            Binaries = _ref3.Binaries;\n            return _context3.abrupt(\"return\", {\n              needsToBeFixed: (0, _checkInstallation.doesSoftwareNeedToBeFixed)({\n                version: Binaries.npm.version,\n                versionRange: _versionRanges.default.NPM\n              }),\n              version: Binaries.npm.version,\n              versionRange: _versionRanges.default.NPM\n            });\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  visible: packageManager === _checkInstallation.PACKAGE_MANAGERS.NPM || packageManager === undefined,\n  runAutomaticFix: function runAutomaticFix(_ref4) {\n    var loader;\n    return _regeneratorRuntime.async(function runAutomaticFix$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            loader = _ref4.loader;\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap((0, _install.install)({\n              pkg: 'node',\n              label: 'node',\n              url: 'https://nodejs.org/',\n              loader: loader\n            }));\n\n          case 3:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexports.npm = npm;","map":{"version":3,"sources":["../../../src/tools/healthchecks/packageManagers.ts"],"names":["packageManager","fs","PACKAGE_MANAGERS","yarn","label","getDiagnostics","Binaries","needsToBeFixed","version","versionRange","versionRanges","YARN","visible","runAutomaticFix","loader","pkg","url","npm","NPM"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport versionRanges from '../versionRanges';\nimport {\n  PACKAGE_MANAGERS,\n  doesSoftwareNeedToBeFixed,\n} from '../checkInstallation';\nimport {install} from '../install';\nimport {HealthCheckInterface} from '../../types';\n\nconst packageManager = (() => {\n  if (fs.existsSync('yarn.lock')) {\n    return PACKAGE_MANAGERS.YARN;\n  }\n\n  if (fs.existsSync('package-lock.json')) {\n    return PACKAGE_MANAGERS.NPM;\n  }\n\n  return undefined;\n})();\n\nconst yarn: HealthCheckInterface = {\n  label: 'yarn',\n  getDiagnostics: async ({Binaries}) => ({\n    needsToBeFixed: doesSoftwareNeedToBeFixed({\n      version: Binaries.Yarn.version,\n      versionRange: versionRanges.YARN,\n    }),\n    version: Binaries.Yarn.version,\n    versionRange: versionRanges.YARN,\n  }),\n  // Only show `yarn` if there's a `yarn.lock` file in the current directory\n  // or if we can't identify that the user uses yarn or npm\n  visible:\n    packageManager === PACKAGE_MANAGERS.YARN || packageManager === undefined,\n  runAutomaticFix: async ({loader}) =>\n    await install({\n      pkg: 'yarn',\n      label: 'yarn',\n      url: 'https://yarnpkg.com/docs/install',\n      loader,\n    }),\n};\n\nconst npm: HealthCheckInterface = {\n  label: 'npm',\n  getDiagnostics: async ({Binaries}) => ({\n    needsToBeFixed: doesSoftwareNeedToBeFixed({\n      version: Binaries.npm.version,\n      versionRange: versionRanges.NPM,\n    }),\n    version: Binaries.npm.version,\n    versionRange: versionRanges.NPM,\n  }),\n  // Only show `yarn` if there's a `package-lock.json` file in the current directory\n  // or if we can't identify that the user uses yarn or npm\n  visible:\n    packageManager === PACKAGE_MANAGERS.NPM || packageManager === undefined,\n  runAutomaticFix: async ({loader}) =>\n    await install({\n      pkg: 'node',\n      label: 'node',\n      url: 'https://nodejs.org/',\n      loader,\n    }),\n};\n\nexport {packageManager, yarn, npm};\n"]},"metadata":{},"sourceType":"script"}