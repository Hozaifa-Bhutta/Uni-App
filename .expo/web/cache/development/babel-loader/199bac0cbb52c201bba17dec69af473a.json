{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar getSourceMapInfo = require(\"./helpers/getSourceMapInfo\");\n\nvar _require = require(\"./helpers/js\"),\n    isJsModule = _require.isJsModule;\n\nvar _require2 = require(\"metro-source-map\"),\n    fromRawMappings = _require2.fromRawMappings,\n    fromRawMappingsNonBlocking = _require2.fromRawMappingsNonBlocking;\n\nfunction getSourceMapInfosImpl(isBlocking, onDone, modules, options) {\n  var sourceMapInfos = [];\n  var modulesToProcess = modules.filter(isJsModule).filter(options.processModuleFilter);\n\n  function processNextModule() {\n    if (modulesToProcess.length === 0) {\n      return true;\n    }\n\n    var mod = modulesToProcess.shift();\n    var info = getSourceMapInfo(mod, {\n      excludeSource: options.excludeSource\n    });\n    sourceMapInfos.push(info);\n    return false;\n  }\n\n  function workLoop() {\n    var time = process.hrtime();\n\n    while (true) {\n      var isDone = processNextModule();\n\n      if (isDone) {\n        onDone(sourceMapInfos);\n        break;\n      }\n\n      if (!isBlocking) {\n        var diff = process.hrtime(time);\n        var NS_IN_MS = 1000000;\n\n        if (diff[1] > 50 * NS_IN_MS) {\n          setImmediate(workLoop);\n          break;\n        }\n      }\n    }\n  }\n\n  workLoop();\n}\n\nfunction sourceMapGenerator(modules, options) {\n  var sourceMapInfos;\n  getSourceMapInfosImpl(true, function (infos) {\n    sourceMapInfos = infos;\n  }, modules, options);\n\n  if (sourceMapInfos == null) {\n    throw new Error(\"Expected getSourceMapInfosImpl() to finish synchronously.\");\n  }\n\n  return fromRawMappings(sourceMapInfos);\n}\n\nfunction sourceMapGeneratorNonBlocking(modules, options) {\n  var sourceMapInfos;\n  return _regeneratorRuntime.async(function sourceMapGeneratorNonBlocking$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n            getSourceMapInfosImpl(false, resolve, modules, options);\n          }));\n\n        case 2:\n          sourceMapInfos = _context.sent;\n          return _context.abrupt(\"return\", fromRawMappingsNonBlocking(sourceMapInfos));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nmodule.exports = {\n  sourceMapGenerator: sourceMapGenerator,\n  sourceMapGeneratorNonBlocking: sourceMapGeneratorNonBlocking\n};","map":{"version":3,"names":["getSourceMapInfo","require","isJsModule","fromRawMappings","fromRawMappingsNonBlocking","getSourceMapInfosImpl","isBlocking","onDone","modules","options","sourceMapInfos","modulesToProcess","filter","processModuleFilter","processNextModule","length","mod","shift","info","excludeSource","push","workLoop","time","process","hrtime","isDone","diff","NS_IN_MS","setImmediate","sourceMapGenerator","infos","Error","sourceMapGeneratorNonBlocking","Promise","resolve","module","exports"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/metro/src/DeltaBundler/Serializers/sourceMapGenerator.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\"use strict\";\n\nconst getSourceMapInfo = require(\"./helpers/getSourceMapInfo\");\n\nconst { isJsModule } = require(\"./helpers/js\");\n\nconst {\n  fromRawMappings,\n  fromRawMappingsNonBlocking,\n} = require(\"metro-source-map\");\n\nfunction getSourceMapInfosImpl(isBlocking, onDone, modules, options) {\n  const sourceMapInfos = [];\n  const modulesToProcess = modules\n    .filter(isJsModule)\n    .filter(options.processModuleFilter);\n\n  function processNextModule() {\n    if (modulesToProcess.length === 0) {\n      return true;\n    }\n\n    const mod = modulesToProcess.shift();\n    const info = getSourceMapInfo(mod, {\n      excludeSource: options.excludeSource,\n    });\n    sourceMapInfos.push(info);\n    return false;\n  }\n\n  function workLoop() {\n    const time = process.hrtime();\n\n    while (true) {\n      const isDone = processNextModule();\n\n      if (isDone) {\n        onDone(sourceMapInfos);\n        break;\n      }\n\n      if (!isBlocking) {\n        // Keep the loop running but try to avoid blocking\n        // for too long because this is not in a worker yet.\n        const diff = process.hrtime(time);\n        const NS_IN_MS = 1000000;\n\n        if (diff[1] > 50 * NS_IN_MS) {\n          // We've blocked for more than 50ms.\n          // This code currently runs on the main thread,\n          // so let's give Metro an opportunity to handle requests.\n          setImmediate(workLoop);\n          break;\n        }\n      }\n    }\n  }\n\n  workLoop();\n}\n\nfunction sourceMapGenerator(modules, options) {\n  let sourceMapInfos;\n  getSourceMapInfosImpl(\n    true,\n    (infos) => {\n      sourceMapInfos = infos;\n    },\n    modules,\n    options\n  );\n\n  if (sourceMapInfos == null) {\n    throw new Error(\n      \"Expected getSourceMapInfosImpl() to finish synchronously.\"\n    );\n  }\n\n  return fromRawMappings(sourceMapInfos);\n}\n\nasync function sourceMapGeneratorNonBlocking(modules, options) {\n  const sourceMapInfos = await new Promise((resolve) => {\n    getSourceMapInfosImpl(false, resolve, modules, options);\n  });\n  return fromRawMappingsNonBlocking(sourceMapInfos);\n}\n\nmodule.exports = {\n  sourceMapGenerator,\n  sourceMapGeneratorNonBlocking,\n};\n"],"mappings":"AASA;;;;AAEA,IAAMA,gBAAgB,GAAGC,OAAO,8BAAhC;;AAEA,eAAuBA,OAAO,gBAA9B;AAAA,IAAQC,UAAR,YAAQA,UAAR;;AAEA,gBAGID,OAAO,CAAC,kBAAD,CAHX;AAAA,IACEE,eADF,aACEA,eADF;AAAA,IAEEC,0BAFF,aAEEA,0BAFF;;AAKA,SAASC,qBAAT,CAA+BC,UAA/B,EAA2CC,MAA3C,EAAmDC,OAAnD,EAA4DC,OAA5D,EAAqE;EACnE,IAAMC,cAAc,GAAG,EAAvB;EACA,IAAMC,gBAAgB,GAAGH,OAAO,CAC7BI,MADsB,CACfV,UADe,EAEtBU,MAFsB,CAEfH,OAAO,CAACI,mBAFO,CAAzB;;EAIA,SAASC,iBAAT,GAA6B;IAC3B,IAAIH,gBAAgB,CAACI,MAAjB,KAA4B,CAAhC,EAAmC;MACjC,OAAO,IAAP;IACD;;IAED,IAAMC,GAAG,GAAGL,gBAAgB,CAACM,KAAjB,EAAZ;IACA,IAAMC,IAAI,GAAGlB,gBAAgB,CAACgB,GAAD,EAAM;MACjCG,aAAa,EAAEV,OAAO,CAACU;IADU,CAAN,CAA7B;IAGAT,cAAc,CAACU,IAAf,CAAoBF,IAApB;IACA,OAAO,KAAP;EACD;;EAED,SAASG,QAAT,GAAoB;IAClB,IAAMC,IAAI,GAAGC,OAAO,CAACC,MAAR,EAAb;;IAEA,OAAO,IAAP,EAAa;MACX,IAAMC,MAAM,GAAGX,iBAAiB,EAAhC;;MAEA,IAAIW,MAAJ,EAAY;QACVlB,MAAM,CAACG,cAAD,CAAN;QACA;MACD;;MAED,IAAI,CAACJ,UAAL,EAAiB;QAGf,IAAMoB,IAAI,GAAGH,OAAO,CAACC,MAAR,CAAeF,IAAf,CAAb;QACA,IAAMK,QAAQ,GAAG,OAAjB;;QAEA,IAAID,IAAI,CAAC,CAAD,CAAJ,GAAU,KAAKC,QAAnB,EAA6B;UAI3BC,YAAY,CAACP,QAAD,CAAZ;UACA;QACD;MACF;IACF;EACF;;EAEDA,QAAQ;AACT;;AAED,SAASQ,kBAAT,CAA4BrB,OAA5B,EAAqCC,OAArC,EAA8C;EAC5C,IAAIC,cAAJ;EACAL,qBAAqB,CACnB,IADmB,EAEnB,UAACyB,KAAD,EAAW;IACTpB,cAAc,GAAGoB,KAAjB;EACD,CAJkB,EAKnBtB,OALmB,EAMnBC,OANmB,CAArB;;EASA,IAAIC,cAAc,IAAI,IAAtB,EAA4B;IAC1B,MAAM,IAAIqB,KAAJ,CACJ,2DADI,CAAN;EAGD;;EAED,OAAO5B,eAAe,CAACO,cAAD,CAAtB;AACD;;AAED,SAAesB,6BAAf,CAA6CxB,OAA7C,EAAsDC,OAAtD;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA,iCAC+B,IAAIwB,OAAJ,CAAY,UAACC,OAAD,EAAa;YACpD7B,qBAAqB,CAAC,KAAD,EAAQ6B,OAAR,EAAiB1B,OAAjB,EAA0BC,OAA1B,CAArB;UACD,CAF4B,CAD/B;;QAAA;UACQC,cADR;UAAA,iCAISN,0BAA0B,CAACM,cAAD,CAJnC;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAOAyB,MAAM,CAACC,OAAP,GAAiB;EACfP,kBAAkB,EAAlBA,kBADe;EAEfG,6BAA6B,EAA7BA;AAFe,CAAjB"},"metadata":{},"sourceType":"script"}