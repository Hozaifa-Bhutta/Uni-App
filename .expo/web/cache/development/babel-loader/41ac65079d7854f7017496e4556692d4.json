{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateProjectName = validateProjectName;\n\nvar _InvalidNameError = _interopRequireDefault(require(\"./errors/InvalidNameError\"));\n\nvar _ReservedNameError = _interopRequireDefault(require(\"./errors/ReservedNameError\"));\n\nvar _HelloWorldError = _interopRequireDefault(require(\"./errors/HelloWorldError\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar NAME_REGEX = /^[$A-Z_][0-9A-Z_$]*$/i;\nvar javaKeywords = ['abstract', 'continue', 'for', 'new', 'switch', 'assert', 'default', 'goto', 'package', 'synchronized', 'boolean', 'do', 'if', 'private', 'this', 'break', 'double', 'implements', 'protected', 'throw', 'byte', 'else', 'import', 'public', 'throws', 'case', 'enum', 'instanceof', 'return', 'transient', 'catch', 'extends', 'int', 'short', 'try', 'char', 'final', 'interface', 'static', 'void', 'class', 'finally', 'long', 'strictfp', 'volatile', 'const', 'float', 'native', 'super', 'while'];\nvar reservedNames = ['react', 'react-native'].concat(javaKeywords);\n\nfunction validateProjectName(name) {\n  if (!String(name).match(NAME_REGEX)) {\n    throw new _InvalidNameError.default(name);\n  }\n\n  var lowerCaseName = name.toLowerCase();\n\n  if (reservedNames.includes(lowerCaseName)) {\n    throw new _ReservedNameError.default(lowerCaseName);\n  }\n\n  if (name.match(/helloworld/gi)) {\n    throw new _HelloWorldError.default();\n  }\n}","map":{"version":3,"sources":["../../../src/commands/init/validate.ts"],"names":["NAME_REGEX","javaKeywords","reservedNames","String","InvalidNameError","lowerCaseName","name","ReservedNameError","HelloWorldError"],"mappings":";;;;;;;AAAA,IAAA,iBAAA,GAAA,sBAAA,CAAA,OAAA,6BAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,sBAAA,CAAA,OAAA,8BAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,sBAAA,CAAA,OAAA,4BAAA,CAAA;;;;;;;;AAEA,IAAMA,UAAU,GAAhB,uBAAA;AAGA,IAAMC,YAAY,GAAG,CAAA,UAAA,EAAA,UAAA,EAAA,KAAA,EAAA,KAAA,EAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAA,MAAA,EAAA,SAAA,EAAA,cAAA,EAAA,SAAA,EAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,MAAA,EAAA,OAAA,EAAA,QAAA,EAAA,YAAA,EAAA,WAAA,EAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,MAAA,EAAA,YAAA,EAAA,QAAA,EAAA,WAAA,EAAA,OAAA,EAAA,SAAA,EAAA,KAAA,EAAA,OAAA,EAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAAA,WAAA,EAAA,QAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,EAAA,MAAA,EAAA,UAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAArB,OAAqB,CAArB;AAqDA,IAAMC,aAAa,IAAG,OAAH,EAAG,cAAH,SAAnB,YAAmB,CAAnB;;AAEO,SAAA,mBAAA,CAAA,IAAA,EAA2C;EAChD,IAAI,CAACC,MAAM,CAANA,IAAM,CAANA,CAAAA,KAAAA,CAAL,UAAKA,CAAL,EAAqC;IACnC,MAAM,IAAIC,iBAAAA,CAAJ,OAAA,CAAN,IAAM,CAAN;EACD;;EAED,IAAMC,aAAa,GAAGC,IAAI,CAA1B,WAAsBA,EAAtB;;EACA,IAAIJ,aAAa,CAAbA,QAAAA,CAAJ,aAAIA,CAAJ,EAA2C;IACzC,MAAM,IAAIK,kBAAAA,CAAJ,OAAA,CAAN,aAAM,CAAN;EACD;;EAED,IAAID,IAAI,CAAJA,KAAAA,CAAJ,cAAIA,CAAJ,EAAgC;IAC9B,MAAM,IAAIE,gBAAAA,CAAV,OAAM,EAAN;EACD;AACF","sourcesContent":["import InvalidNameError from './errors/InvalidNameError';\nimport ReservedNameError from './errors/ReservedNameError';\nimport HelloWorldError from './errors/HelloWorldError';\n\nconst NAME_REGEX = /^[$A-Z_][0-9A-Z_$]*$/i;\n\n// ref: https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html\nconst javaKeywords = [\n  'abstract',\n  'continue',\n  'for',\n  'new',\n  'switch',\n  'assert',\n  'default',\n  'goto',\n  'package',\n  'synchronized',\n  'boolean',\n  'do',\n  'if',\n  'private',\n  'this',\n  'break',\n  'double',\n  'implements',\n  'protected',\n  'throw',\n  'byte',\n  'else',\n  'import',\n  'public',\n  'throws',\n  'case',\n  'enum',\n  'instanceof',\n  'return',\n  'transient',\n  'catch',\n  'extends',\n  'int',\n  'short',\n  'try',\n  'char',\n  'final',\n  'interface',\n  'static',\n  'void',\n  'class',\n  'finally',\n  'long',\n  'strictfp',\n  'volatile',\n  'const',\n  'float',\n  'native',\n  'super',\n  'while',\n];\n\nconst reservedNames = ['react', 'react-native', ...javaKeywords];\n\nexport function validateProjectName(name: string) {\n  if (!String(name).match(NAME_REGEX)) {\n    throw new InvalidNameError(name);\n  }\n\n  const lowerCaseName = name.toLowerCase();\n  if (reservedNames.includes(lowerCaseName)) {\n    throw new ReservedNameError(lowerCaseName);\n  }\n\n  if (name.match(/helloworld/gi)) {\n    throw new HelloWorldError();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}