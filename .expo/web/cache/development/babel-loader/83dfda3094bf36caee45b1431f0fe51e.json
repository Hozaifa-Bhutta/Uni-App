{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction tryLaunchAppOnDevice(device, packageName, adbPath, args) {\n  var appId = args.appId,\n      appIdSuffix = args.appIdSuffix;\n  var packageNameWithSuffix = [appId || packageName, appIdSuffix].filter(Boolean).join('.');\n  var activityToLaunch = args.mainActivity.includes('.') ? args.mainActivity : [packageName, args.mainActivity].filter(Boolean).join('.');\n\n  try {\n    var adbArgs = ['shell', 'am', 'start', '-n', packageNameWithSuffix + \"/\" + activityToLaunch];\n\n    if (device) {\n      adbArgs.unshift('-s', device);\n\n      _cliTools().logger.info(\"Starting the app on \\\"\" + device + \"\\\"...\");\n    } else {\n      _cliTools().logger.info('Starting the app...');\n    }\n\n    _cliTools().logger.debug(\"Running command \\\"\" + adbPath + \" \" + adbArgs.join(' ') + \"\\\"\");\n\n    _execa().default.sync(adbPath, adbArgs, {\n      stdio: 'inherit'\n    });\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Failed to start the app.', error);\n  }\n}\n\nvar _default = tryLaunchAppOnDevice;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/runAndroid/tryLaunchAppOnDevice.ts"],"names":["appIdSuffix","packageNameWithSuffix","appId","activityToLaunch","args","adbArgs","logger","adbPath","execa","stdio","CLIError","tryLaunchAppOnDevice"],"mappings":";;;;;;;AAQA,SAAA,MAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;EAAA,MAAA,GAAA,kBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AAEA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;;;;;;;AAEA,SAAA,oBAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAAA,IAAA,EAKE;EACA,IAAM,KAAN,GAAA,IAAA,CAAM,KAAN;EAAA,IAAcA,WAAd,GAAA,IAAA,CAAcA,WAAd;EACA,IAAMC,qBAAqB,GAAG,CAACC,KAAK,IAAN,WAAA,EAAA,WAAA,EAAA,MAAA,CAAA,OAAA,EAAA,IAAA,CAA9B,GAA8B,CAA9B;EAIA,IAAMC,gBAAgB,GAAGC,IAAI,CAAJA,YAAAA,CAAAA,QAAAA,CAAAA,GAAAA,IACrBA,IAAI,CADiBA,YAAAA,GAErB,CAAA,WAAA,EAAcA,IAAI,CAAlB,YAAA,EAAA,MAAA,CAAA,OAAA,EAAA,IAAA,CAFJ,GAEI,CAFJ;;EAIA,IAAI;IACF,IAAMC,OAAO,GAAG,CAAA,OAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAKXJ,qBALW,SAAhB,gBAAgB,CAAhB;;IAOA,IAAA,MAAA,EAAY;MACVI,OAAO,CAAPA,OAAAA,CAAAA,IAAAA,EAAAA,MAAAA;;MACAC,SAAAA,GAAAA,MAAAA,CAAAA,IAAAA,4BAAAA,MAAAA;IAFF,CAAA,MAGO;MACLA,SAAAA,GAAAA,MAAAA,CAAAA,IAAAA,CAAAA,qBAAAA;IACD;;IACDA,SAAAA,GAAAA,MAAAA,CAAAA,KAAAA,wBAAiCC,OAAjCD,SAA4CD,OAAO,CAAPA,IAAAA,CAA5CC,GAA4CD,CAA5CC;;IACAE,MAAAA,GAAAA,OAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EAAAA,OAAAA,EAA6B;MAACC,KAAK,EAAE;IAAR,CAA7BD;EAfF,CAAA,CAgBE,OAAA,KAAA,EAAc;IACd,MAAM,KAAIE,SAAAA,GAAJ,QAAA,EAAA,0BAAA,EAAN,KAAM,CAAN;EACD;AACF;;eAEcC,oB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport execa from 'execa';\nimport {Flags} from '.';\nimport {logger, CLIError} from '@react-native-community/cli-tools';\n\nfunction tryLaunchAppOnDevice(\n  device: string | void,\n  packageName: string,\n  adbPath: string,\n  args: Flags,\n) {\n  const {appId, appIdSuffix} = args;\n  const packageNameWithSuffix = [appId || packageName, appIdSuffix]\n    .filter(Boolean)\n    .join('.');\n\n  const activityToLaunch = args.mainActivity.includes('.')\n    ? args.mainActivity\n    : [packageName, args.mainActivity].filter(Boolean).join('.');\n\n  try {\n    const adbArgs = [\n      'shell',\n      'am',\n      'start',\n      '-n',\n      `${packageNameWithSuffix}/${activityToLaunch}`,\n    ];\n    if (device) {\n      adbArgs.unshift('-s', device);\n      logger.info(`Starting the app on \"${device}\"...`);\n    } else {\n      logger.info('Starting the app...');\n    }\n    logger.debug(`Running command \"${adbPath} ${adbArgs.join(' ')}\"`);\n    execa.sync(adbPath, adbArgs, {stdio: 'inherit'});\n  } catch (error) {\n    throw new CLIError('Failed to start the app.', error);\n  }\n}\n\nexport default tryLaunchAppOnDevice;\n"]},"metadata":{},"sourceType":"script"}