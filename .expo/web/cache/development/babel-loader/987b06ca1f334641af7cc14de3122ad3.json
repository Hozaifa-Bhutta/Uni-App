{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _prompts() {\n  var data = _interopRequireDefault(require(\"prompts\"));\n\n  _prompts = function _prompts() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _checkInstallation = require(\"../checkInstallation\");\n\nvar _packageManagers = require(\"./packageManagers\");\n\nvar _common = require(\"./common\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar label = 'ios-deploy';\nvar installationWithYarn = 'yarn global add ios-deploy';\nvar installationWithNpm = 'npm install ios-deploy --global';\n\nvar identifyInstallationCommand = function identifyInstallationCommand() {\n  if (_packageManagers.packageManager === _checkInstallation.PACKAGE_MANAGERS.YARN) {\n    return installationWithYarn;\n  }\n\n  if (_packageManagers.packageManager === _checkInstallation.PACKAGE_MANAGERS.NPM) {\n    return installationWithNpm;\n  }\n\n  return undefined;\n};\n\nvar installLibrary = function _callee(_ref) {\n  var installationCommand, packageManagerToUse, loader, installationCommandArgs;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          installationCommand = _ref.installationCommand, packageManagerToUse = _ref.packageManagerToUse, loader = _ref.loader;\n          _context.prev = 1;\n          loader.start(label + \" (installing with \" + packageManagerToUse + \")\");\n          installationCommandArgs = installationCommand.split(' ');\n          _context.next = 6;\n          return _regeneratorRuntime.awrap((0, _execa().default)(installationCommandArgs[0], installationCommandArgs.splice(1)));\n\n        case 6:\n          loader.succeed(label + \" (installed with \" + packageManagerToUse + \")\");\n          _context.next = 12;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          (0, _common.logError)({\n            healthcheck: label,\n            loader: loader,\n            error: _context.t0,\n            command: installationCommand\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n};\n\nvar _default = {\n  label: label,\n  isRequired: false,\n  description: 'Required for installing your app on a physical device with the CLI',\n  getDiagnostics: function getDiagnostics() {\n    return _regeneratorRuntime.async(function getDiagnostics$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap((0, _checkInstallation.isSoftwareNotInstalled)('ios-deploy'));\n\n          case 2:\n            _context2.t0 = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              needsToBeFixed: _context2.t0\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  runAutomaticFix: function runAutomaticFix(_ref2) {\n    var loader, logManualInstallation, installationCommand, promptQuestion, installWithYarn, installWithNpm, skipInstallation, _await, chosenPackageManager, shouldInstallWithYarn;\n\n    return _regeneratorRuntime.async(function runAutomaticFix$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            loader = _ref2.loader, logManualInstallation = _ref2.logManualInstallation;\n            loader.stop();\n            installationCommand = identifyInstallationCommand();\n\n            if (!(installationCommand === undefined)) {\n              _context3.next = 19;\n              break;\n            }\n\n            promptQuestion = \"ios-deploy needs to be installed either by \" + _chalk().default.bold('yarn') + \" \" + _chalk().default.reset('or') + \" \" + _chalk().default.bold('npm') + \" \" + _chalk().default.reset() + \", which one do you want to use?\";\n            installWithYarn = {\n              title: 'yarn',\n              value: 'yarn'\n            };\n            installWithNpm = {\n              title: 'npm',\n              value: 'npm'\n            };\n            skipInstallation = {\n              title: 'Skip installation',\n              value: 'skip'\n            };\n            _context3.next = 10;\n            return _regeneratorRuntime.awrap((0, _prompts().default)([{\n              type: 'select',\n              name: 'chosenPackageManager',\n              message: promptQuestion,\n              choices: [installWithYarn, installWithNpm, skipInstallation]\n            }]));\n\n          case 10:\n            _await = _context3.sent;\n            chosenPackageManager = _await.chosenPackageManager;\n            (0, _common.removeMessage)(\"? \" + promptQuestion + \" \" + chosenPackageManager);\n\n            if (!(chosenPackageManager === skipInstallation.value || !chosenPackageManager)) {\n              _context3.next = 17;\n              break;\n            }\n\n            loader.fail();\n            logManualInstallation({\n              healthcheck: 'ios-deploy',\n              url: 'https://github.com/ios-control/ios-deploy#readme'\n            });\n            return _context3.abrupt(\"return\");\n\n          case 17:\n            shouldInstallWithYarn = chosenPackageManager === installWithYarn.value;\n            return _context3.abrupt(\"return\", installLibrary({\n              installationCommand: shouldInstallWithYarn ? installationWithYarn : installationWithNpm,\n              loader: loader,\n              packageManagerToUse: chosenPackageManager\n            }));\n\n          case 19:\n            return _context3.abrupt(\"return\", installLibrary({\n              installationCommand: installationCommand,\n              packageManagerToUse: _packageManagers.packageManager.toLowerCase(),\n              loader: loader\n            }));\n\n          case 20:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["../../../src/tools/healthchecks/iosDeploy.ts"],"names":["label","installationWithYarn","installationWithNpm","identifyInstallationCommand","packageManager","PACKAGE_MANAGERS","installLibrary","loader","installationCommandArgs","installationCommand","healthcheck","error","command","isRequired","description","getDiagnostics","needsToBeFixed","runAutomaticFix","logManualInstallation","promptQuestion","chalk","installWithYarn","title","value","installWithNpm","skipInstallation","chosenPackageManager","type","name","message","choices","url","shouldInstallWithYarn","packageManagerToUse"],"mappings":"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","sourcesContent":["import execa from 'execa';\nimport chalk from 'chalk';\nimport prompts from 'prompts';\nimport {isSoftwareNotInstalled, PACKAGE_MANAGERS} from '../checkInstallation';\nimport {packageManager} from './packageManagers';\nimport {logError, removeMessage} from './common';\nimport {HealthCheckInterface, Loader} from '../../types';\n\nconst label = 'ios-deploy';\n\nconst installationWithYarn = 'yarn global add ios-deploy';\nconst installationWithNpm = 'npm install ios-deploy --global';\n\nconst identifyInstallationCommand = () => {\n  if (packageManager === PACKAGE_MANAGERS.YARN) {\n    return installationWithYarn;\n  }\n\n  if (packageManager === PACKAGE_MANAGERS.NPM) {\n    return installationWithNpm;\n  }\n\n  return undefined;\n};\n\nconst installLibrary = async ({\n  installationCommand,\n  packageManagerToUse,\n  loader,\n}: {\n  installationCommand: string;\n  packageManagerToUse: 'yarn' | 'npm';\n  loader: Loader;\n}) => {\n  try {\n    loader.start(`${label} (installing with ${packageManagerToUse})`);\n\n    const installationCommandArgs = installationCommand.split(' ');\n\n    await execa(installationCommandArgs[0], installationCommandArgs.splice(1));\n\n    loader.succeed(`${label} (installed with ${packageManagerToUse})`);\n  } catch (error) {\n    logError({\n      healthcheck: label,\n      loader,\n      error,\n      command: installationCommand,\n    });\n  }\n};\n\nexport default {\n  label,\n  isRequired: false,\n  description:\n    'Required for installing your app on a physical device with the CLI',\n  getDiagnostics: async () => ({\n    needsToBeFixed: await isSoftwareNotInstalled('ios-deploy'),\n  }),\n  runAutomaticFix: async ({loader, logManualInstallation}) => {\n    loader.stop();\n\n    const installationCommand = identifyInstallationCommand();\n\n    // This means that we couldn't \"guess\" the package manager\n    if (installationCommand === undefined) {\n      const promptQuestion = `ios-deploy needs to be installed either by ${chalk.bold(\n        'yarn',\n      )} ${chalk.reset('or')} ${chalk.bold(\n        'npm',\n      )} ${chalk.reset()}, which one do you want to use?`;\n      const installWithYarn = {title: 'yarn', value: 'yarn'};\n      const installWithNpm = {title: 'npm', value: 'npm'};\n      const skipInstallation = {\n        title: 'Skip installation',\n        value: 'skip',\n      };\n\n      const {chosenPackageManager} = await prompts([\n        {\n          type: 'select',\n          name: 'chosenPackageManager',\n          message: promptQuestion,\n          choices: [installWithYarn, installWithNpm, skipInstallation],\n        },\n      ]);\n\n      removeMessage(`? ${promptQuestion} ${chosenPackageManager}`);\n\n      if (\n        chosenPackageManager === skipInstallation.value ||\n        !chosenPackageManager // e.g. when user presses Esc\n      ) {\n        loader.fail();\n\n        // Then we just print out the URL that the user can head to download the library\n        logManualInstallation({\n          healthcheck: 'ios-deploy',\n          url: 'https://github.com/ios-control/ios-deploy#readme',\n        });\n\n        return;\n      }\n\n      const shouldInstallWithYarn =\n        chosenPackageManager === installWithYarn.value;\n\n      return installLibrary({\n        installationCommand: shouldInstallWithYarn\n          ? installationWithYarn\n          : installationWithNpm,\n        loader,\n        packageManagerToUse: chosenPackageManager,\n      });\n    }\n\n    return installLibrary({\n      installationCommand,\n      packageManagerToUse: packageManager!.toLowerCase() as 'yarn' | 'npm',\n      loader,\n    });\n  },\n} as HealthCheckInterface;\n"]},"metadata":{},"sourceType":"script"}