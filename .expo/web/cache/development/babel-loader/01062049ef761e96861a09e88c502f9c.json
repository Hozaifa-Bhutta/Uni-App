{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.projectConfig = projectConfig;\nexports.dependencyConfig = dependencyConfig;\nexports.findPodfilePaths = void 0;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _findPodfilePath = _interopRequireDefault(require(\"./findPodfilePath\"));\n\nvar _findXcodeProject = _interopRequireDefault(require(\"./findXcodeProject\"));\n\nvar _findPodspec = _interopRequireDefault(require(\"./findPodspec\"));\n\nvar _findAllPodfilePaths = _interopRequireDefault(require(\"./findAllPodfilePaths\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction projectConfig(folder, userConfig) {\n  if (!userConfig) {\n    return null;\n  }\n\n  var podfile = (0, _findPodfilePath.default)(userConfig.sourceDir || folder);\n\n  if (!podfile) {\n    return null;\n  }\n\n  var sourceDir = _path().default.dirname(podfile);\n\n  var xcodeProject = (0, _findXcodeProject.default)(_fs().default.readdirSync(sourceDir));\n  return {\n    sourceDir: sourceDir,\n    xcodeProject: xcodeProject\n  };\n}\n\nfunction dependencyConfig(folder) {\n  var userConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (userConfig === null) {\n    return null;\n  }\n\n  var podspecPath = (0, _findPodspec.default)(folder);\n\n  if (!podspecPath) {\n    return null;\n  }\n\n  return {\n    podspecPath: podspecPath,\n    configurations: userConfig.configurations || [],\n    scriptPhases: userConfig.scriptPhases || []\n  };\n}\n\nvar findPodfilePaths = _findAllPodfilePaths.default;\nexports.findPodfilePaths = findPodfilePaths;","map":{"version":3,"sources":["../../src/config/index.ts"],"names":["podfile","userConfig","sourceDir","path","xcodeProject","fs","podspecPath","configurations","scriptPhases","findPodfilePaths","findAllPodfilePaths"],"mappings":";;;;;;;;;AAOA,SAAA,KAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;EAAA,KAAA,GAAA,iBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,SAAA,GAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;;EAAA,GAAA,GAAA,eAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,IAAA,gBAAA,GAAA,sBAAA,CAAA,OAAA,qBAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,sBAAA,CAAA,OAAA,sBAAA,CAAA;;AACA,IAAA,YAAA,GAAA,sBAAA,CAAA,OAAA,iBAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,sBAAA,CAAA,OAAA,yBAAA,CAAA;;;;;;;;AAYO,SAAA,aAAA,CAAA,MAAA,EAAA,UAAA,EAGoB;EACzB,IAAI,CAAJ,UAAA,EAAiB;IACf,OAAA,IAAA;EACD;;EAED,IAAMA,OAAO,GAAG,CAAA,GAAA,gBAAA,CAAA,OAAA,EAAgBC,UAAU,CAAVA,SAAAA,IAAhC,MAAgB,CAAhB;;EAMA,IAAI,CAAJ,OAAA,EAAc;IACZ,OAAA,IAAA;EACD;;EAED,IAAMC,SAAS,GAAGC,KAAAA,GAAAA,OAAAA,CAAAA,OAAAA,CAAlB,OAAkBA,CAAlB;;EAEA,IAAMC,YAAY,GAAG,CAAA,GAAA,iBAAA,CAAA,OAAA,EAAiBC,GAAAA,GAAAA,OAAAA,CAAAA,WAAAA,CAAtC,SAAsCA,CAAjB,CAArB;EAEA,OAAO;IACLH,SADK,EACLA,SADK;IAELE,YAAAA,EAAAA;EAFK,CAAP;AAID;;AAEM,SAAA,gBAAA,CAAA,MAAA,EAGuB;EAAA,IAD5BH,UAC4B,uEAHvB,EAGuB;;EAC5B,IAAIA,UAAU,KAAd,IAAA,EAAyB;IACvB,OAAA,IAAA;EACD;;EAED,IAAMK,WAAW,GAAG,CAAA,GAAA,YAAA,CAAA,OAAA,EAApB,MAAoB,CAApB;;EAEA,IAAI,CAAJ,WAAA,EAAkB;IAChB,OAAA,IAAA;EACD;;EAED,OAAO;IACLA,WADK,EACLA,WADK;IAELC,cAAc,EAAEN,UAAU,CAAVA,cAAAA,IAFX,EAAA;IAGLO,YAAY,EAAEP,UAAU,CAAVA,YAAAA,IAA2B;EAHpC,CAAP;AAKD;;AAEM,IAAMQ,gBAAgB,GAAGC,oBAAAA,CAAzB,OAAA","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport path from 'path';\nimport fs from 'fs';\nimport findPodfilePath from './findPodfilePath';\nimport findXcodeProject from './findXcodeProject';\nimport findPodspec from './findPodspec';\nimport findAllPodfilePaths from './findAllPodfilePaths';\nimport {\n  IOSProjectParams,\n  IOSDependencyParams,\n  IOSProjectConfig,\n  IOSDependencyConfig,\n} from '@react-native-community/cli-types';\n\n/**\n * Returns project config by analyzing given folder and applying some user defaults\n * when constructing final object\n */\nexport function projectConfig(\n  folder: string,\n  userConfig: IOSProjectParams,\n): IOSProjectConfig | null {\n  if (!userConfig) {\n    return null;\n  }\n\n  const podfile = findPodfilePath(userConfig.sourceDir || folder);\n\n  /**\n   * In certain repos, the Xcode project can be generated by a tool.\n   * The only file that we can assume to exist on disk is `Podfile`.\n   */\n  if (!podfile) {\n    return null;\n  }\n\n  const sourceDir = path.dirname(podfile);\n\n  const xcodeProject = findXcodeProject(fs.readdirSync(sourceDir));\n\n  return {\n    sourceDir,\n    xcodeProject,\n  };\n}\n\nexport function dependencyConfig(\n  folder: string,\n  userConfig: IOSDependencyParams | null = {},\n): IOSDependencyConfig | null {\n  if (userConfig === null) {\n    return null;\n  }\n\n  const podspecPath = findPodspec(folder);\n\n  if (!podspecPath) {\n    return null;\n  }\n\n  return {\n    podspecPath,\n    configurations: userConfig.configurations || [],\n    scriptPhases: userConfig.scriptPhases || [],\n  };\n}\n\nexport const findPodfilePaths = findAllPodfilePaths;\n"]},"metadata":{},"sourceType":"script"}