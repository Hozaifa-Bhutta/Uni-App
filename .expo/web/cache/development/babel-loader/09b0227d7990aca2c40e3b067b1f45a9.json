{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getDevToolsMiddleware;\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _child_process() {\n  var data = require(\"child_process\");\n\n  _child_process = function _child_process() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction launchDefaultDebugger(host, port) {\n  var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var hostname = host || 'localhost';\n  var debuggerURL = \"http://\" + hostname + \":\" + port + \"/debugger-ui\" + args;\n\n  _cliTools().logger.info('Launching Dev Tools...');\n\n  (0, _cliTools().launchDebugger)(debuggerURL);\n}\n\nfunction escapePath(pathname) {\n  return \"\\\"\" + pathname + \"\\\"\";\n}\n\nfunction launchDevTools(_ref, isDebuggerConnected) {\n  var host = _ref.host,\n      port = _ref.port,\n      watchFolders = _ref.watchFolders;\n  var customDebugger = process.env.REACT_DEBUGGER;\n\n  if (customDebugger) {\n    startCustomDebugger({\n      watchFolders: watchFolders,\n      customDebugger: customDebugger\n    });\n  } else if (!isDebuggerConnected()) {\n    launchDefaultDebugger(host, port);\n  }\n}\n\nfunction startCustomDebugger(_ref2) {\n  var watchFolders = _ref2.watchFolders,\n      customDebugger = _ref2.customDebugger;\n  var folders = watchFolders.map(escapePath).join(' ');\n  var command = customDebugger + \" \" + folders;\n\n  _cliTools().logger.info('Starting custom debugger by executing:', command);\n\n  (0, _child_process().exec)(command, function (error) {\n    if (error !== null) {\n      _cliTools().logger.error('Error while starting custom debugger:', error.stack || '');\n    }\n  });\n}\n\nfunction getDevToolsMiddleware(options, isDebuggerConnected) {\n  return function devToolsMiddleware(_req, res) {\n    launchDevTools(options, isDebuggerConnected);\n    res.end('OK');\n  };\n}","map":{"version":3,"sources":["../src/devToolsMiddleware.ts"],"names":["args","hostname","host","debuggerURL","port","logger","watchFolders","customDebugger","process","startCustomDebugger","isDebuggerConnected","launchDefaultDebugger","folders","command","error","launchDevTools","res"],"mappings":";;;;;;;AAOA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,SAAA,cAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;EAAA,cAAA,GAAA,0BAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AAEA,SAAA,qBAAA,CAAA,IAAA,EAAA,IAAA,EAIE;EAAA,IADAA,IACA,uEAJF,EAIE;EACA,IAAMC,QAAQ,GAAGC,IAAI,IAArB,WAAA;EACA,IAAMC,WAAW,eAAaF,QAAb,SAAyBG,IAAzB,oBAAjB,IAAA;;EACAC,SAAAA,GAAAA,MAAAA,CAAAA,IAAAA,CAAAA,wBAAAA;;EACA,CAAA,GAAA,SAAA,GAAA,cAAA,EAAA,WAAA;AACD;;AAED,SAAA,UAAA,CAAA,QAAA,EAAsC;EAEpC,cAAA,QAAA;AACD;;AAQD,SAAA,cAAA,OAAA,mBAAA,EAGE;EAAA,IAFA,IAEA,QAFA,IAEA;EAAA,IAFA,IAEA,QAFA,IAEA;EAAA,IAFaC,YAEb,QAFaA,YAEb;EAEA,IAAMC,cAAc,GAAGC,OAAO,CAAPA,GAAAA,CAAvB,cAAA;;EACA,IAAA,cAAA,EAAoB;IAClBC,mBAAmB,CAAC;MAACH,YAAD,EAACA,YAAD;MAAeC,cAAAA,EAAAA;IAAf,CAAD,CAAnBE;EADF,CAAA,MAEO,IAAI,CAACC,mBAAL,EAAA,EAA4B;IAEjCC,qBAAqB,CAAA,IAAA,EAArBA,IAAqB,CAArBA;EACD;AACF;;AAED,SAAA,mBAAA,QAMG;EAAA,IAN0B,YAM1B,SAN0B,YAM1B;EAAA,IAJDJ,cAIC,SAJDA,cAIC;EACD,IAAMK,OAAO,GAAGN,YAAY,CAAZA,GAAAA,CAAAA,UAAAA,EAAAA,IAAAA,CAAhB,GAAgBA,CAAhB;EACA,IAAMO,OAAO,GAAMN,cAAN,SAAb,OAAA;;EACAF,SAAAA,GAAAA,MAAAA,CAAAA,IAAAA,CAAAA,wCAAAA,EAAAA,OAAAA;;EACA,CAAA,GAAA,cAAA,GAAA,IAAA,EAAA,OAAA,EAAc,UAAA,KAAA,EAAiB;IAC7B,IAAIS,KAAK,KAAT,IAAA,EAAoB;MAClBT,SAAAA,GAAAA,MAAAA,CAAAA,KAAAA,CAAAA,uCAAAA,EAAsDS,KAAK,CAALA,KAAAA,IAAtDT,EAAAA;IACD;EAHH,CAAA;AAKD;;AAEc,SAAA,qBAAA,CAAA,OAAA,EAAA,mBAAA,EAGb;EACA,OAAO,SAAA,kBAAA,CAAA,IAAA,EAAA,GAAA,EAGL;IACAU,cAAc,CAAA,OAAA,EAAdA,mBAAc,CAAdA;IACAC,GAAG,CAAHA,GAAAA,CAAAA,IAAAA;EALF,CAAA;AAOD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport http from 'http';\nimport {launchDebugger, logger} from '@react-native-community/cli-tools';\nimport {exec} from 'child_process';\n\nfunction launchDefaultDebugger(\n  host: string | undefined,\n  port: number,\n  args = '',\n) {\n  const hostname = host || 'localhost';\n  const debuggerURL = `http://${hostname}:${port}/debugger-ui${args}`;\n  logger.info('Launching Dev Tools...');\n  launchDebugger(debuggerURL);\n}\n\nfunction escapePath(pathname: string) {\n  // \" Can escape paths with spaces in OS X, Windows, and *nix\n  return `\"${pathname}\"`;\n}\n\ntype LaunchDevToolsOptions = {\n  host?: string;\n  port: number;\n  watchFolders: ReadonlyArray<string>;\n};\n\nfunction launchDevTools(\n  {host, port, watchFolders}: LaunchDevToolsOptions,\n  isDebuggerConnected: () => boolean,\n) {\n  // Explicit config always wins\n  const customDebugger = process.env.REACT_DEBUGGER;\n  if (customDebugger) {\n    startCustomDebugger({watchFolders, customDebugger});\n  } else if (!isDebuggerConnected()) {\n    // Debugger is not yet open; we need to open a session\n    launchDefaultDebugger(host, port);\n  }\n}\n\nfunction startCustomDebugger({\n  watchFolders,\n  customDebugger,\n}: {\n  watchFolders: ReadonlyArray<string>;\n  customDebugger: string;\n}) {\n  const folders = watchFolders.map(escapePath).join(' ');\n  const command = `${customDebugger} ${folders}`;\n  logger.info('Starting custom debugger by executing:', command);\n  exec(command, function (error) {\n    if (error !== null) {\n      logger.error('Error while starting custom debugger:', error.stack || '');\n    }\n  });\n}\n\nexport default function getDevToolsMiddleware(\n  options: LaunchDevToolsOptions,\n  isDebuggerConnected: () => boolean,\n) {\n  return function devToolsMiddleware(\n    _req: http.IncomingMessage,\n    res: http.ServerResponse,\n  ) {\n    launchDevTools(options, isDebuggerConnected);\n    res.end('OK');\n  };\n}\n"]},"metadata":{},"sourceType":"script"}