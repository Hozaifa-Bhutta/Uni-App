{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getYarnVersionIfAvailable = getYarnVersionIfAvailable;\nexports.isProjectUsingYarn = isProjectUsingYarn;\n\nfunction _child_process() {\n  var data = require(\"child_process\");\n\n  _child_process = function _child_process() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n\n  _semver = function _semver() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _findUp() {\n  var data = _interopRequireDefault(require(\"find-up\"));\n\n  _findUp = function _findUp() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getYarnVersionIfAvailable() {\n  var yarnVersion;\n\n  try {\n    yarnVersion = ((0, _child_process().execSync)('yarn --version', {\n      stdio: [0, 'pipe', 'ignore']\n    }).toString() || '').trim();\n  } catch (error) {\n    return null;\n  }\n\n  try {\n    if (_semver().default.gte(yarnVersion, '0.16.0')) {\n      return yarnVersion;\n    }\n\n    return null;\n  } catch (error) {\n    _cliTools().logger.error(\"Cannot parse yarn version: \" + yarnVersion);\n\n    return null;\n  }\n}\n\nfunction isProjectUsingYarn(cwd) {\n  return _findUp().default.sync('yarn.lock', {\n    cwd: cwd\n  });\n}","map":{"version":3,"sources":["../../src/tools/yarn.ts"],"names":["yarnVersion","stdio","semver","logger","cwd"],"mappings":";;;;;;;;AAQA,SAAA,cAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;EAAA,cAAA,GAAA,0BAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,SAAA,OAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;EAAA,OAAA,GAAA,mBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,SAAA,OAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;;EAAA,OAAA,GAAA,mBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;;;;;;;AAMO,SAAA,yBAAA,GAAqC;EAC1C,IAAA,WAAA;;EACA,IAAI;IAEFA,WAAW,GAAG,CACZ,CAAA,GAAA,cAAA,GAAA,QAAA,EAAA,gBAAA,EAA2B;MACzBC,KAAK,EAAE,CAAA,CAAA,EAAA,MAAA,EAAA,QAAA;IADkB,CAA3B,EAAA,QAAA,MADY,EAAA,EAAdD,IAAc,EAAdA;EAFF,CAAA,CAOE,OAAA,KAAA,EAAc;IACd,OAAA,IAAA;EAVwC;;EAa1C,IAAI;IACF,IAAIE,OAAAA,GAAAA,OAAAA,CAAAA,GAAAA,CAAAA,WAAAA,EAAJ,QAAIA,CAAJ,EAAuC;MACrC,OAAA,WAAA;IACD;;IACD,OAAA,IAAA;EAJF,CAAA,CAKE,OAAA,KAAA,EAAc;IACdC,SAAAA,GAAAA,MAAAA,CAAAA,KAAAA,iCAAAA,WAAAA;;IACA,OAAA,IAAA;EACD;AACF;;AAKM,SAAA,kBAAA,CAAA,GAAA,EAAyC;EAC9C,OAAO,OAAA,GAAA,OAAA,CAAA,IAAA,CAAA,WAAA,EAAyB;IAACC,GAAAA,EAAAA;EAAD,CAAzB,CAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport {execSync} from 'child_process';\nimport semver from 'semver';\nimport {logger} from '@react-native-community/cli-tools';\nimport findUp from 'find-up';\n\n/**\n * Use Yarn if available, it's much faster than the npm client.\n * Return the version of yarn installed on the system, null if yarn is not available.\n */\nexport function getYarnVersionIfAvailable() {\n  let yarnVersion;\n  try {\n    // execSync returns a Buffer -> convert to string\n    yarnVersion = (\n      execSync('yarn --version', {\n        stdio: [0, 'pipe', 'ignore'],\n      }).toString() || ''\n    ).trim();\n  } catch (error) {\n    return null;\n  }\n  // yarn < 0.16 has a 'missing manifest' bug\n  try {\n    if (semver.gte(yarnVersion, '0.16.0')) {\n      return yarnVersion;\n    }\n    return null;\n  } catch (error) {\n    logger.error(`Cannot parse yarn version: ${yarnVersion}`);\n    return null;\n  }\n}\n\n/**\n * Check if project is using Yarn (has `yarn.lock` in the tree)\n */\nexport function isProjectUsingYarn(cwd: string) {\n  return findUp.sync('yarn.lock', {cwd});\n}\n"]},"metadata":{},"sourceType":"script"}