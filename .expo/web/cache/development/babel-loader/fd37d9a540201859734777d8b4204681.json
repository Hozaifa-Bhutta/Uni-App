{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction parseIOSDevicesList(text) {\n  var devices = [];\n  var isSimulator = false;\n\n  if (text.indexOf('== Simulators ==') === -1) {\n    return [];\n  }\n\n  text.split('\\n').forEach(function (line) {\n    if (line === '== Simulators ==') {\n      isSimulator = true;\n    }\n\n    var device = line.match(/(.*?) (\\(([0-9.]+)\\) )?\\(([0-9A-F-]+)\\)/i);\n\n    if (device) {\n      var _device = _slicedToArray(device, 5),\n          name = _device[1],\n          version = _device[3],\n          udid = _device[4];\n\n      var metadata = {\n        name: name,\n        udid: udid\n      };\n\n      if (version) {\n        metadata.version = version;\n        metadata.type = isSimulator ? 'simulator' : 'device';\n      } else {\n        metadata.type = 'catalyst';\n      }\n\n      devices.push(metadata);\n    }\n  });\n  return devices;\n}\n\nvar _default = parseIOSDevicesList;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/runIOS/parseXctraceIOSDevicesList.ts"],"names":["devices","isSimulator","text","line","device","metadata","name","udid","parseIOSDevicesList"],"mappings":";;;;;;;;;AAyBA,SAAA,mBAAA,CAAA,IAAA,EAA0D;EACxD,IAAMA,OAAsB,GAA5B,EAAA;EACA,IAAIC,WAAW,GAAf,KAAA;;EACA,IAAIC,IAAI,CAAJA,OAAAA,CAAAA,kBAAAA,MAAqC,CAAzC,CAAA,EAA6C;IAC3C,OAAA,EAAA;EACD;;EACDA,IAAI,CAAJA,KAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CAA0BC,UAAAA,IAAD,EAAU;IACjC,IAAIA,IAAI,KAAR,kBAAA,EAAiC;MAC/BF,WAAW,GAAXA,IAAAA;IACD;;IACD,IAAMG,MAAM,GAAGD,IAAI,CAAJA,KAAAA,CAAf,0CAAeA,CAAf;;IACA,IAAA,MAAA,EAAY;MACV,6BAAA,MAAA;MAAA,IAAM,IAAN;MAAA,IAAM,OAAN;MAAA,IAAM,IAAN;;MACA,IAAME,QAAgB,GAAG;QAACC,IAAD,EAACA,IAAD;QAAOC,IAAAA,EAAAA;MAAP,CAAzB;;MACA,IAAA,OAAA,EAAa;QACXF,QAAQ,CAARA,OAAAA,GAAAA,OAAAA;QACAA,QAAQ,CAARA,IAAAA,GAAgBJ,WAAW,GAAA,WAAA,GAA3BI,QAAAA;MAFF,CAAA,MAGO;QACLA,QAAQ,CAARA,IAAAA,GAAAA,UAAAA;MACD;;MACDL,OAAO,CAAPA,IAAAA,CAAAA,QAAAA;IACD;EAfHE,CAAAA;EAkBA,OAAA,OAAA;AACD;;eAEcM,mB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport {Device} from '../../types';\n\n/**\n * Parses the output of the `xcrun instruments -s` command and returns metadata\n * about available iOS simulators and physical devices, as well as host Mac for\n * Catalyst purposes.\n *\n * Expected text looks roughly like this:\n *\n * ```\n * == Devices ==\n * this-mac-device [UDID]\n * A Physical Device (OS Version) (UDID)\n *\n * == Simulators ==\n * A Simulator Device (OS Version) (UDID)\n * ```\n */\nfunction parseIOSDevicesList(text: string): Array<Device> {\n  const devices: Array<Device> = [];\n  let isSimulator = false;\n  if (text.indexOf('== Simulators ==') === -1) {\n    return [];\n  }\n  text.split('\\n').forEach((line) => {\n    if (line === '== Simulators ==') {\n      isSimulator = true;\n    }\n    const device = line.match(/(.*?) (\\(([0-9.]+)\\) )?\\(([0-9A-F-]+)\\)/i);\n    if (device) {\n      const [, name, , version, udid] = device;\n      const metadata: Device = {name, udid};\n      if (version) {\n        metadata.version = version;\n        metadata.type = isSimulator ? 'simulator' : 'device';\n      } else {\n        metadata.type = 'catalyst';\n      }\n      devices.push(metadata);\n    }\n  });\n\n  return devices;\n}\n\nexport default parseIOSDevicesList;\n"]},"metadata":{},"sourceType":"script"}