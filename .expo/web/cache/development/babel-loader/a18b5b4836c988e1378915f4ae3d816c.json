{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _os() {\n  var data = _interopRequireDefault(require(\"os\"));\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _appdirsjs() {\n  var data = _interopRequireDefault(require(\"appdirsjs\"));\n\n  _appdirsjs = function _appdirsjs() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _logger = _interopRequireDefault(require(\"../logger\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction loadCache(name) {\n  try {\n    var cacheRaw = _fs().default.readFileSync(_path().default.resolve(getCacheRootPath(), name), 'utf8');\n\n    var cache = JSON.parse(cacheRaw);\n    return cache;\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      saveCache(name, {});\n    }\n\n    _logger.default.debug('No release cache found');\n\n    return undefined;\n  }\n}\n\nfunction saveCache(name, cache) {\n  _fs().default.writeFileSync(_path().default.resolve(getCacheRootPath(), name), JSON.stringify(cache, null, 2));\n}\n\nfunction getCacheRootPath() {\n  var legacyPath = _path().default.resolve(_os().default.homedir(), '.react-native-cli', 'cache');\n\n  var cachePath = (0, _appdirsjs().default)({\n    appName: 'react-native-cli',\n    legacyPath: legacyPath\n  }).cache;\n\n  if (!_fs().default.existsSync(cachePath)) {\n    _fs().default.mkdirSync(cachePath, {\n      recursive: true\n    });\n  }\n\n  return cachePath;\n}\n\nfunction get(name, key) {\n  var cache = loadCache(name);\n\n  if (cache) {\n    return cache[key];\n  }\n\n  return undefined;\n}\n\nfunction set(name, key, value) {\n  var cache = loadCache(name);\n\n  if (cache) {\n    cache[key] = value;\n    saveCache(name, cache);\n  }\n}\n\nvar _default = {\n  get: get,\n  set: set\n};\nexports.default = _default;","map":{"version":3,"sources":["../../src/releaseChecker/releaseCacheManager.ts"],"names":["cacheRaw","fs","path","getCacheRootPath","cache","JSON","e","saveCache","logger","legacyPath","os","cachePath","appName","recursive","loadCache","get","set"],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport os from 'os';\nimport appDirs from 'appdirsjs';\nimport logger from '../logger';\n\ntype ReleaseCacheKey = 'eTag' | 'lastChecked' | 'latestVersion';\ntype Cache = {[key in ReleaseCacheKey]?: string};\n\nfunction loadCache(name: string): Cache | undefined {\n  try {\n    const cacheRaw = fs.readFileSync(\n      path.resolve(getCacheRootPath(), name),\n      'utf8',\n    );\n    const cache = JSON.parse(cacheRaw);\n    return cache;\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      // Create cache file since it doesn't exist.\n      saveCache(name, {});\n    }\n    logger.debug('No release cache found');\n    return undefined;\n  }\n}\n\nfunction saveCache(name: string, cache: Cache) {\n  fs.writeFileSync(\n    path.resolve(getCacheRootPath(), name),\n    JSON.stringify(cache, null, 2),\n  );\n}\n\n/**\n * Returns the path string of `$HOME/.react-native-cli`.\n *\n * In case it doesn't exist, it will be created.\n */\nfunction getCacheRootPath() {\n  const legacyPath = path.resolve(os.homedir(), '.react-native-cli', 'cache');\n  const cachePath = appDirs({appName: 'react-native-cli', legacyPath}).cache;\n\n  if (!fs.existsSync(cachePath)) {\n    fs.mkdirSync(cachePath, {recursive: true});\n  }\n\n  return cachePath;\n}\n\nfunction get(name: string, key: ReleaseCacheKey): string | undefined {\n  const cache = loadCache(name);\n  if (cache) {\n    return cache[key];\n  }\n  return undefined;\n}\n\nfunction set(name: string, key: ReleaseCacheKey, value: string) {\n  const cache = loadCache(name);\n  if (cache) {\n    cache[key] = value;\n    saveCache(name, cache);\n  }\n}\n\nexport default {\n  get,\n  set,\n};\n"]},"metadata":{},"sourceType":"script"}