{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildBundleWithConfig = buildBundleWithConfig;\nexports.default = void 0;\n\nfunction _Server() {\n  var data = _interopRequireDefault(require(\"metro/src/Server\"));\n\n  _Server = function _Server() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _saveAssets = _interopRequireDefault(require(\"./saveAssets\"));\n\nvar _loadMetroConfig = _interopRequireDefault(require(\"../../tools/loadMetroConfig\"));\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar outputBundle = require('metro/src/shared/output/bundle');\n\nfunction buildBundle(args, ctx) {\n  var output,\n      config,\n      _args = arguments;\n  return _regeneratorRuntime.async(function buildBundle$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          output = _args.length > 2 && _args[2] !== undefined ? _args[2] : outputBundle;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap((0, _loadMetroConfig.default)(ctx, {\n            maxWorkers: args.maxWorkers,\n            resetCache: args.resetCache,\n            config: args.config\n          }));\n\n        case 3:\n          config = _context.sent;\n          return _context.abrupt(\"return\", buildBundleWithConfig(args, config, output));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction buildBundleWithConfig(args, config) {\n  var output,\n      sourceMapUrl,\n      requestOpts,\n      server,\n      bundle,\n      outputAssets,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function buildBundleWithConfig$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          output = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : outputBundle;\n\n          if (!(config.resolver.platforms.indexOf(args.platform) === -1)) {\n            _context2.next = 5;\n            break;\n          }\n\n          _cliTools().logger.error(\"Invalid platform \" + (args.platform ? \"\\\"\" + _chalk().default.bold(args.platform) + \"\\\" \" : '') + \"selected.\");\n\n          _cliTools().logger.info(\"Available platforms are: \" + config.resolver.platforms.map(function (x) {\n            return \"\\\"\" + _chalk().default.bold(x) + \"\\\"\";\n          }).join(', ') + \". If you are trying to bundle for an out-of-tree platform, it may not be installed.\");\n\n          throw new Error('Bundling failed');\n\n        case 5:\n          process.env.NODE_ENV = args.dev ? 'development' : 'production';\n          sourceMapUrl = args.sourcemapOutput;\n\n          if (sourceMapUrl && !args.sourcemapUseAbsolutePath) {\n            sourceMapUrl = _path().default.basename(sourceMapUrl);\n          }\n\n          requestOpts = {\n            entryFile: args.entryFile,\n            sourceMapUrl: sourceMapUrl,\n            dev: args.dev,\n            minify: args.minify !== undefined ? args.minify : !args.dev,\n            platform: args.platform,\n            unstable_transformProfile: args.unstableTransformProfile,\n            generateStaticViewConfigs: args.generateStaticViewConfigs\n          };\n          server = new (_Server().default)(config);\n          _context2.prev = 10;\n          _context2.next = 13;\n          return _regeneratorRuntime.awrap(output.build(server, requestOpts));\n\n        case 13:\n          bundle = _context2.sent;\n          _context2.next = 16;\n          return _regeneratorRuntime.awrap(output.save(bundle, args, _cliTools().logger.info));\n\n        case 16:\n          _context2.next = 18;\n          return _regeneratorRuntime.awrap(server.getAssets(_objectSpread(_objectSpread(_objectSpread({}, _Server().default.DEFAULT_BUNDLE_OPTIONS), requestOpts), {}, {\n            bundleType: 'todo'\n          })));\n\n        case 18:\n          outputAssets = _context2.sent;\n          _context2.next = 21;\n          return _regeneratorRuntime.awrap((0, _saveAssets.default)(outputAssets, args.platform, args.assetsDest));\n\n        case 21:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 22:\n          _context2.prev = 22;\n          server.end();\n          return _context2.finish(22);\n\n        case 25:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[10,, 22, 25]], Promise);\n}\n\nvar _default = buildBundle;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/bundle/buildBundle.ts"],"names":["outputBundle","require","output","config","maxWorkers","args","resetCache","buildBundleWithConfig","logger","chalk","x","process","sourceMapUrl","path","requestOpts","entryFile","dev","minify","platform","unstable_transformProfile","generateStaticViewConfigs","server","Server","bundle","outputAssets","bundleType","buildBundle"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// @ts-ignore - no typed definition for the package\nimport Server from 'metro/src/Server';\n// @ts-ignore - no typed definition for the package\nconst outputBundle = require('metro/src/shared/output/bundle');\nimport path from 'path';\nimport chalk from 'chalk';\nimport {CommandLineArgs} from './bundleCommandLineArgs';\nimport type {Config} from '@react-native-community/cli-types';\nimport saveAssets from './saveAssets';\nimport {\n  default as loadMetroConfig,\n  MetroConfig,\n} from '../../tools/loadMetroConfig';\nimport {logger} from '@react-native-community/cli-tools';\n\ninterface RequestOptions {\n  entryFile: string;\n  sourceMapUrl: string | undefined;\n  dev: boolean;\n  minify: boolean;\n  platform: string | undefined;\n  unstable_transformProfile: string | undefined;\n  generateStaticViewConfigs: boolean;\n}\n\nexport interface AssetData {\n  __packager_asset: boolean;\n  fileSystemLocation: string;\n  hash: string;\n  height: number | null;\n  httpServerLocation: string;\n  name: string;\n  scales: number[];\n  type: string;\n  width: number | null;\n  files: string[];\n}\n\nasync function buildBundle(\n  args: CommandLineArgs,\n  ctx: Config,\n  output: typeof outputBundle = outputBundle,\n) {\n  const config = await loadMetroConfig(ctx, {\n    maxWorkers: args.maxWorkers,\n    resetCache: args.resetCache,\n    config: args.config,\n  });\n\n  return buildBundleWithConfig(args, config, output);\n}\n\n/**\n * Create a bundle using a pre-loaded Metro config. The config can be\n * re-used for several bundling calls if multiple platforms are being\n * bundled.\n */\nexport async function buildBundleWithConfig(\n  args: CommandLineArgs,\n  config: MetroConfig,\n  output: typeof outputBundle = outputBundle,\n) {\n  if (config.resolver.platforms.indexOf(args.platform) === -1) {\n    logger.error(\n      `Invalid platform ${\n        args.platform ? `\"${chalk.bold(args.platform)}\" ` : ''\n      }selected.`,\n    );\n\n    logger.info(\n      `Available platforms are: ${config.resolver.platforms\n        .map((x) => `\"${chalk.bold(x)}\"`)\n        .join(\n          ', ',\n        )}. If you are trying to bundle for an out-of-tree platform, it may not be installed.`,\n    );\n\n    throw new Error('Bundling failed');\n  }\n\n  // This is used by a bazillion of npm modules we don't control so we don't\n  // have other choice than defining it as an env variable here.\n  process.env.NODE_ENV = args.dev ? 'development' : 'production';\n\n  let sourceMapUrl = args.sourcemapOutput;\n  if (sourceMapUrl && !args.sourcemapUseAbsolutePath) {\n    sourceMapUrl = path.basename(sourceMapUrl);\n  }\n\n  const requestOpts: RequestOptions = {\n    entryFile: args.entryFile,\n    sourceMapUrl,\n    dev: args.dev,\n    minify: args.minify !== undefined ? args.minify : !args.dev,\n    platform: args.platform,\n    unstable_transformProfile: args.unstableTransformProfile,\n    generateStaticViewConfigs: args.generateStaticViewConfigs,\n  };\n  const server = new Server(config);\n\n  try {\n    const bundle = await output.build(server, requestOpts);\n\n    await output.save(bundle, args, logger.info);\n\n    // Save the assets of the bundle\n    const outputAssets: AssetData[] = await server.getAssets({\n      ...Server.DEFAULT_BUNDLE_OPTIONS,\n      ...requestOpts,\n      bundleType: 'todo',\n    });\n\n    // When we're done saving bundle output and the assets, we're done.\n    return await saveAssets(outputAssets, args.platform, args.assetsDest);\n  } finally {\n    server.end();\n  }\n}\n\nexport default buildBundle;\n"]},"metadata":{},"sourceType":"script"}