{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _child_process() {\n  var data = _interopRequireDefault(require(\"child_process\"));\n\n  _child_process = function _child_process() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _parseIOSDevicesList = _interopRequireDefault(require(\"./parseIOSDevicesList\"));\n\nvar _parseXctraceIOSDevicesList = _interopRequireDefault(require(\"./parseXctraceIOSDevicesList\"));\n\nvar _findMatchingSimulator = _interopRequireDefault(require(\"./findMatchingSimulator\"));\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ora() {\n  var data = _interopRequireDefault(require(\"ora\"));\n\n  _ora = function _ora() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction runIOS(_, ctx, args) {\n  if (!ctx.project.ios) {\n    throw new (_cliTools().CLIError)('iOS project folder not found. Are you sure this is a React Native project?');\n  }\n\n  var _ctx$project$ios = ctx.project.ios,\n      xcodeProject = _ctx$project$ios.xcodeProject,\n      sourceDir = _ctx$project$ios.sourceDir;\n  process.chdir(sourceDir);\n\n  if (!xcodeProject) {\n    throw new (_cliTools().CLIError)(\"Could not find Xcode project files in \\\"\" + sourceDir + \"\\\" folder\");\n  }\n\n  var inferredSchemeName = _path().default.basename(xcodeProject.name, _path().default.extname(xcodeProject.name));\n\n  var scheme = args.scheme || inferredSchemeName;\n\n  _cliTools().logger.info(\"Found Xcode \" + (xcodeProject.isWorkspace ? 'workspace' : 'project') + \" \\\"\" + _chalk().default.bold(xcodeProject.name) + \"\\\"\");\n\n  if (!args.device && !args.udid) {\n    return runOnSimulator(xcodeProject, scheme, args);\n  }\n\n  if (args.device && args.udid) {\n    return _cliTools().logger.error('The `device` and `udid` options are mutually exclusive.');\n  }\n\n  var devices;\n\n  try {\n    var out = _execa().default.sync('xcrun', ['xctrace', 'list', 'devices']);\n\n    devices = (0, _parseXctraceIOSDevicesList.default)(out.stderr === '' ? out.stdout : out.stderr);\n  } catch (e) {\n    _cliTools().logger.warn('Support for Xcode 11 and older is deprecated. Please upgrade to Xcode 12.');\n\n    devices = (0, _parseIOSDevicesList.default)(_execa().default.sync('xcrun', ['instruments', '-s']).stdout);\n  }\n\n  if (args.udid) {\n    var device = devices.find(function (d) {\n      return d.udid === args.udid;\n    });\n\n    if (!device) {\n      return _cliTools().logger.error(\"Could not find a device with udid: \\\"\" + _chalk().default.bold(args.udid) + \"\\\". \" + printFoundDevices(devices));\n    }\n\n    if (device.type === 'simulator') {\n      return runOnSimulator(xcodeProject, scheme, args);\n    } else {\n      return runOnDevice(device, scheme, xcodeProject, args);\n    }\n  } else {\n    var physicalDevices = devices.filter(function (d) {\n      return d.type !== 'simulator';\n    });\n\n    var _device = matchingDevice(physicalDevices, args.device);\n\n    if (_device) {\n      return runOnDevice(_device, scheme, xcodeProject, args);\n    }\n  }\n}\n\nfunction runOnSimulator(xcodeProject, scheme, args) {\n  var simulators, fallbackSimulators, selectedSimulator, activeDeveloperDir, buildOutput, appPath, bundleID, result;\n  return _regeneratorRuntime.async(function runOnSimulator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          simulators = JSON.parse(_child_process().default.execFileSync('xcrun', ['simctl', 'list', '--json', 'devices'], {\n            encoding: 'utf8'\n          }));\n          _context.next = 7;\n          break;\n\n        case 4:\n          _context.prev = 4;\n          _context.t0 = _context[\"catch\"](0);\n          throw new (_cliTools().CLIError)('Could not get the simulator list from Xcode. Please open Xcode and try running project directly from there to resolve the remaining issues.', _context.t0);\n\n        case 7:\n          fallbackSimulators = ['iPhone 13', 'iPhone 12', 'iPhone 11'];\n          selectedSimulator = fallbackSimulators.reduce(function (simulator, fallback) {\n            return simulator || (0, _findMatchingSimulator.default)(simulators, {\n              simulator: fallback\n            });\n          }, (0, _findMatchingSimulator.default)(simulators, args));\n\n          if (selectedSimulator) {\n            _context.next = 11;\n            break;\n          }\n\n          throw new (_cliTools().CLIError)(\"No simulator available with \" + (args.simulator ? \"name \\\"\" + args.simulator + \"\\\"\" : \"udid \\\"\" + args.udid + \"\\\"\"));\n\n        case 11:\n          activeDeveloperDir = _child_process().default.execFileSync('xcode-select', ['-p'], {\n            encoding: 'utf8'\n          }).trim();\n\n          _child_process().default.execFileSync('open', [activeDeveloperDir + \"/Applications/Simulator.app\", '--args', '-CurrentDeviceUDID', selectedSimulator.udid]);\n\n          if (!selectedSimulator.booted) {\n            bootSimulator(selectedSimulator);\n          }\n\n          _context.next = 16;\n          return _regeneratorRuntime.awrap(buildProject(xcodeProject, selectedSimulator.udid, scheme, args));\n\n        case 16:\n          buildOutput = _context.sent;\n          appPath = getBuildPath(xcodeProject, args.configuration, buildOutput, scheme);\n\n          _cliTools().logger.info(\"Installing \\\"\" + _chalk().default.bold(appPath) + \"\\\"\");\n\n          _child_process().default.spawnSync('xcrun', ['simctl', 'install', selectedSimulator.udid, appPath], {\n            stdio: 'inherit'\n          });\n\n          bundleID = _child_process().default.execFileSync('/usr/libexec/PlistBuddy', ['-c', 'Print:CFBundleIdentifier', _path().default.join(appPath, 'Info.plist')], {\n            encoding: 'utf8'\n          }).trim();\n\n          _cliTools().logger.info(\"Launching \\\"\" + _chalk().default.bold(bundleID) + \"\\\"\");\n\n          result = _child_process().default.spawnSync('xcrun', ['simctl', 'launch', selectedSimulator.udid, bundleID]);\n\n          if (result.status === 0) {\n            _cliTools().logger.success('Successfully launched the app on the simulator');\n          } else {\n            _cliTools().logger.error('Failed to launch the app on simulator', result.stderr.toString());\n          }\n\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 4]], Promise);\n}\n\nfunction runOnDevice(selectedDevice, scheme, xcodeProject, args) {\n  var isIOSDeployInstalled, buildOutput, appPath, appProcess, iosDeployInstallArgs, iosDeployOutput;\n  return _regeneratorRuntime.async(function runOnDevice$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          isIOSDeployInstalled = _child_process().default.spawnSync('ios-deploy', ['--version'], {\n            encoding: 'utf8'\n          });\n\n          if (!isIOSDeployInstalled.error) {\n            _context2.next = 3;\n            break;\n          }\n\n          throw new (_cliTools().CLIError)(\"Failed to install the app on the device because we couldn't execute the \\\"ios-deploy\\\" command. Please install it by running \\\"\" + _chalk().default.bold('npm install -g ios-deploy') + \"\\\" and try again.\");\n\n        case 3:\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(buildProject(xcodeProject, selectedDevice.udid, scheme, args));\n\n        case 5:\n          buildOutput = _context2.sent;\n\n          if (!(selectedDevice.type === 'catalyst')) {\n            _context2.next = 12;\n            break;\n          }\n\n          appPath = getBuildPath(xcodeProject, args.configuration, buildOutput, scheme, true);\n          appProcess = _child_process().default.spawn(appPath + \"/\" + scheme, [], {\n            detached: true,\n            stdio: 'ignore'\n          });\n          appProcess.unref();\n          _context2.next = 17;\n          break;\n\n        case 12:\n          iosDeployInstallArgs = ['--bundle', getBuildPath(xcodeProject, args.configuration, buildOutput, scheme), '--id', selectedDevice.udid, '--justlaunch'];\n\n          _cliTools().logger.info(\"Installing and launching your app on \" + selectedDevice.name);\n\n          iosDeployOutput = _child_process().default.spawnSync('ios-deploy', iosDeployInstallArgs, {\n            encoding: 'utf8'\n          });\n\n          if (!iosDeployOutput.error) {\n            _context2.next = 17;\n            break;\n          }\n\n          throw new (_cliTools().CLIError)(\"Failed to install the app on the device. We've encountered an error in \\\"ios-deploy\\\" command: \" + iosDeployOutput.error.message);\n\n        case 17:\n          return _context2.abrupt(\"return\", _cliTools().logger.success('Installed the app on the device.'));\n\n        case 18:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction buildProject(xcodeProject, udid, scheme, args) {\n  return new Promise(function (resolve, reject) {\n    var xcodebuildArgs = [xcodeProject.isWorkspace ? '-workspace' : '-project', xcodeProject.name, '-configuration', args.configuration, '-scheme', scheme, '-destination', \"id=\" + udid];\n    var loader = (0, _ora().default)();\n\n    _cliTools().logger.info(\"Building \" + _chalk().default.dim(\"(using \\\"xcodebuild \" + xcodebuildArgs.join(' ') + \"\\\")\"));\n\n    var xcodebuildOutputFormatter;\n\n    if (!args.verbose) {\n      if (xcbeautifyAvailable()) {\n        xcodebuildOutputFormatter = _child_process().default.spawn('xcbeautify', [], {\n          stdio: ['pipe', process.stdout, process.stderr]\n        });\n      } else if (xcprettyAvailable()) {\n        xcodebuildOutputFormatter = _child_process().default.spawn('xcpretty', [], {\n          stdio: ['pipe', process.stdout, process.stderr]\n        });\n      }\n    }\n\n    var buildProcess = _child_process().default.spawn('xcodebuild', xcodebuildArgs, getProcessOptions(args));\n\n    var buildOutput = '';\n    var errorOutput = '';\n    buildProcess.stdout.on('data', function (data) {\n      var stringData = data.toString();\n      buildOutput += stringData;\n\n      if (xcodebuildOutputFormatter) {\n        xcodebuildOutputFormatter.stdin.write(data);\n      } else {\n        if (_cliTools().logger.isVerbose()) {\n          _cliTools().logger.debug(stringData);\n        } else {\n          loader.start(\"Building the app\" + '.'.repeat(buildOutput.length % 10));\n        }\n      }\n    });\n    buildProcess.stderr.on('data', function (data) {\n      errorOutput += data;\n    });\n    buildProcess.on('close', function (code) {\n      if (xcodebuildOutputFormatter) {\n        xcodebuildOutputFormatter.stdin.end();\n      } else {\n        loader.stop();\n      }\n\n      if (code !== 0) {\n        reject(new (_cliTools().CLIError)(\"\\n            Failed to build iOS project.\\n\\n            We ran \\\"xcodebuild\\\" command but it exited with error code \" + code + \". To debug build\\n            logs further, consider building your app with Xcode.app, by opening\\n            \" + xcodeProject.name + \".\\n          \", xcodebuildOutputFormatter ? undefined : buildOutput + '\\n' + errorOutput));\n        return;\n      }\n\n      _cliTools().logger.success('Successfully built the app');\n\n      resolve(buildOutput);\n    });\n  });\n}\n\nfunction bootSimulator(selectedSimulator) {\n  var simulatorFullName = formattedDeviceName(selectedSimulator);\n\n  _cliTools().logger.info(\"Launching \" + simulatorFullName);\n\n  _child_process().default.spawnSync('xcrun', ['simctl', 'boot', selectedSimulator.udid]);\n}\n\nfunction getTargetPaths(buildSettings) {\n  var settings = JSON.parse(buildSettings);\n\n  for (var i in settings) {\n    var wrapperExtension = settings[i].buildSettings.WRAPPER_EXTENSION;\n\n    if (wrapperExtension === 'app') {\n      return {\n        targetBuildDir: settings[i].buildSettings.TARGET_BUILD_DIR,\n        executableFolderPath: settings[i].buildSettings.EXECUTABLE_FOLDER_PATH\n      };\n    }\n  }\n\n  return {};\n}\n\nfunction getBuildPath(xcodeProject, configuration, buildOutput, scheme) {\n  var isCatalyst = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  var buildSettings = _child_process().default.execFileSync('xcodebuild', [xcodeProject.isWorkspace ? '-workspace' : '-project', xcodeProject.name, '-scheme', scheme, '-sdk', getPlatformName(buildOutput), '-configuration', configuration, '-showBuildSettings', '-json'], {\n    encoding: 'utf8'\n  });\n\n  var _getTargetPaths = getTargetPaths(buildSettings),\n      targetBuildDir = _getTargetPaths.targetBuildDir,\n      executableFolderPath = _getTargetPaths.executableFolderPath;\n\n  if (!targetBuildDir) {\n    throw new (_cliTools().CLIError)('Failed to get the target build directory.');\n  }\n\n  if (!executableFolderPath) {\n    throw new (_cliTools().CLIError)('Failed to get the app name.');\n  }\n\n  return \"\" + targetBuildDir + (isCatalyst ? '-maccatalyst' : '') + \"/\" + executableFolderPath;\n}\n\nfunction getPlatformName(buildOutput) {\n  var platformNameMatch = /export PLATFORM_NAME\\\\?=\"?(\\w+)\"?$/m.exec(buildOutput);\n\n  if (!platformNameMatch) {\n    throw new (_cliTools().CLIError)('Couldn\\'t find \"PLATFORM_NAME\" variable in xcodebuild output. Please report this issue and run your project with Xcode instead.');\n  }\n\n  return platformNameMatch[1];\n}\n\nfunction xcbeautifyAvailable() {\n  try {\n    _child_process().default.execSync('xcbeautify --version', {\n      stdio: [0, 'pipe', 'ignore']\n    });\n  } catch (error) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction xcprettyAvailable() {\n  try {\n    _child_process().default.execSync('xcpretty --version', {\n      stdio: [0, 'pipe', 'ignore']\n    });\n  } catch (error) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction matchingDevice(devices, deviceName) {\n  if (deviceName === true) {\n    var firstIOSDevice = devices.find(function (d) {\n      return d.type === 'device';\n    });\n\n    if (firstIOSDevice) {\n      _cliTools().logger.info(\"Using first available device named \\\"\" + _chalk().default.bold(firstIOSDevice.name) + \"\\\" due to lack of name supplied.\");\n\n      return firstIOSDevice;\n    } else {\n      _cliTools().logger.error('No iOS devices connected.');\n\n      return undefined;\n    }\n  }\n\n  var deviceByName = devices.find(function (device) {\n    return device.name === deviceName || formattedDeviceName(device) === deviceName;\n  });\n\n  if (!deviceByName) {\n    _cliTools().logger.error(\"Could not find a device named: \\\"\" + _chalk().default.bold(String(deviceName)) + \"\\\". \" + printFoundDevices(devices));\n  }\n\n  return deviceByName;\n}\n\nfunction formattedDeviceName(simulator) {\n  return simulator.version ? simulator.name + \" (\" + simulator.version + \")\" : simulator.name;\n}\n\nfunction printFoundDevices(devices) {\n  return ['Available devices:'].concat(_toConsumableArray(devices.map(function (device) {\n    return \"  - \" + device.name + \" (\" + device.udid + \")\";\n  }))).join('\\n');\n}\n\nfunction getProcessOptions(_ref) {\n  var packager = _ref.packager,\n      terminal = _ref.terminal,\n      port = _ref.port;\n\n  if (packager) {\n    return {\n      env: _objectSpread(_objectSpread({}, process.env), {}, {\n        RCT_TERMINAL: terminal,\n        RCT_METRO_PORT: port.toString()\n      })\n    };\n  }\n\n  return {\n    env: _objectSpread(_objectSpread({}, process.env), {}, {\n      RCT_TERMINAL: terminal,\n      RCT_NO_LAUNCH_PACKAGER: 'true'\n    })\n  };\n}\n\nvar _default = {\n  name: 'run-ios',\n  description: 'builds your app and starts it on iOS simulator',\n  func: runIOS,\n  examples: [{\n    desc: 'Run on a different simulator, e.g. iPhone SE (2nd generation)',\n    cmd: 'react-native run-ios --simulator \"iPhone SE (2nd generation)\"'\n  }, {\n    desc: \"Run on a connected device, e.g. Max's iPhone\",\n    cmd: 'react-native run-ios --device \"Max\\'s iPhone\"'\n  }, {\n    desc: 'Run on the AppleTV simulator',\n    cmd: 'react-native run-ios --simulator \"Apple TV\"  --scheme \"helloworld-tvOS\"'\n  }],\n  options: [{\n    name: '--simulator <string>',\n    description: 'Explicitly set simulator to use. Optionally include iOS version between ' + 'parenthesis at the end to match an exact version: \"iPhone 6 (10.0)\"',\n    default: 'iPhone 13'\n  }, {\n    name: '--configuration <string>',\n    description: 'Explicitly set the scheme configuration to use',\n    default: 'Debug'\n  }, {\n    name: '--scheme <string>',\n    description: 'Explicitly set Xcode scheme to use'\n  }, {\n    name: '--device [string]',\n    description: 'Explicitly set device to use by name.  The value is not required if you have a single device connected.'\n  }, {\n    name: '--udid <string>',\n    description: 'Explicitly set device to use by udid'\n  }, {\n    name: '--no-packager',\n    description: 'Do not launch packager while building'\n  }, {\n    name: '--verbose',\n    description: 'Do not use xcbeautify or xcpretty even if installed'\n  }, {\n    name: '--port <number>',\n    default: process.env.RCT_METRO_PORT || 8081,\n    parse: Number\n  }, {\n    name: '--terminal <string>',\n    description: 'Launches the Metro Bundler in a new window using the specified terminal path.',\n    default: _cliTools().getDefaultUserTerminal\n  }]\n};\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/runIOS/index.ts"],"names":["ctx","CLIError","sourceDir","process","inferredSchemeName","path","xcodeProject","scheme","args","logger","chalk","runOnSimulator","out","execa","devices","device","d","printFoundDevices","runOnDevice","physicalDevices","matchingDevice","simulators","encoding","fallbackSimulators","selectedSimulator","simulator","fallback","activeDeveloperDir","child_process","bootSimulator","buildOutput","buildProject","appPath","getBuildPath","stdio","bundleID","result","isIOSDeployInstalled","selectedDevice","appProcess","detached","iosDeployInstallArgs","iosDeployOutput","xcodebuildArgs","loader","xcbeautifyAvailable","xcodebuildOutputFormatter","xcprettyAvailable","buildProcess","getProcessOptions","errorOutput","data","stringData","code","reject","name","resolve","simulatorFullName","formattedDeviceName","settings","JSON","wrapperExtension","targetBuildDir","executableFolderPath","EXECUTABLE_FOLDER_PATH","isCatalyst","buildSettings","getPlatformName","getTargetPaths","platformNameMatch","deviceName","firstIOSDevice","deviceByName","String","port","env","RCT_TERMINAL","RCT_METRO_PORT","RCT_NO_LAUNCH_PACKAGER","description","func","examples","desc","cmd","options","default","parse","Number","getDefaultUserTerminal"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport child_process, {\n  ChildProcess,\n  // @ts-ignore\n  SpawnOptionsWithoutStdio,\n} from 'child_process';\nimport path from 'path';\nimport chalk from 'chalk';\nimport {Config, IOSProjectInfo} from '@react-native-community/cli-types';\nimport parseIOSDevicesList from './parseIOSDevicesList';\nimport parseXctraceIOSDevicesList from './parseXctraceIOSDevicesList';\nimport findMatchingSimulator from './findMatchingSimulator';\nimport {\n  logger,\n  CLIError,\n  getDefaultUserTerminal,\n} from '@react-native-community/cli-tools';\nimport {Device} from '../../types';\nimport ora from 'ora';\nimport execa from 'execa';\n\ntype FlagsT = {\n  simulator?: string;\n  configuration: string;\n  scheme?: string;\n  projectPath: string;\n  device?: string | true;\n  udid?: string;\n  packager: boolean;\n  verbose: boolean;\n  port: number;\n  terminal: string | undefined;\n};\n\nfunction runIOS(_: Array<string>, ctx: Config, args: FlagsT) {\n  if (!ctx.project.ios) {\n    throw new CLIError(\n      'iOS project folder not found. Are you sure this is a React Native project?',\n    );\n  }\n\n  const {xcodeProject, sourceDir} = ctx.project.ios;\n\n  process.chdir(sourceDir);\n\n  if (!xcodeProject) {\n    throw new CLIError(\n      `Could not find Xcode project files in \"${sourceDir}\" folder`,\n    );\n  }\n\n  const inferredSchemeName = path.basename(\n    xcodeProject.name,\n    path.extname(xcodeProject.name),\n  );\n  const scheme = args.scheme || inferredSchemeName;\n\n  logger.info(\n    `Found Xcode ${\n      xcodeProject.isWorkspace ? 'workspace' : 'project'\n    } \"${chalk.bold(xcodeProject.name)}\"`,\n  );\n\n  // No need to load all available devices\n  if (!args.device && !args.udid) {\n    return runOnSimulator(xcodeProject, scheme, args);\n  }\n\n  if (args.device && args.udid) {\n    return logger.error(\n      'The `device` and `udid` options are mutually exclusive.',\n    );\n  }\n\n  let devices;\n  try {\n    const out = execa.sync('xcrun', ['xctrace', 'list', 'devices']);\n    devices = parseXctraceIOSDevicesList(\n      // Xcode 12.5 introduced a change to output the list to stdout instead of stderr\n      out.stderr === '' ? out.stdout : out.stderr,\n    );\n  } catch (e) {\n    logger.warn(\n      'Support for Xcode 11 and older is deprecated. Please upgrade to Xcode 12.',\n    );\n    devices = parseIOSDevicesList(\n      execa.sync('xcrun', ['instruments', '-s']).stdout,\n    );\n  }\n\n  if (args.udid) {\n    const device = devices.find((d) => d.udid === args.udid);\n    if (!device) {\n      return logger.error(\n        `Could not find a device with udid: \"${chalk.bold(\n          args.udid,\n        )}\". ${printFoundDevices(devices)}`,\n      );\n    }\n    if (device.type === 'simulator') {\n      return runOnSimulator(xcodeProject, scheme, args);\n    } else {\n      return runOnDevice(device, scheme, xcodeProject, args);\n    }\n  } else {\n    const physicalDevices = devices.filter((d) => d.type !== 'simulator');\n    const device = matchingDevice(physicalDevices, args.device);\n    if (device) {\n      return runOnDevice(device, scheme, xcodeProject, args);\n    }\n  }\n}\n\nasync function runOnSimulator(\n  xcodeProject: IOSProjectInfo,\n  scheme: string,\n  args: FlagsT,\n) {\n  let simulators: {devices: {[index: string]: Array<Device>}};\n  try {\n    simulators = JSON.parse(\n      child_process.execFileSync(\n        'xcrun',\n        ['simctl', 'list', '--json', 'devices'],\n        {encoding: 'utf8'},\n      ),\n    );\n  } catch (error) {\n    throw new CLIError(\n      'Could not get the simulator list from Xcode. Please open Xcode and try running project directly from there to resolve the remaining issues.',\n      error,\n    );\n  }\n\n  /**\n   * If provided simulator does not exist, try simulators in following order\n   * - iPhone 13\n   * - iPhone 12\n   * - iPhone 11\n   */\n  const fallbackSimulators = ['iPhone 13', 'iPhone 12', 'iPhone 11'];\n  const selectedSimulator = fallbackSimulators.reduce((simulator, fallback) => {\n    return (\n      simulator || findMatchingSimulator(simulators, {simulator: fallback})\n    );\n  }, findMatchingSimulator(simulators, args));\n\n  if (!selectedSimulator) {\n    throw new CLIError(\n      `No simulator available with ${\n        args.simulator ? `name \"${args.simulator}\"` : `udid \"${args.udid}\"`\n      }`,\n    );\n  }\n\n  /**\n   * Booting simulator through `xcrun simctl boot` will boot it in the `headless` mode\n   * (running in the background).\n   *\n   * In order for user to see the app and the simulator itself, we have to make sure\n   * that the Simulator.app is running.\n   *\n   * We also pass it `-CurrentDeviceUDID` so that when we launch it for the first time,\n   * it will not boot the \"default\" device, but the one we set. If the app is already running,\n   * this flag has no effect.\n   */\n  const activeDeveloperDir = child_process\n    .execFileSync('xcode-select', ['-p'], {encoding: 'utf8'})\n    .trim();\n\n  child_process.execFileSync('open', [\n    `${activeDeveloperDir}/Applications/Simulator.app`,\n    '--args',\n    '-CurrentDeviceUDID',\n    selectedSimulator.udid,\n  ]);\n\n  if (!selectedSimulator.booted) {\n    bootSimulator(selectedSimulator);\n  }\n\n  const buildOutput = await buildProject(\n    xcodeProject,\n    selectedSimulator.udid,\n    scheme,\n    args,\n  );\n\n  const appPath = getBuildPath(\n    xcodeProject,\n    args.configuration,\n    buildOutput,\n    scheme,\n  );\n\n  logger.info(`Installing \"${chalk.bold(appPath)}\"`);\n\n  child_process.spawnSync(\n    'xcrun',\n    ['simctl', 'install', selectedSimulator.udid, appPath],\n    {stdio: 'inherit'},\n  );\n\n  const bundleID = child_process\n    .execFileSync(\n      '/usr/libexec/PlistBuddy',\n      ['-c', 'Print:CFBundleIdentifier', path.join(appPath, 'Info.plist')],\n      {encoding: 'utf8'},\n    )\n    .trim();\n\n  logger.info(`Launching \"${chalk.bold(bundleID)}\"`);\n\n  const result = child_process.spawnSync('xcrun', [\n    'simctl',\n    'launch',\n    selectedSimulator.udid,\n    bundleID,\n  ]);\n\n  if (result.status === 0) {\n    logger.success('Successfully launched the app on the simulator');\n  } else {\n    logger.error(\n      'Failed to launch the app on simulator',\n      result.stderr.toString(),\n    );\n  }\n}\n\nasync function runOnDevice(\n  selectedDevice: Device,\n  scheme: string,\n  xcodeProject: IOSProjectInfo,\n  args: FlagsT,\n) {\n  const isIOSDeployInstalled = child_process.spawnSync(\n    'ios-deploy',\n    ['--version'],\n    {encoding: 'utf8'},\n  );\n\n  if (isIOSDeployInstalled.error) {\n    throw new CLIError(\n      `Failed to install the app on the device because we couldn't execute the \"ios-deploy\" command. Please install it by running \"${chalk.bold(\n        'npm install -g ios-deploy',\n      )}\" and try again.`,\n    );\n  }\n\n  const buildOutput = await buildProject(\n    xcodeProject,\n    selectedDevice.udid,\n    scheme,\n    args,\n  );\n\n  if (selectedDevice.type === 'catalyst') {\n    const appPath = getBuildPath(\n      xcodeProject,\n      args.configuration,\n      buildOutput,\n      scheme,\n      true,\n    );\n    const appProcess = child_process.spawn(`${appPath}/${scheme}`, [], {\n      detached: true,\n      stdio: 'ignore',\n    });\n    appProcess.unref();\n  } else {\n    const iosDeployInstallArgs = [\n      '--bundle',\n      getBuildPath(xcodeProject, args.configuration, buildOutput, scheme),\n      '--id',\n      selectedDevice.udid,\n      '--justlaunch',\n    ];\n\n    logger.info(`Installing and launching your app on ${selectedDevice.name}`);\n\n    const iosDeployOutput = child_process.spawnSync(\n      'ios-deploy',\n      iosDeployInstallArgs,\n      {encoding: 'utf8'},\n    );\n\n    if (iosDeployOutput.error) {\n      throw new CLIError(\n        `Failed to install the app on the device. We've encountered an error in \"ios-deploy\" command: ${iosDeployOutput.error.message}`,\n      );\n    }\n  }\n\n  return logger.success('Installed the app on the device.');\n}\n\nfunction buildProject(\n  xcodeProject: IOSProjectInfo,\n  udid: string | undefined,\n  scheme: string,\n  args: FlagsT,\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const xcodebuildArgs = [\n      xcodeProject.isWorkspace ? '-workspace' : '-project',\n      xcodeProject.name,\n      '-configuration',\n      args.configuration,\n      '-scheme',\n      scheme,\n      '-destination',\n      `id=${udid}`,\n    ];\n    // @todo use `getLoader` from cli-tools package\n    const loader = ora();\n    logger.info(\n      `Building ${chalk.dim(\n        `(using \"xcodebuild ${xcodebuildArgs.join(' ')}\")`,\n      )}`,\n    );\n    let xcodebuildOutputFormatter: ChildProcess | any;\n    if (!args.verbose) {\n      if (xcbeautifyAvailable()) {\n        xcodebuildOutputFormatter = child_process.spawn('xcbeautify', [], {\n          stdio: ['pipe', process.stdout, process.stderr],\n        });\n      } else if (xcprettyAvailable()) {\n        xcodebuildOutputFormatter = child_process.spawn('xcpretty', [], {\n          stdio: ['pipe', process.stdout, process.stderr],\n        });\n      }\n    }\n    const buildProcess = child_process.spawn(\n      'xcodebuild',\n      xcodebuildArgs,\n      getProcessOptions(args),\n    );\n    let buildOutput = '';\n    let errorOutput = '';\n    buildProcess.stdout.on('data', (data: Buffer) => {\n      const stringData = data.toString();\n      buildOutput += stringData;\n      if (xcodebuildOutputFormatter) {\n        xcodebuildOutputFormatter.stdin.write(data);\n      } else {\n        if (logger.isVerbose()) {\n          logger.debug(stringData);\n        } else {\n          loader.start(\n            `Building the app${'.'.repeat(buildOutput.length % 10)}`,\n          );\n        }\n      }\n    });\n    buildProcess.stderr.on('data', (data: Buffer) => {\n      errorOutput += data;\n    });\n    buildProcess.on('close', (code: number) => {\n      if (xcodebuildOutputFormatter) {\n        xcodebuildOutputFormatter.stdin.end();\n      } else {\n        loader.stop();\n      }\n      if (code !== 0) {\n        reject(\n          new CLIError(\n            `\n            Failed to build iOS project.\n\n            We ran \"xcodebuild\" command but it exited with error code ${code}. To debug build\n            logs further, consider building your app with Xcode.app, by opening\n            ${xcodeProject.name}.\n          `,\n            xcodebuildOutputFormatter\n              ? undefined\n              : buildOutput + '\\n' + errorOutput,\n          ),\n        );\n        return;\n      }\n      logger.success('Successfully built the app');\n      resolve(buildOutput);\n    });\n  });\n}\n\nfunction bootSimulator(selectedSimulator: Device) {\n  const simulatorFullName = formattedDeviceName(selectedSimulator);\n  logger.info(`Launching ${simulatorFullName}`);\n\n  child_process.spawnSync('xcrun', ['simctl', 'boot', selectedSimulator.udid]);\n}\n\nfunction getTargetPaths(buildSettings: string) {\n  const settings = JSON.parse(buildSettings);\n\n  // Find app in all building settings - look for WRAPPER_EXTENSION: 'app',\n  for (const i in settings) {\n    const wrapperExtension = settings[i].buildSettings.WRAPPER_EXTENSION;\n\n    if (wrapperExtension === 'app') {\n      return {\n        targetBuildDir: settings[i].buildSettings.TARGET_BUILD_DIR,\n        executableFolderPath: settings[i].buildSettings.EXECUTABLE_FOLDER_PATH,\n      };\n    }\n  }\n\n  return {};\n}\n\nfunction getBuildPath(\n  xcodeProject: IOSProjectInfo,\n  configuration: string,\n  buildOutput: string,\n  scheme: string,\n  isCatalyst: boolean = false,\n) {\n  const buildSettings = child_process.execFileSync(\n    'xcodebuild',\n    [\n      xcodeProject.isWorkspace ? '-workspace' : '-project',\n      xcodeProject.name,\n      '-scheme',\n      scheme,\n      '-sdk',\n      getPlatformName(buildOutput),\n      '-configuration',\n      configuration,\n      '-showBuildSettings',\n      '-json',\n    ],\n    {encoding: 'utf8'},\n  );\n  const {targetBuildDir, executableFolderPath} = getTargetPaths(buildSettings);\n\n  if (!targetBuildDir) {\n    throw new CLIError('Failed to get the target build directory.');\n  }\n\n  if (!executableFolderPath) {\n    throw new CLIError('Failed to get the app name.');\n  }\n\n  return `${targetBuildDir}${\n    isCatalyst ? '-maccatalyst' : ''\n  }/${executableFolderPath}`;\n}\n\nfunction getPlatformName(buildOutput: string) {\n  // Xcode can sometimes escape `=` with a backslash or put the value in quotes\n  const platformNameMatch = /export PLATFORM_NAME\\\\?=\"?(\\w+)\"?$/m.exec(\n    buildOutput,\n  );\n  if (!platformNameMatch) {\n    throw new CLIError(\n      'Couldn\\'t find \"PLATFORM_NAME\" variable in xcodebuild output. Please report this issue and run your project with Xcode instead.',\n    );\n  }\n  return platformNameMatch[1];\n}\n\nfunction xcbeautifyAvailable() {\n  try {\n    child_process.execSync('xcbeautify --version', {\n      stdio: [0, 'pipe', 'ignore'],\n    });\n  } catch (error) {\n    return false;\n  }\n  return true;\n}\n\nfunction xcprettyAvailable() {\n  try {\n    child_process.execSync('xcpretty --version', {\n      stdio: [0, 'pipe', 'ignore'],\n    });\n  } catch (error) {\n    return false;\n  }\n  return true;\n}\n\nfunction matchingDevice(\n  devices: Array<Device>,\n  deviceName: string | true | undefined,\n) {\n  if (deviceName === true) {\n    const firstIOSDevice = devices.find((d) => d.type === 'device')!;\n    if (firstIOSDevice) {\n      logger.info(\n        `Using first available device named \"${chalk.bold(\n          firstIOSDevice.name,\n        )}\" due to lack of name supplied.`,\n      );\n      return firstIOSDevice;\n    } else {\n      logger.error('No iOS devices connected.');\n      return undefined;\n    }\n  }\n  const deviceByName = devices.find(\n    (device) =>\n      device.name === deviceName || formattedDeviceName(device) === deviceName,\n  );\n  if (!deviceByName) {\n    logger.error(\n      `Could not find a device named: \"${chalk.bold(\n        String(deviceName),\n      )}\". ${printFoundDevices(devices)}`,\n    );\n  }\n  return deviceByName;\n}\n\nfunction formattedDeviceName(simulator: Device) {\n  return simulator.version\n    ? `${simulator.name} (${simulator.version})`\n    : simulator.name;\n}\n\nfunction printFoundDevices(devices: Array<Device>) {\n  return [\n    'Available devices:',\n    ...devices.map((device) => `  - ${device.name} (${device.udid})`),\n  ].join('\\n');\n}\n\nfunction getProcessOptions({\n  packager,\n  terminal,\n  port,\n}: {\n  packager: boolean;\n  terminal: string | undefined;\n  port: number;\n}): SpawnOptionsWithoutStdio {\n  if (packager) {\n    return {\n      env: {\n        ...process.env,\n        RCT_TERMINAL: terminal,\n        RCT_METRO_PORT: port.toString(),\n      },\n    };\n  }\n\n  return {\n    env: {\n      ...process.env,\n      RCT_TERMINAL: terminal,\n      RCT_NO_LAUNCH_PACKAGER: 'true',\n    },\n  };\n}\n\nexport default {\n  name: 'run-ios',\n  description: 'builds your app and starts it on iOS simulator',\n  func: runIOS,\n  examples: [\n    {\n      desc: 'Run on a different simulator, e.g. iPhone SE (2nd generation)',\n      cmd: 'react-native run-ios --simulator \"iPhone SE (2nd generation)\"',\n    },\n    {\n      desc: \"Run on a connected device, e.g. Max's iPhone\",\n      cmd: 'react-native run-ios --device \"Max\\'s iPhone\"',\n    },\n    {\n      desc: 'Run on the AppleTV simulator',\n      cmd:\n        'react-native run-ios --simulator \"Apple TV\"  --scheme \"helloworld-tvOS\"',\n    },\n  ],\n  options: [\n    {\n      name: '--simulator <string>',\n      description:\n        'Explicitly set simulator to use. Optionally include iOS version between ' +\n        'parenthesis at the end to match an exact version: \"iPhone 6 (10.0)\"',\n      default: 'iPhone 13',\n    },\n    {\n      name: '--configuration <string>',\n      description: 'Explicitly set the scheme configuration to use',\n      default: 'Debug',\n    },\n    {\n      name: '--scheme <string>',\n      description: 'Explicitly set Xcode scheme to use',\n    },\n    {\n      name: '--device [string]',\n      description:\n        'Explicitly set device to use by name.  The value is not required if you have a single device connected.',\n    },\n    {\n      name: '--udid <string>',\n      description: 'Explicitly set device to use by udid',\n    },\n    {\n      name: '--no-packager',\n      description: 'Do not launch packager while building',\n    },\n    {\n      name: '--verbose',\n      description: 'Do not use xcbeautify or xcpretty even if installed',\n    },\n    {\n      name: '--port <number>',\n      default: process.env.RCT_METRO_PORT || 8081,\n      parse: Number,\n    },\n    {\n      name: '--terminal <string>',\n      description:\n        'Launches the Metro Bundler in a new window using the specified terminal path.',\n      default: getDefaultUserTerminal,\n    },\n  ],\n};\n"]},"metadata":{},"sourceType":"script"}