{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction getAndroidAssetSuffix(scale) {\n  switch (scale) {\n    case 0.75:\n      return 'ldpi';\n\n    case 1:\n      return 'mdpi';\n\n    case 1.5:\n      return 'hdpi';\n\n    case 2:\n      return 'xhdpi';\n\n    case 3:\n      return 'xxhdpi';\n\n    case 4:\n      return 'xxxhdpi';\n\n    default:\n      return '';\n  }\n}\n\nvar drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'webp', 'xml']);\n\nfunction getAndroidResourceFolderName(asset, scale) {\n  if (!drawableFileTypes.has(asset.type)) {\n    return 'raw';\n  }\n\n  var suffix = getAndroidAssetSuffix(scale);\n\n  if (!suffix) {\n    throw new Error(\"Don't know which android drawable suffix to use for asset: \" + JSON.stringify(asset));\n  }\n\n  var androidFolder = \"drawable-\" + suffix;\n  return androidFolder;\n}\n\nfunction getAndroidResourceIdentifier(asset) {\n  var folderPath = getBasePath(asset);\n  return (folderPath + \"/\" + asset.name).toLowerCase().replace(/\\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');\n}\n\nfunction getBasePath(asset) {\n  var basePath = asset.httpServerLocation;\n\n  if (basePath[0] === '/') {\n    basePath = basePath.substr(1);\n  }\n\n  return basePath;\n}\n\nvar _default = {\n  getAndroidAssetSuffix: getAndroidAssetSuffix,\n  getAndroidResourceFolderName: getAndroidResourceFolderName,\n  getAndroidResourceIdentifier: getAndroidResourceIdentifier,\n  getBasePath: getBasePath\n};\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/bundle/assetPathUtils.ts"],"names":["drawableFileTypes","asset","suffix","getAndroidAssetSuffix","JSON","androidFolder","folderPath","getBasePath","basePath","getAndroidResourceFolderName","getAndroidResourceIdentifier"],"mappings":";;;;;;;AAkBA,SAAA,qBAAA,CAAA,KAAA,EAAsD;EACpD,QAAA,KAAA;IACE,KAAA,IAAA;MACE,OAAA,MAAA;;IACF,KAAA,CAAA;MACE,OAAA,MAAA;;IACF,KAAA,GAAA;MACE,OAAA,MAAA;;IACF,KAAA,CAAA;MACE,OAAA,OAAA;;IACF,KAAA,CAAA;MACE,OAAA,QAAA;;IACF,KAAA,CAAA;MACE,OAAA,SAAA;;IACF;MACE,OAAA,EAAA;EAdJ;AAkBF;;AACA,IAAMA,iBAAiB,GAAG,IAAA,GAAA,CAAgB,CAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAA1C,KAA0C,CAAhB,CAA1B;;AASA,SAAA,4BAAA,CAAA,KAAA,EAAA,KAAA,EAGU;EACR,IAAI,CAACA,iBAAiB,CAAjBA,GAAAA,CAAsBC,KAAK,CAAhC,IAAKD,CAAL,EAAwC;IACtC,OAAA,KAAA;EACD;;EACD,IAAME,MAAM,GAAGC,qBAAqB,CAApC,KAAoC,CAApC;;EACA,IAAI,CAAJ,MAAA,EAAa;IACX,MAAM,IAAA,KAAA,iEAC0DC,IAAI,CAAJA,SAAAA,CADhE,KACgEA,CAD1D,CAAN;EAKD;;EACD,IAAMC,aAAa,iBAAnB,MAAA;EACA,OAAA,aAAA;AACD;;AAED,SAAA,4BAAA,CAAA,KAAA,EAAoE;EAClE,IAAMC,UAAU,GAAGC,WAAW,CAA9B,KAA8B,CAA9B;EACA,OAAQ,CAAED,UAAF,SAAgBL,KAAK,CAAtB,IAAC,EAAD,WAAC,GAAD,OAAC,CAAD,KAAC,EAAD,GAAC,EAAD,OAAC,CAAD,eAAC,EAAD,EAAC,EAAD,OAAC,CAAD,UAAC,EAF0D,EAE1D,CAAR;AAKD;;AAED,SAAA,WAAA,CAAA,KAAA,EAAmD;EACjD,IAAIO,QAAQ,GAAGP,KAAK,CAApB,kBAAA;;EACA,IAAIO,QAAQ,CAARA,CAAQ,CAARA,KAAJ,GAAA,EAAyB;IACvBA,QAAQ,GAAGA,QAAQ,CAARA,MAAAA,CAAXA,CAAWA,CAAXA;EACD;;EACD,OAAA,QAAA;AACD;;eAEc;EACbL,qBADa,EACbA,qBADa;EAEbM,4BAFa,EAEbA,4BAFa;EAGbC,4BAHa,EAGbA,4BAHa;EAIbH,WAAAA,EAAAA;AAJa,C","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nexport interface PackagerAsset {\n  httpServerLocation: string;\n  name: string;\n  type: string;\n}\n\n/**\n * FIXME: using number to represent discrete scale numbers is fragile in essence because of\n * floating point numbers imprecision.\n */\nfunction getAndroidAssetSuffix(scale: number): string {\n  switch (scale) {\n    case 0.75:\n      return 'ldpi';\n    case 1:\n      return 'mdpi';\n    case 1.5:\n      return 'hdpi';\n    case 2:\n      return 'xhdpi';\n    case 3:\n      return 'xxhdpi';\n    case 4:\n      return 'xxxhdpi';\n    default:\n      return '';\n  }\n}\n\n// See https://developer.android.com/guide/topics/resources/drawable-resource.html\nconst drawableFileTypes = new Set<string>([\n  'gif',\n  'jpeg',\n  'jpg',\n  'png',\n  'webp',\n  'xml',\n]);\n\nfunction getAndroidResourceFolderName(\n  asset: PackagerAsset,\n  scale: number,\n): string {\n  if (!drawableFileTypes.has(asset.type)) {\n    return 'raw';\n  }\n  const suffix = getAndroidAssetSuffix(scale);\n  if (!suffix) {\n    throw new Error(\n      `Don't know which android drawable suffix to use for asset: ${JSON.stringify(\n        asset,\n      )}`,\n    );\n  }\n  const androidFolder = `drawable-${suffix}`;\n  return androidFolder;\n}\n\nfunction getAndroidResourceIdentifier(asset: PackagerAsset): string {\n  const folderPath = getBasePath(asset);\n  return `${folderPath}/${asset.name}`\n    .toLowerCase()\n    .replace(/\\//g, '_') // Encode folder structure in file name\n    .replace(/([^a-z0-9_])/g, '') // Remove illegal chars\n    .replace(/^assets_/, ''); // Remove \"assets_\" prefix\n}\n\nfunction getBasePath(asset: PackagerAsset): string {\n  let basePath = asset.httpServerLocation;\n  if (basePath[0] === '/') {\n    basePath = basePath.substr(1);\n  }\n  return basePath;\n}\n\nexport default {\n  getAndroidAssetSuffix,\n  getAndroidResourceFolderName,\n  getAndroidResourceIdentifier,\n  getBasePath,\n};\n"]},"metadata":{},"sourceType":"script"}