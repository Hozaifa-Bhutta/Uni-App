{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction constantFoldingPlugin(context) {\n  var t = context.types;\n  var isVariableDeclarator = t.isVariableDeclarator;\n  var traverse = context.traverse;\n\n  var evaluate = function evaluate(path) {\n    var state = {\n      safe: true\n    };\n\n    var unsafe = function unsafe(path, state) {\n      state.safe = false;\n    };\n\n    path.traverse({\n      CallExpression: unsafe,\n      AssignmentExpression: unsafe\n    }, state);\n\n    try {\n      if (!state.safe) {\n        return {\n          confident: false,\n          value: null\n        };\n      }\n\n      var evaluated = path.evaluate();\n      return {\n        confident: evaluated.confident,\n        value: evaluated.value\n      };\n    } catch (_unused) {\n      return {\n        confident: false,\n        value: null\n      };\n    }\n  };\n\n  var FunctionDeclaration = {\n    exit: function exit(path, state) {\n      var binding = path.node.id != null && path.scope.parent.getBinding(path.node.id.name);\n\n      if (binding && !binding.referenced) {\n        state.stripped = true;\n        path.remove();\n      }\n    }\n  };\n  var FunctionExpression = {\n    exit: function exit(path, state) {\n      var parentPath = path.parentPath;\n      var parentNode = parentPath === null || parentPath === void 0 ? void 0 : parentPath.node;\n\n      if (isVariableDeclarator(parentNode) && parentNode.id.name != null) {\n        var binding = parentPath === null || parentPath === void 0 ? void 0 : parentPath.scope.getBinding(parentNode.id.name);\n\n        if (binding && !binding.referenced) {\n          state.stripped = true;\n          parentPath === null || parentPath === void 0 ? void 0 : parentPath.remove();\n        }\n      }\n    }\n  };\n  var Conditional = {\n    exit: function exit(path, state) {\n      var node = path.node;\n      var result = evaluate(path.get(\"test\"));\n\n      if (result.confident) {\n        state.stripped = true;\n\n        if (result.value || node.alternate) {\n          path.replaceWith(result.value ? node.consequent : node.alternate);\n        } else if (!result.value) {\n          path.remove();\n        }\n      }\n    }\n  };\n  var Expression = {\n    exit: function exit(path) {\n      var result = evaluate(path);\n\n      if (result.confident) {\n        path.replaceWith(t.valueToNode(result.value));\n        path.skip();\n      }\n    }\n  };\n  var LogicalExpression = {\n    exit: function exit(path) {\n      var node = path.node;\n      var result = evaluate(path.get(\"left\"));\n\n      if (result.confident) {\n        var value = result.value;\n\n        switch (node.operator) {\n          case \"||\":\n            path.replaceWith(value ? node.left : node.right);\n            break;\n\n          case \"&&\":\n            path.replaceWith(value ? node.right : node.left);\n            break;\n\n          case \"??\":\n            path.replaceWith(value == null ? node.right : node.left);\n            break;\n        }\n      }\n    }\n  };\n  var Program = {\n    enter: function enter(path, state) {\n      state.stripped = false;\n    },\n    exit: function exit(path, state) {\n      path.traverse({\n        ArrowFunctionExpression: FunctionExpression,\n        ConditionalExpression: Conditional,\n        FunctionDeclaration: FunctionDeclaration,\n        FunctionExpression: FunctionExpression,\n        IfStatement: Conditional\n      }, state);\n\n      if (state.stripped) {\n        traverse.cache.clearScope();\n        path.scope.crawl();\n        Program.enter(path, state);\n        path.traverse(visitor, {\n          stripped: false\n        });\n        Program.exit(path, state);\n      }\n    }\n  };\n  var visitor = {\n    BinaryExpression: Expression,\n    LogicalExpression: LogicalExpression,\n    Program: _objectSpread({}, Program),\n    UnaryExpression: Expression\n  };\n  return {\n    visitor: visitor\n  };\n}\n\nmodule.exports = constantFoldingPlugin;","map":{"version":3,"names":["constantFoldingPlugin","context","t","types","isVariableDeclarator","traverse","evaluate","path","state","safe","unsafe","CallExpression","AssignmentExpression","confident","value","evaluated","FunctionDeclaration","exit","binding","node","id","scope","parent","getBinding","name","referenced","stripped","remove","FunctionExpression","parentPath","parentNode","Conditional","result","get","alternate","replaceWith","consequent","Expression","valueToNode","skip","LogicalExpression","operator","left","right","Program","enter","ArrowFunctionExpression","ConditionalExpression","IfStatement","cache","clearScope","crawl","visitor","BinaryExpression","UnaryExpression","module","exports"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/metro-transform-plugins/src/constant-folding-plugin.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\"use strict\";\n\n// This is only a typeof import, no runtime dependency exists\n// eslint-disable-next-line import/no-extraneous-dependencies\nfunction constantFoldingPlugin(context) {\n  const t = context.types;\n  const { isVariableDeclarator } = t;\n  const traverse = context.traverse;\n\n  const evaluate = function (path) {\n    const state = {\n      safe: true,\n    };\n\n    const unsafe = (path, state) => {\n      state.safe = false;\n    };\n\n    path.traverse(\n      {\n        CallExpression: unsafe,\n        AssignmentExpression: unsafe,\n      },\n      state\n    );\n\n    try {\n      if (!state.safe) {\n        return {\n          confident: false,\n          value: null,\n        };\n      }\n\n      const evaluated = path.evaluate();\n      return {\n        confident: evaluated.confident,\n        value: evaluated.value,\n      };\n    } catch {\n      return {\n        confident: false,\n        value: null,\n      };\n    }\n  };\n\n  const FunctionDeclaration = {\n    exit(path, state) {\n      const binding =\n        path.node.id != null && path.scope.parent.getBinding(path.node.id.name);\n\n      if (binding && !binding.referenced) {\n        state.stripped = true;\n        path.remove();\n      }\n    },\n  };\n  const FunctionExpression = {\n    exit(path, state) {\n      const parentPath = path.parentPath;\n      const parentNode =\n        parentPath === null || parentPath === void 0 ? void 0 : parentPath.node;\n\n      if (isVariableDeclarator(parentNode) && parentNode.id.name != null) {\n        const binding =\n          parentPath === null || parentPath === void 0\n            ? void 0\n            : parentPath.scope.getBinding(parentNode.id.name);\n\n        if (binding && !binding.referenced) {\n          state.stripped = true;\n          parentPath === null || parentPath === void 0\n            ? void 0\n            : parentPath.remove();\n        }\n      }\n    },\n  };\n  const Conditional = {\n    exit(path, state) {\n      const node = path.node;\n      const result = evaluate(path.get(\"test\"));\n\n      if (result.confident) {\n        state.stripped = true;\n\n        if (result.value || node.alternate) {\n          // $FlowFixMe Flow error uncovered by typing Babel more strictly\n          path.replaceWith(result.value ? node.consequent : node.alternate);\n        } else if (!result.value) {\n          path.remove();\n        }\n      }\n    },\n  };\n  const Expression = {\n    exit(path) {\n      const result = evaluate(path);\n\n      if (result.confident) {\n        path.replaceWith(t.valueToNode(result.value));\n        path.skip();\n      }\n    },\n  };\n  const LogicalExpression = {\n    exit(path) {\n      const node = path.node;\n      const result = evaluate(path.get(\"left\"));\n\n      if (result.confident) {\n        const value = result.value;\n\n        switch (node.operator) {\n          case \"||\":\n            path.replaceWith(value ? node.left : node.right);\n            break;\n\n          case \"&&\":\n            path.replaceWith(value ? node.right : node.left);\n            break;\n\n          case \"??\":\n            path.replaceWith(value == null ? node.right : node.left);\n            break;\n        }\n      }\n    },\n  };\n  const Program = {\n    enter(path, state) {\n      state.stripped = false;\n    },\n\n    exit(path, state) {\n      path.traverse(\n        {\n          ArrowFunctionExpression: FunctionExpression,\n          ConditionalExpression: Conditional,\n          FunctionDeclaration,\n          FunctionExpression,\n          IfStatement: Conditional,\n        },\n        state\n      );\n\n      if (state.stripped) {\n        traverse.cache.clearScope();\n        path.scope.crawl(); // Re-traverse all program, if we removed any blocks. Manually re-call\n        // enter and exit, because traversing a Program node won't call them.\n\n        Program.enter(path, state);\n        path.traverse(visitor, {\n          stripped: false,\n        });\n        Program.exit(path, state);\n      }\n    },\n  };\n  const visitor = {\n    BinaryExpression: Expression,\n    LogicalExpression,\n    Program: { ...Program },\n    // Babel mutates objects passed.\n    UnaryExpression: Expression,\n  };\n  return {\n    visitor,\n  };\n}\n\nmodule.exports = constantFoldingPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}