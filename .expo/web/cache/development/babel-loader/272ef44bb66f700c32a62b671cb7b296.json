{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _androidWinHelpers = require(\"../windows/androidWinHelpers\");\n\nvar _downloadAndUnzip = require(\"../downloadAndUnzip\");\n\nvar _environmentVariables = require(\"../windows/environmentVariables\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar getBuildToolsVersion = function getBuildToolsVersion() {\n  var projectRoot = '';\n\n  try {\n    projectRoot = (0, _cliTools().findProjectRoot)();\n  } catch (_unused) {\n    _cliTools().logger.log();\n\n    _cliTools().logger.warn(\"We couldn't find a package.json in this directory. Android SDK checks may fail. Doctor works best in a React Native project root.\");\n  }\n\n  var gradleBuildFilePath = _path().default.join(projectRoot, 'android/build.gradle');\n\n  var buildToolsVersionEntry = 'buildToolsVersion';\n\n  if (!_fs().default.existsSync(gradleBuildFilePath)) {\n    return 'Not Found';\n  }\n\n  var gradleBuildFile = _fs().default.readFileSync(gradleBuildFilePath, 'utf-8');\n\n  var buildToolsVersionIndex = gradleBuildFile.indexOf(buildToolsVersionEntry);\n  var buildToolsVersion = (gradleBuildFile.substring(buildToolsVersionIndex).split('\\n')[0].match(/\\d|\\../g) || []).join('');\n  return buildToolsVersion || 'Not Found';\n};\n\nvar installMessage = \"Read more about how to update Android SDK at \" + _chalk().default.dim('https://developer.android.com/studio');\n\nvar isSDKInstalled = function isSDKInstalled(environmentInfo) {\n  var version = environmentInfo.SDKs['Android SDK'];\n  return version !== 'Not Found';\n};\n\nvar _default = {\n  label: 'Android SDK',\n  description: 'Required for building and installing your app on Android',\n  getDiagnostics: function getDiagnostics(_ref) {\n    var SDKs, requiredVersion, buildTools, isAndroidSDKInstalled, isRequiredVersionInstalled;\n    return _regeneratorRuntime.async(function getDiagnostics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            SDKs = _ref.SDKs;\n            requiredVersion = getBuildToolsVersion();\n            buildTools = typeof SDKs['Android SDK'] === 'string' ? SDKs['Android SDK'] : SDKs['Android SDK']['Build Tools'];\n            isAndroidSDKInstalled = Array.isArray(buildTools);\n            isRequiredVersionInstalled = isAndroidSDKInstalled ? buildTools.includes(requiredVersion) : false;\n            return _context.abrupt(\"return\", {\n              versions: isAndroidSDKInstalled ? buildTools : SDKs['Android SDK'],\n              versionRange: requiredVersion,\n              needsToBeFixed: !isRequiredVersionInstalled\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  win32AutomaticFix: function win32AutomaticFix(_ref2) {\n    var loader, cliToolsUrl, systemImage, componentsToInstall, androidSDKRoot, _i, _componentsToInstall, component, _await, hypervisor, installed;\n\n    return _regeneratorRuntime.async(function win32AutomaticFix$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            loader = _ref2.loader;\n            cliToolsUrl = 'https://dl.google.com/android/repository/commandlinetools-win-6200805_latest.zip';\n            systemImage = 'system-images;android-28;google_apis;x86_64';\n            componentsToInstall = ['platform-tools', 'build-tools;29.0.3', 'platforms;android-29', 'build-tools;28.0.3', 'platforms;android-28', 'emulator', systemImage, '--licenses'];\n            androidSDKRoot = (0, _androidWinHelpers.getAndroidSdkRootInstallation)();\n\n            if (!(androidSDKRoot === '')) {\n              _context2.next = 8;\n              break;\n            }\n\n            loader.fail('There was an error finding the Android SDK root');\n            return _context2.abrupt(\"return\");\n\n          case 8:\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap((0, _downloadAndUnzip.downloadAndUnzip)({\n              loader: loader,\n              downloadUrl: cliToolsUrl,\n              component: 'Android Command Line Tools',\n              installPath: androidSDKRoot\n            }));\n\n          case 10:\n            _i = 0, _componentsToInstall = componentsToInstall;\n\n          case 11:\n            if (!(_i < _componentsToInstall.length)) {\n              _context2.next = 24;\n              break;\n            }\n\n            component = _componentsToInstall[_i];\n            loader.text = \"Installing \\\"\" + component + \"\\\" (this may take a few minutes)\";\n            _context2.prev = 14;\n            _context2.next = 17;\n            return _regeneratorRuntime.awrap((0, _androidWinHelpers.installComponent)(component, androidSDKRoot));\n\n          case 17:\n            _context2.next = 21;\n            break;\n\n          case 19:\n            _context2.prev = 19;\n            _context2.t0 = _context2[\"catch\"](14);\n\n          case 21:\n            _i++;\n            _context2.next = 11;\n            break;\n\n          case 24:\n            loader.text = 'Updating environment variables';\n            _context2.next = 27;\n            return _regeneratorRuntime.awrap((0, _environmentVariables.setEnvironment)('ANDROID_SDK_ROOT', androidSDKRoot));\n\n          case 27:\n            _context2.next = 29;\n            return _regeneratorRuntime.awrap((0, _environmentVariables.setEnvironment)('ANDROID_HOME', androidSDKRoot));\n\n          case 29:\n            _context2.next = 31;\n            return _regeneratorRuntime.awrap((0, _environmentVariables.updateEnvironment)('PATH', _path().default.join(androidSDKRoot, 'tools')));\n\n          case 31:\n            _context2.next = 33;\n            return _regeneratorRuntime.awrap((0, _environmentVariables.updateEnvironment)('PATH', _path().default.join(androidSDKRoot, 'platform-tools')));\n\n          case 33:\n            loader.text = 'Configuring Hypervisor for faster emulation, this might prompt UAC';\n            _context2.next = 36;\n            return _regeneratorRuntime.awrap((0, _androidWinHelpers.getBestHypervisor)(androidSDKRoot));\n\n          case 36:\n            _await = _context2.sent;\n            hypervisor = _await.hypervisor;\n            installed = _await.installed;\n\n            if (installed) {\n              _context2.next = 56;\n              break;\n            }\n\n            if (!(hypervisor === 'none')) {\n              _context2.next = 43;\n              break;\n            }\n\n            loader.warn('Android SDK configured but virtualization could not be enabled.');\n            return _context2.abrupt(\"return\");\n\n          case 43:\n            if (!(hypervisor === 'AMDH')) {\n              _context2.next = 48;\n              break;\n            }\n\n            _context2.next = 46;\n            return _regeneratorRuntime.awrap((0, _androidWinHelpers.enableAMDH)(androidSDKRoot));\n\n          case 46:\n            _context2.next = 56;\n            break;\n\n          case 48:\n            if (!(hypervisor === 'HAXM')) {\n              _context2.next = 53;\n              break;\n            }\n\n            _context2.next = 51;\n            return _regeneratorRuntime.awrap((0, _androidWinHelpers.enableHAXM)(androidSDKRoot));\n\n          case 51:\n            _context2.next = 56;\n            break;\n\n          case 53:\n            if (!(hypervisor === 'WHPX')) {\n              _context2.next = 56;\n              break;\n            }\n\n            _context2.next = 56;\n            return _regeneratorRuntime.awrap((0, _androidWinHelpers.enableWHPX)());\n\n          case 56:\n            loader.text = 'Creating AVD';\n            _context2.next = 59;\n            return _regeneratorRuntime.awrap((0, _androidWinHelpers.createAVD)(androidSDKRoot, 'pixel_9.0', 'pixel', systemImage));\n\n          case 59:\n            loader.succeed('Android SDK configured. You might need to restart your PC for all changes to take effect.');\n\n          case 60:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[14, 19]], Promise);\n  },\n  runAutomaticFix: function runAutomaticFix(_ref3) {\n    var loader, logManualInstallation, environmentInfo;\n    return _regeneratorRuntime.async(function runAutomaticFix$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            loader = _ref3.loader, logManualInstallation = _ref3.logManualInstallation, environmentInfo = _ref3.environmentInfo;\n            loader.fail();\n\n            if (!isSDKInstalled(environmentInfo)) {\n              _context3.next = 4;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", logManualInstallation({\n              message: installMessage\n            }));\n\n          case 4:\n            return _context3.abrupt(\"return\", logManualInstallation({\n              healthcheck: 'Android SDK',\n              url: 'https://reactnative.dev/docs/getting-started'\n            }));\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["../../../src/tools/healthchecks/androidSDK.ts"],"names":["getBuildToolsVersion","projectRoot","logger","gradleBuildFilePath","path","buildToolsVersionEntry","fs","gradleBuildFile","buildToolsVersionIndex","buildToolsVersion","installMessage","chalk","isSDKInstalled","environmentInfo","version","label","description","getDiagnostics","SDKs","requiredVersion","buildTools","isAndroidSDKInstalled","Array","isRequiredVersionInstalled","versions","versionRange","needsToBeFixed","win32AutomaticFix","loader","cliToolsUrl","systemImage","componentsToInstall","androidSDKRoot","downloadUrl","component","installPath","installed","hypervisor","runAutomaticFix","logManualInstallation","message","healthcheck","url"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport {logger, findProjectRoot} from '@react-native-community/cli-tools';\nimport {HealthCheckInterface, EnvironmentInfo} from '../../types';\nimport {\n  getAndroidSdkRootInstallation,\n  installComponent,\n  getBestHypervisor,\n  enableAMDH,\n  enableHAXM,\n  enableWHPX,\n  createAVD,\n} from '../windows/androidWinHelpers';\nimport {downloadAndUnzip} from '../downloadAndUnzip';\nimport {\n  setEnvironment,\n  updateEnvironment,\n} from '../windows/environmentVariables';\n\nconst getBuildToolsVersion = (): string => {\n  let projectRoot = '';\n  try {\n    // doctor is a detached command, so we may not be in a RN project.\n    projectRoot = findProjectRoot();\n  } catch {\n    logger.log(); // for extra space\n    logger.warn(\n      \"We couldn't find a package.json in this directory. Android SDK checks may fail. Doctor works best in a React Native project root.\",\n    );\n  }\n  const gradleBuildFilePath = path.join(projectRoot, 'android/build.gradle');\n\n  const buildToolsVersionEntry = 'buildToolsVersion';\n\n  if (!fs.existsSync(gradleBuildFilePath)) {\n    return 'Not Found';\n  }\n\n  // Read the content of the `build.gradle` file\n  const gradleBuildFile = fs.readFileSync(gradleBuildFilePath, 'utf-8');\n\n  const buildToolsVersionIndex = gradleBuildFile.indexOf(\n    buildToolsVersionEntry,\n  );\n\n  const buildToolsVersion = (\n    gradleBuildFile\n      // Get only the portion of the declaration of `buildToolsVersion`\n      .substring(buildToolsVersionIndex)\n      .split('\\n')[0]\n      // Get only the the value of `buildToolsVersion`\n      .match(/\\d|\\../g) || []\n  ).join('');\n\n  return buildToolsVersion || 'Not Found';\n};\n\nconst installMessage = `Read more about how to update Android SDK at ${chalk.dim(\n  'https://developer.android.com/studio',\n)}`;\n\nconst isSDKInstalled = (environmentInfo: EnvironmentInfo) => {\n  const version = environmentInfo.SDKs['Android SDK'];\n  return version !== 'Not Found';\n};\n\nexport default {\n  label: 'Android SDK',\n  description: 'Required for building and installing your app on Android',\n  getDiagnostics: async ({SDKs}) => {\n    const requiredVersion = getBuildToolsVersion();\n    const buildTools =\n      typeof SDKs['Android SDK'] === 'string'\n        ? SDKs['Android SDK']\n        : SDKs['Android SDK']['Build Tools'];\n\n    const isAndroidSDKInstalled = Array.isArray(buildTools);\n\n    const isRequiredVersionInstalled = isAndroidSDKInstalled\n      ? buildTools.includes(requiredVersion)\n      : false;\n\n    return {\n      versions: isAndroidSDKInstalled ? buildTools : SDKs['Android SDK'],\n      versionRange: requiredVersion,\n      needsToBeFixed: !isRequiredVersionInstalled,\n    };\n  },\n  win32AutomaticFix: async ({loader}) => {\n    // Need a GitHub action to update automatically. See #1180\n    const cliToolsUrl =\n      'https://dl.google.com/android/repository/commandlinetools-win-6200805_latest.zip';\n\n    const systemImage = 'system-images;android-28;google_apis;x86_64';\n    // Installing 29 as well so Android Studio does not complain on first boot\n    const componentsToInstall = [\n      'platform-tools',\n      'build-tools;29.0.3',\n      'platforms;android-29',\n      // Is 28 still needed?\n      'build-tools;28.0.3',\n      'platforms;android-28',\n      'emulator',\n      systemImage,\n      '--licenses', // Accept any pending licenses at the end\n    ];\n\n    const androidSDKRoot = getAndroidSdkRootInstallation();\n\n    if (androidSDKRoot === '') {\n      loader.fail('There was an error finding the Android SDK root');\n\n      return;\n    }\n\n    await downloadAndUnzip({\n      loader,\n      downloadUrl: cliToolsUrl,\n      component: 'Android Command Line Tools',\n      installPath: androidSDKRoot,\n    });\n\n    for (const component of componentsToInstall) {\n      loader.text = `Installing \"${component}\" (this may take a few minutes)`;\n\n      try {\n        await installComponent(component, androidSDKRoot);\n      } catch (e) {\n        // Is there a way to persist a line in loader and continue the execution?\n      }\n    }\n\n    loader.text = 'Updating environment variables';\n\n    // Required for the emulator to work from the CLI\n    await setEnvironment('ANDROID_SDK_ROOT', androidSDKRoot);\n    await setEnvironment('ANDROID_HOME', androidSDKRoot);\n    await updateEnvironment('PATH', path.join(androidSDKRoot, 'tools'));\n    await updateEnvironment(\n      'PATH',\n      path.join(androidSDKRoot, 'platform-tools'),\n    );\n\n    loader.text =\n      'Configuring Hypervisor for faster emulation, this might prompt UAC';\n\n    const {hypervisor, installed} = await getBestHypervisor(androidSDKRoot);\n\n    if (!installed) {\n      if (hypervisor === 'none') {\n        loader.warn(\n          'Android SDK configured but virtualization could not be enabled.',\n        );\n        return;\n      }\n\n      if (hypervisor === 'AMDH') {\n        await enableAMDH(androidSDKRoot);\n      } else if (hypervisor === 'HAXM') {\n        await enableHAXM(androidSDKRoot);\n      } else if (hypervisor === 'WHPX') {\n        await enableWHPX();\n      }\n    }\n\n    loader.text = 'Creating AVD';\n    await createAVD(androidSDKRoot, 'pixel_9.0', 'pixel', systemImage);\n\n    loader.succeed(\n      'Android SDK configured. You might need to restart your PC for all changes to take effect.',\n    );\n  },\n  runAutomaticFix: async ({loader, logManualInstallation, environmentInfo}) => {\n    loader.fail();\n\n    if (isSDKInstalled(environmentInfo)) {\n      return logManualInstallation({\n        message: installMessage,\n      });\n    }\n\n    return logManualInstallation({\n      healthcheck: 'Android SDK',\n      url: 'https://reactnative.dev/docs/getting-started',\n    });\n  },\n} as HealthCheckInterface;\n"]},"metadata":{},"sourceType":"script"}