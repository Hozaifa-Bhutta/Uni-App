{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeMessage = removeMessage;\nexports.logError = exports.logManualInstallation = exports.logMessage = void 0;\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _readline() {\n  var data = _interopRequireDefault(require(\"readline\"));\n\n  _readline = function _readline() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _wcwidth() {\n  var data = _interopRequireDefault(require(\"wcwidth\"));\n\n  _wcwidth = function _wcwidth() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _stripAnsi() {\n  var data = _interopRequireDefault(require(\"strip-ansi\"));\n\n  _stripAnsi = function _stripAnsi() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar logMessage = function logMessage(message) {\n  var indentation = '   ';\n\n  if (typeof message !== 'string') {\n    _cliTools().logger.log();\n\n    return;\n  }\n\n  var messageByLine = message.split('\\n');\n  return _cliTools().logger.log(\"\" + indentation + messageByLine.join(\"\\n\" + indentation));\n};\n\nexports.logMessage = logMessage;\n\nvar addBlankLine = function addBlankLine() {\n  return logMessage();\n};\n\nvar logManualInstallation = function logManualInstallation(_ref) {\n  var healthcheck = _ref.healthcheck,\n      url = _ref.url,\n      command = _ref.command,\n      message = _ref.message;\n\n  if (message) {\n    return logMessage(message);\n  }\n\n  if (url) {\n    logMessage(\"Read more about how to download \" + healthcheck + \" at \" + _chalk().default.dim.underline(url));\n    return;\n  }\n\n  if (command) {\n    logMessage(\"Please install \" + healthcheck + \" by running \" + _chalk().default.bold(command));\n  }\n};\n\nexports.logManualInstallation = logManualInstallation;\n\nvar logError = function logError(_ref2) {\n  var healthcheck = _ref2.healthcheck,\n      loader = _ref2.loader,\n      error = _ref2.error,\n      message = _ref2.message,\n      command = _ref2.command;\n\n  if (loader) {\n    loader.fail();\n  }\n\n  addBlankLine();\n  logMessage(_chalk().default.dim(error.message));\n\n  if (message) {\n    logMessage(message);\n    addBlankLine();\n    return;\n  }\n\n  logMessage(\"The error above occured while trying to install \" + healthcheck + \". Please try again manually: \" + _chalk().default.bold(command));\n  addBlankLine();\n};\n\nexports.logError = logError;\n\nfunction calculateMessageSize(message) {\n  return Math.max(1, Math.ceil((0, _wcwidth().default)((0, _stripAnsi().default)(message)) / (process.stdout.columns || 80)));\n}\n\nfunction removeMessage(message) {\n  _readline().default.moveCursor(process.stdout, 0, -calculateMessageSize(message));\n\n  _readline().default.clearScreenDown(process.stdout);\n}","map":{"version":3,"sources":["../../../src/tools/healthchecks/common.ts"],"names":["logMessage","message","indentation","logger","messageByLine","addBlankLine","logManualInstallation","healthcheck","chalk","logError","command","loader","error","Math","process","readline","calculateMessageSize"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport readline from 'readline';\nimport wcwidth from 'wcwidth';\nimport stripAnsi from 'strip-ansi';\nimport {logger} from '@react-native-community/cli-tools';\nimport {Loader} from '../../types';\n\n// Space is necessary to keep correct ordering on screen\nconst logMessage = (message?: string) => {\n  const indentation = '   ';\n\n  if (typeof message !== 'string') {\n    logger.log();\n\n    return;\n  }\n\n  const messageByLine = message.split('\\n');\n\n  return logger.log(`${indentation}${messageByLine.join(`\\n${indentation}`)}`);\n};\n\nconst addBlankLine = () => logMessage();\n\nconst logManualInstallation = ({\n  healthcheck,\n  url,\n  command,\n  message,\n}: {\n  healthcheck?: string;\n  url?: string;\n  command?: string;\n  message?: string;\n}) => {\n  if (message) {\n    return logMessage(message);\n  }\n\n  if (url) {\n    logMessage(\n      `Read more about how to download ${healthcheck} at ${chalk.dim.underline(\n        url,\n      )}`,\n    );\n\n    return;\n  }\n\n  if (command) {\n    logMessage(\n      `Please install ${healthcheck} by running ${chalk.bold(command)}`,\n    );\n  }\n};\n\nconst logError = ({\n  healthcheck,\n  loader,\n  error,\n  message,\n  command,\n}: {\n  healthcheck: string;\n  loader?: Loader;\n  error: Error;\n  message?: string;\n  command: string;\n}) => {\n  if (loader) {\n    loader.fail();\n  }\n\n  addBlankLine();\n\n  logMessage(chalk.dim(error.message));\n\n  if (message) {\n    logMessage(message);\n    addBlankLine();\n\n    return;\n  }\n\n  logMessage(\n    `The error above occured while trying to install ${healthcheck}. Please try again manually: ${chalk.bold(\n      command,\n    )}`,\n  );\n  addBlankLine();\n};\n\n// Calculate the size of a message on terminal based on rows\nfunction calculateMessageSize(message: string) {\n  return Math.max(\n    1,\n    Math.ceil(wcwidth(stripAnsi(message)) / (process.stdout.columns || 80)),\n  );\n}\n\n// Clear the message from the terminal\nfunction removeMessage(message: string) {\n  readline.moveCursor(process.stdout, 0, -calculateMessageSize(message));\n  readline.clearScreenDown(process.stdout);\n}\n\nexport {logMessage, logManualInstallation, logError, removeMessage};\n"]},"metadata":{},"sourceType":"script"}