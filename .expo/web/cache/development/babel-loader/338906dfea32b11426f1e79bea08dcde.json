{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _util() {\n  var data = require(\"util\");\n\n  _util = function _util() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliPlatformIos() {\n  var data = require(\"@react-native-community/cli-platform-ios\");\n\n  _cliPlatformIos = function _cliPlatformIos() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar xcodeEnvFile = '.xcode.env';\nvar pathSeparator = '/';\n\nfunction removeLastPathComponent(pathString) {\n  var components = pathString.split(pathSeparator);\n  components.splice(components.length - 1, 1);\n  return components.join(pathSeparator);\n}\n\nfunction pathHasXcodeEnvFile(pathString) {\n  var xcodeEnvPath = pathString + pathSeparator + xcodeEnvFile;\n  return _fs().default.existsSync(xcodeEnvPath);\n}\n\nfunction pathDoesNotHaveXcodeEnvFile(pathString) {\n  return !pathHasXcodeEnvFile(pathString);\n}\n\nvar _default = {\n  label: '.xcode.env',\n  description: 'File to customize Xcode environment',\n  getDiagnostics: function getDiagnostics() {\n    var projectRoot, allPathsHasXcodeEnvFile;\n    return _regeneratorRuntime.async(function getDiagnostics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            projectRoot = (0, _cliTools().findProjectRoot)();\n            allPathsHasXcodeEnvFile = (0, _cliPlatformIos().findPodfilePaths)(projectRoot).map(function (pathString) {\n              var basePath = removeLastPathComponent(pathString);\n              return pathHasXcodeEnvFile(basePath);\n            }).reduce(function (previousValue, currentValue) {\n              return previousValue && currentValue;\n            });\n            return _context.abrupt(\"return\", {\n              needsToBeFixed: !allPathsHasXcodeEnvFile\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  runAutomaticFix: function runAutomaticFix() {\n    var templateXcodeEnv, projectRoot, templateIosPath, src, copyFileAsync;\n    return _regeneratorRuntime.async(function runAutomaticFix$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            templateXcodeEnv = '_xcode.env';\n            projectRoot = (0, _cliTools().findProjectRoot)();\n            templateIosPath = _path().default.dirname(require.resolve('react-native/template/ios'));\n            src = templateIosPath + templateXcodeEnv;\n            copyFileAsync = (0, _util().promisify)(_fs().default.copyFile);\n            (0, _cliPlatformIos().findPodfilePaths)(projectRoot).map(removeLastPathComponent).filter(pathDoesNotHaveXcodeEnvFile).forEach(function _callee(pathString) {\n              var destFilePath;\n              return _regeneratorRuntime.async(function _callee$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      destFilePath = pathString + pathSeparator + xcodeEnvFile;\n                      _context2.next = 3;\n                      return _regeneratorRuntime.awrap(copyFileAsync(src, destFilePath));\n\n                    case 3:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            });\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["../../../src/tools/healthchecks/xcodeEnv.ts"],"names":["xcodeEnvFile","pathSeparator","components","pathString","xcodeEnvPath","fs","pathHasXcodeEnvFile","label","description","getDiagnostics","projectRoot","allPathsHasXcodeEnvFile","basePath","removeLastPathComponent","previousValue","needsToBeFixed","runAutomaticFix","templateXcodeEnv","templateIosPath","path","require","src","copyFileAsync","destFilePath"],"mappings":"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","sourcesContent":["import {HealthCheckInterface} from '../../types';\nimport fs from 'fs';\nimport path from 'path';\nimport {promisify} from 'util';\nimport {findProjectRoot} from '@react-native-community/cli-tools';\nimport {findPodfilePaths} from '@react-native-community/cli-platform-ios';\n\nconst xcodeEnvFile = '.xcode.env';\nconst pathSeparator = '/';\n\nfunction removeLastPathComponent(pathString: string): string {\n  const components = pathString.split(pathSeparator);\n  components.splice(components.length - 1, 1);\n  return components.join(pathSeparator);\n}\n\nfunction pathHasXcodeEnvFile(pathString: string): boolean {\n  const xcodeEnvPath = pathString + pathSeparator + xcodeEnvFile;\n  return fs.existsSync(xcodeEnvPath);\n}\n\nfunction pathDoesNotHaveXcodeEnvFile(pathString: string): boolean {\n  return !pathHasXcodeEnvFile(pathString);\n}\n\nexport default {\n  label: '.xcode.env',\n  description: 'File to customize Xcode environment',\n  getDiagnostics: async () => {\n    const projectRoot = findProjectRoot();\n    const allPathsHasXcodeEnvFile = findPodfilePaths(projectRoot)\n      .map((pathString) => {\n        const basePath = removeLastPathComponent(pathString);\n        return pathHasXcodeEnvFile(basePath);\n      })\n      .reduce((previousValue, currentValue) => previousValue && currentValue);\n    return {\n      needsToBeFixed: !allPathsHasXcodeEnvFile,\n    };\n  },\n  runAutomaticFix: async () => {\n    const templateXcodeEnv = '_xcode.env';\n    const projectRoot = findProjectRoot();\n\n    const templateIosPath = path.dirname(\n      require.resolve('react-native/template/ios'),\n    );\n\n    const src = templateIosPath + templateXcodeEnv;\n    const copyFileAsync = promisify(fs.copyFile);\n\n    findPodfilePaths(projectRoot)\n      .map(removeLastPathComponent)\n      // avoid overriding existing .xcode.env\n      .filter(pathDoesNotHaveXcodeEnvFile)\n      .forEach(async (pathString) => {\n        const destFilePath = pathString + pathSeparator + xcodeEnvFile;\n        await copyFileAsync(src, destFilePath);\n      });\n  },\n} as HealthCheckInterface;\n"]},"metadata":{},"sourceType":"script"}