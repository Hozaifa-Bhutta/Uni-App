{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.run = run;\nObject.defineProperty(exports, \"loadConfig\", {\n  enumerable: true,\n  get: function get() {\n    return _cliConfig().default;\n  }\n});\nexports.bin = void 0;\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _child_process() {\n  var data = _interopRequireDefault(require(\"child_process\"));\n\n  _child_process = function _child_process() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _commander() {\n  var data = _interopRequireDefault(require(\"commander\"));\n\n  _commander = function _commander() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _leven() {\n  var data = _interopRequireDefault(require(\"leven\"));\n\n  _leven = function _leven() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _commands = require(\"./commands\");\n\nfunction _cliConfig() {\n  var data = _interopRequireDefault(require(\"@react-native-community/cli-config\"));\n\n  _cliConfig = function _cliConfig() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar pkgJson = require(\"../package.json\");\n\n_commander().default.usage('<command> [options]').option('--version', 'Print CLI version').option('--verbose', 'Increase logging verbosity');\n\n_commander().default.arguments('<command>').action(function (cmd) {\n  printUnknownCommand(cmd);\n  process.exit(1);\n});\n\nvar handleError = function handleError(err) {\n  _cliTools().logger.enable();\n\n  if (_commander().default.verbose) {\n    _cliTools().logger.error(err.message);\n  } else {\n    var message = err.message.replace(/\\.$/, '');\n\n    _cliTools().logger.error(message + \".\");\n  }\n\n  if (err.stack) {\n    _cliTools().logger.log(err.stack);\n  }\n\n  if (!_commander().default.verbose) {\n    _cliTools().logger.info(_chalk().default.dim(\"Run CLI with \" + _chalk().default.reset('--verbose') + \" \" + _chalk().default.dim('flag for more details.')));\n  }\n\n  process.exit(1);\n};\n\nfunction printHelpInformation(examples, pkg) {\n  var cmdName = this._name;\n\n  var argsList = this._args.map(function (arg) {\n    return arg.required ? \"<\" + arg.name + \">\" : \"[\" + arg.name + \"]\";\n  }).join(' ');\n\n  if (this._alias) {\n    cmdName = cmdName + \"|\" + this._alias;\n  }\n\n  var sourceInformation = pkg ? [_chalk().default.bold('Source:') + \" \" + pkg.name + \"@\" + pkg.version, ''] : [];\n  var output = [_chalk().default.bold(\"react-native \" + cmdName + \" \" + argsList), this._description ? \"\\n\" + this._description + \"\\n\" : ''].concat(sourceInformation, [\"\" + _chalk().default.bold('Options:'), this.optionHelp().replace(/^/gm, '  ')]);\n\n  if (examples && examples.length > 0) {\n    var formattedUsage = examples.map(function (example) {\n      return \"  \" + example.desc + \": \\n  \" + _chalk().default.cyan(example.cmd);\n    }).join('\\n\\n');\n    output = output.concat([_chalk().default.bold('\\nExample usage:'), formattedUsage]);\n  }\n\n  return output.join('\\n').concat('\\n');\n}\n\nfunction printUnknownCommand(cmdName) {\n  var availableCommands = _commander().default.commands.map(function (cmd) {\n    return cmd._name;\n  });\n\n  var suggestion = availableCommands.find(function (cmd) {\n    return (0, _leven().default)(cmd, cmdName) < cmd.length * 0.4;\n  });\n  var errorMsg = \"Unrecognized command \\\"\" + _chalk().default.bold(cmdName) + \"\\\".\";\n\n  if (suggestion) {\n    errorMsg += \" Did you mean \\\"\" + suggestion + \"\\\"?\";\n  }\n\n  if (cmdName) {\n    _cliTools().logger.error(errorMsg);\n\n    _cliTools().logger.info(\"Run \" + _chalk().default.bold('\"react-native --help\"') + \" to see a list of all available commands.\");\n  } else {\n    _commander().default.outputHelp();\n  }\n}\n\nvar isDetachedCommand = function isDetachedCommand(command) {\n  return command.detached === true;\n};\n\nfunction attachCommand(command) {\n  for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    rest[_key - 1] = arguments[_key];\n  }\n\n  var cmd = _commander().default.command(command.name).action(function handleAction() {\n    var passedOptions,\n        _len2,\n        args,\n        _key2,\n        argv,\n        _args = arguments;\n\n    return _regeneratorRuntime.async(function handleAction$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            passedOptions = this.opts();\n\n            for (_len2 = _args.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = _args[_key2];\n            }\n\n            argv = Array.from(args).slice(0, -1);\n            _context.prev = 3;\n\n            if (!isDetachedCommand(command)) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(command.func(argv, passedOptions));\n\n          case 7:\n            _context.next = 11;\n            break;\n\n          case 9:\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(command.func(argv, rest[0], passedOptions));\n\n          case 11:\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](3);\n            handleError(_context.t0);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, this, [[3, 13]], Promise);\n  });\n\n  if (command.description) {\n    cmd.description(command.description);\n  }\n\n  cmd.helpInformation = printHelpInformation.bind(cmd, command.examples, command.pkg);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(command.options || []), _step; !(_step = _iterator()).done;) {\n    var opt = _step.value;\n    cmd.option(opt.name, opt.description, opt.parse || function (val) {\n      return val;\n    }, typeof opt.default === 'function' ? opt.default(rest[0]) : opt.default);\n  }\n}\n\nfunction run() {\n  return _regeneratorRuntime.async(function run$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(setupAndRun());\n\n        case 3:\n          _context2.next = 8;\n          break;\n\n        case 5:\n          _context2.prev = 5;\n          _context2.t0 = _context2[\"catch\"](0);\n          handleError(_context2.t0);\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n}\n\nfunction setupAndRun() {\n  var scriptName, absolutePath, _iterator2, _step2, command, config, _i, _arr, _command;\n\n  return _regeneratorRuntime.async(function setupAndRun$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (process.argv.includes('config')) {\n            _cliTools().logger.disable();\n          }\n\n          _cliTools().logger.setVerbose(process.argv.includes('--verbose'));\n\n          if (process.platform !== 'win32') {\n            scriptName = 'setup_env.sh';\n            absolutePath = _path().default.join(__dirname, '..', scriptName);\n\n            try {\n              _child_process().default.execFileSync(absolutePath, {\n                stdio: 'pipe'\n              });\n            } catch (error) {\n              _cliTools().logger.warn(\"Failed to run environment setup script \\\"\" + scriptName + \"\\\"\\n\\n\" + _chalk().default.red(error));\n\n              _cliTools().logger.info(\"React Native CLI will continue to run if your local environment matches what React Native expects. If it does fail, check out \\\"\" + absolutePath + \"\\\" and adjust your environment to match it.\");\n            }\n          }\n\n          for (_iterator2 = _createForOfIteratorHelperLoose(_commands.detachedCommands); !(_step2 = _iterator2()).done;) {\n            command = _step2.value;\n            attachCommand(command);\n          }\n\n          _context3.prev = 4;\n          config = (0, _cliConfig().default)();\n\n          _cliTools().logger.enable();\n\n          for (_i = 0, _arr = [].concat(_toConsumableArray(_commands.projectCommands), _toConsumableArray(config.commands)); _i < _arr.length; _i++) {\n            _command = _arr[_i];\n            attachCommand(_command, config);\n          }\n\n          _context3.next = 18;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](4);\n\n          if (!_context3.t0.message.includes(\"We couldn't find a package.json\")) {\n            _context3.next = 17;\n            break;\n          }\n\n          _cliTools().logger.debug(_context3.t0.message);\n\n          _cliTools().logger.debug('Failed to load configuration of your project. Only a subset of commands will be available.');\n\n          _context3.next = 18;\n          break;\n\n        case 17:\n          throw new (_cliTools().CLIError)('Failed to load configuration of your project.', _context3.t0);\n\n        case 18:\n          _commander().default.parse(process.argv);\n\n          if (_commander().default.rawArgs.length === 2) {\n            _commander().default.outputHelp();\n          }\n\n          if (_commander().default.args.length === 0 && _commander().default.rawArgs.includes('--version')) {\n            console.log(pkgJson.version);\n          }\n\n        case 21:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[4, 10]], Promise);\n}\n\nvar bin = require.resolve(\"./bin\");\n\nexports.bin = bin;","map":{"version":3,"sources":["../src/index.ts"],"names":["pkgJson","require","commander","cmd","printUnknownCommand","process","handleError","err","logger","message","chalk","cmdName","argsList","arg","sourceInformation","pkg","name","output","examples","formattedUsage","example","desc","availableCommands","suggestion","errorMsg","isDetachedCommand","command","passedOptions","argv","Array","rest","printHelpInformation","opt","val","setupAndRun","scriptName","absolutePath","path","childProcess","stdio","detachedCommands","attachCommand","config","projectCommands","error","CLIError","console","bin"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport childProcess from 'child_process';\nimport commander from 'commander';\nimport leven from 'leven';\nimport path from 'path';\n\nimport {Command, Config} from '@react-native-community/cli-types';\nimport {logger, CLIError} from '@react-native-community/cli-tools';\n\nimport {detachedCommands, projectCommands} from './commands';\nimport loadConfig from '@react-native-community/cli-config';\n\nconst pkgJson = require('../package.json');\n\ncommander\n  .usage('<command> [options]')\n  .option('--version', 'Print CLI version')\n  .option('--verbose', 'Increase logging verbosity');\n\ncommander.arguments('<command>').action((cmd) => {\n  printUnknownCommand(cmd);\n  process.exit(1);\n});\n\nconst handleError = (err: Error) => {\n  logger.enable();\n  if (commander.verbose) {\n    logger.error(err.message);\n  } else {\n    // Some error messages (esp. custom ones) might have `.` at the end already.\n    const message = err.message.replace(/\\.$/, '');\n    logger.error(`${message}.`);\n  }\n  if (err.stack) {\n    logger.log(err.stack);\n  }\n  if (!commander.verbose) {\n    logger.info(\n      chalk.dim(\n        `Run CLI with ${chalk.reset('--verbose')} ${chalk.dim(\n          'flag for more details.',\n        )}`,\n      ),\n    );\n  }\n  process.exit(1);\n};\n\n/**\n * Custom printHelpInformation command inspired by internal Commander.js\n * one modified to suit our needs\n */\nfunction printHelpInformation(\n  this: commander.Command,\n  examples: Command['examples'],\n  pkg: Command['pkg'],\n) {\n  let cmdName = this._name;\n  const argsList = (this._args as Array<{required: boolean; name: string}>)\n    .map((arg) => (arg.required ? `<${arg.name}>` : `[${arg.name}]`))\n    .join(' ');\n\n  if (this._alias) {\n    cmdName = `${cmdName}|${this._alias}`;\n  }\n\n  const sourceInformation = pkg\n    ? [`${chalk.bold('Source:')} ${pkg.name}@${pkg.version}`, '']\n    : [];\n\n  let output = [\n    chalk.bold(`react-native ${cmdName} ${argsList}`),\n    this._description ? `\\n${this._description}\\n` : '',\n    ...sourceInformation,\n    `${chalk.bold('Options:')}`,\n    this.optionHelp().replace(/^/gm, '  '),\n  ];\n\n  if (examples && examples.length > 0) {\n    const formattedUsage = examples\n      .map((example) => `  ${example.desc}: \\n  ${chalk.cyan(example.cmd)}`)\n      .join('\\n\\n');\n\n    output = output.concat([chalk.bold('\\nExample usage:'), formattedUsage]);\n  }\n\n  return output.join('\\n').concat('\\n');\n}\n\nfunction printUnknownCommand(cmdName: string) {\n  const availableCommands = commander.commands.map((cmd: any) => cmd._name);\n  const suggestion = availableCommands.find((cmd: string) => {\n    return leven(cmd, cmdName) < cmd.length * 0.4;\n  });\n  let errorMsg = `Unrecognized command \"${chalk.bold(cmdName)}\".`;\n  if (suggestion) {\n    errorMsg += ` Did you mean \"${suggestion}\"?`;\n  }\n  if (cmdName) {\n    logger.error(errorMsg);\n    logger.info(\n      `Run ${chalk.bold(\n        '\"react-native --help\"',\n      )} to see a list of all available commands.`,\n    );\n  } else {\n    commander.outputHelp();\n  }\n}\n\n/**\n * Custom type assertion needed for the `makeCommand` conditional\n * types to be properly resolved.\n */\nconst isDetachedCommand = (\n  command: Command<boolean>,\n): command is Command<true> => {\n  return command.detached === true;\n};\n\n/**\n * Attaches a new command onto global `commander` instance.\n *\n * Note that this function takes additional argument of `Config` type in case\n * passed `command` needs it for its execution.\n */\nfunction attachCommand<IsDetached extends boolean>(\n  command: Command<IsDetached>,\n  ...rest: IsDetached extends false ? [Config] : []\n): void {\n  const cmd = commander\n    .command(command.name)\n    .action(async function handleAction(\n      this: commander.Command,\n      ...args: string[]\n    ) {\n      const passedOptions = this.opts();\n      const argv = Array.from(args).slice(0, -1);\n\n      try {\n        if (isDetachedCommand(command)) {\n          await command.func(argv, passedOptions);\n        } else {\n          await command.func(argv, rest[0] as Config, passedOptions);\n        }\n      } catch (error) {\n        handleError(error);\n      }\n    });\n\n  if (command.description) {\n    cmd.description(command.description);\n  }\n\n  cmd.helpInformation = printHelpInformation.bind(\n    cmd,\n    command.examples,\n    command.pkg,\n  );\n\n  for (const opt of command.options || []) {\n    cmd.option(\n      opt.name,\n      opt.description,\n      opt.parse || ((val: any) => val),\n      typeof opt.default === 'function'\n        ? opt.default(rest[0] as Config)\n        : opt.default,\n    );\n  }\n}\n\nasync function run() {\n  try {\n    await setupAndRun();\n  } catch (e) {\n    handleError(e);\n  }\n}\n\nasync function setupAndRun() {\n  // Commander is not available yet\n\n  // when we run `config`, we don't want to output anything to the console. We\n  // expect it to return valid JSON\n  if (process.argv.includes('config')) {\n    logger.disable();\n  }\n\n  logger.setVerbose(process.argv.includes('--verbose'));\n\n  // We only have a setup script for UNIX envs currently\n  if (process.platform !== 'win32') {\n    const scriptName = 'setup_env.sh';\n    const absolutePath = path.join(__dirname, '..', scriptName);\n\n    try {\n      childProcess.execFileSync(absolutePath, {stdio: 'pipe'});\n    } catch (error) {\n      logger.warn(\n        `Failed to run environment setup script \"${scriptName}\"\\n\\n${chalk.red(\n          error,\n        )}`,\n      );\n      logger.info(\n        `React Native CLI will continue to run if your local environment matches what React Native expects. If it does fail, check out \"${absolutePath}\" and adjust your environment to match it.`,\n      );\n    }\n  }\n\n  for (const command of detachedCommands) {\n    attachCommand(command);\n  }\n\n  try {\n    const config = loadConfig();\n\n    logger.enable();\n\n    for (const command of [...projectCommands, ...config.commands]) {\n      attachCommand(command, config);\n    }\n  } catch (error) {\n    /**\n     * When there is no `package.json` found, the CLI will enter `detached` mode and a subset\n     * of commands will be available. That's why we don't throw on such kind of error.\n     */\n    if (error.message.includes(\"We couldn't find a package.json\")) {\n      logger.debug(error.message);\n      logger.debug(\n        'Failed to load configuration of your project. Only a subset of commands will be available.',\n      );\n    } else {\n      throw new CLIError(\n        'Failed to load configuration of your project.',\n        error,\n      );\n    }\n  }\n\n  commander.parse(process.argv);\n\n  if (commander.rawArgs.length === 2) {\n    commander.outputHelp();\n  }\n\n  // We handle --version as a special case like this because both `commander`\n  // and `yargs` append it to every command and we don't want to do that.\n  // E.g. outside command `init` has --version flag and we want to preserve it.\n  if (commander.args.length === 0 && commander.rawArgs.includes('--version')) {\n    console.log(pkgJson.version);\n  }\n}\n\nconst bin = require.resolve('./bin');\n\nexport {run, bin, loadConfig};\n"]},"metadata":{},"sourceType":"script"}