{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _versionRanges = _interopRequireDefault(require(\"../versionRanges\"));\n\nvar _checkInstallation = require(\"../checkInstallation\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _default = {\n  label: 'Xcode',\n  description: 'Required for building and installing your app on iOS',\n  getDiagnostics: function getDiagnostics(_ref) {\n    var IDEs, version;\n    return _regeneratorRuntime.async(function getDiagnostics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            IDEs = _ref.IDEs;\n            version = IDEs.Xcode.version.split('/')[0];\n            return _context.abrupt(\"return\", {\n              needsToBeFixed: (0, _checkInstallation.doesSoftwareNeedToBeFixed)({\n                version: version,\n                versionRange: _versionRanges.default.XCODE\n              }),\n              version: version,\n              versionRange: _versionRanges.default.XCODE\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  runAutomaticFix: function runAutomaticFix(_ref2) {\n    var loader, logManualInstallation;\n    return _regeneratorRuntime.async(function runAutomaticFix$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            loader = _ref2.loader, logManualInstallation = _ref2.logManualInstallation;\n            loader.fail();\n            logManualInstallation({\n              healthcheck: 'Xcode',\n              url: 'https://developer.apple.com/xcode/'\n            });\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["../../../src/tools/healthchecks/xcode.ts"],"names":["label","description","getDiagnostics","IDEs","version","needsToBeFixed","versionRange","versionRanges","XCODE","runAutomaticFix","logManualInstallation","loader","healthcheck","url"],"mappings":";;;;;;;;;AAAA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,oBAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,OAAA,wBAAA;;;;;;;;eAGe;EACbA,KAAK,EADQ,OAAA;EAEbC,WAAW,EAFE,sDAAA;EAGbC,cAAc,EAAE;IAAA;IAAA;MAAA;QAAA;UAAA;YAAQC,IAAR,QAAQA,IAAR;YACRC,OADQ,GACED,IAAI,CAAJA,KAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAAhB,CAAgBA,CADF;YAAA,iCAGP;cACLE,cAAc,EAAE,CAAA,GAAA,kBAAA,CAAA,yBAAA,EAA0B;gBACxCD,OADwC,EACxCA,OADwC;gBAExCE,YAAY,EAAEC,cAAAA,CAAAA,OAAAA,CAAcC;cAFY,CAA1B,CADX;cAKLJ,OALK,EAKLA,OALK;cAMLE,YAAY,EAAEC,cAAAA,CAAAA,OAAAA,CAAcC;YANvB,CAHO;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAHH;EAebC,eAAe,EAAE;IAAA;IAAA;MAAA;QAAA;UAAA;YAAO,MAAP,SAAO,MAAP,EAAgBC,qBAAhB,SAAgBA,qBAAhB;YACfC,MAAM,CAANA,IAAAA;YAEAD,qBAAqB,CAAC;cACpBE,WAAW,EADS,OAAA;cAEpBC,GAAG,EAAE;YAFe,CAAD,CAArBH;;UAHe;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;AAfJ,C","sourcesContent":["import versionRanges from '../versionRanges';\nimport {doesSoftwareNeedToBeFixed} from '../checkInstallation';\nimport {HealthCheckInterface} from '../../types';\n\nexport default {\n  label: 'Xcode',\n  description: 'Required for building and installing your app on iOS',\n  getDiagnostics: async ({IDEs}) => {\n    const version = IDEs.Xcode.version.split('/')[0];\n\n    return {\n      needsToBeFixed: doesSoftwareNeedToBeFixed({\n        version,\n        versionRange: versionRanges.XCODE,\n      }),\n      version,\n      versionRange: versionRanges.XCODE,\n    };\n  },\n  runAutomaticFix: async ({loader, logManualInstallation}) => {\n    loader.fail();\n\n    logManualInstallation({\n      healthcheck: 'Xcode',\n      url: 'https://developer.apple.com/xcode/',\n    });\n  },\n} as HealthCheckInterface;\n"]},"metadata":{},"sourceType":"script"}