{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  var data = require(\"path\");\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _versionRanges = _interopRequireDefault(require(\"../versionRanges\"));\n\nvar _checkInstallation = require(\"../checkInstallation\");\n\nvar _downloadAndUnzip = require(\"../downloadAndUnzip\");\n\nvar _environmentVariables = require(\"../windows/environmentVariables\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _default = {\n  label: 'JDK',\n  getDiagnostics: function getDiagnostics(_ref) {\n    var Languages;\n    return _regeneratorRuntime.async(function getDiagnostics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Languages = _ref.Languages;\n            return _context.abrupt(\"return\", {\n              needsToBeFixed: (0, _checkInstallation.doesSoftwareNeedToBeFixed)({\n                version: typeof Languages.Java === 'string' ? Languages.Java : Languages.Java.version,\n                versionRange: _versionRanges.default.JAVA\n              }),\n              version: typeof Languages.Java === 'string' ? Languages.Java : Languages.Java.version,\n              versionRange: _versionRanges.default.JAVA\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  win32AutomaticFix: function win32AutomaticFix(_ref2) {\n    var loader, installerUrl, installPath, jdkPath;\n    return _regeneratorRuntime.async(function win32AutomaticFix$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            loader = _ref2.loader;\n            _context2.prev = 1;\n            installerUrl = 'https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_windows-x64_bin.zip';\n            installPath = process.env.LOCALAPPDATA || '';\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap((0, _downloadAndUnzip.downloadAndUnzip)({\n              loader: loader,\n              downloadUrl: installerUrl,\n              component: 'JDK',\n              installPath: installPath\n            }));\n\n          case 6:\n            loader.text = 'Updating environment variables';\n            jdkPath = (0, _path().join)(installPath, 'jdk-11.0.2');\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap((0, _environmentVariables.setEnvironment)('JAVA_HOME', jdkPath));\n\n          case 10:\n            _context2.next = 12;\n            return _regeneratorRuntime.awrap((0, _environmentVariables.updateEnvironment)('PATH', (0, _path().join)(jdkPath, 'bin')));\n\n          case 12:\n            loader.succeed('JDK installed successfully. Please restart your shell to see the changes');\n            _context2.next = 18;\n            break;\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](1);\n            loader.fail(_context2.t0);\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 15]], Promise);\n  },\n  runAutomaticFix: function runAutomaticFix(_ref3) {\n    var logManualInstallation, loader;\n    return _regeneratorRuntime.async(function runAutomaticFix$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            logManualInstallation = _ref3.logManualInstallation, loader = _ref3.loader;\n            loader.fail();\n            logManualInstallation({\n              healthcheck: 'JDK',\n              url: 'https://openjdk.java.net/'\n            });\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["../../../src/tools/healthchecks/jdk.ts"],"names":["label","getDiagnostics","Languages","needsToBeFixed","version","versionRange","versionRanges","JAVA","win32AutomaticFix","loader","installerUrl","installPath","process","downloadUrl","component","jdkPath","runAutomaticFix","logManualInstallation","healthcheck","url"],"mappings":";;;;;;;;;AAAA,SAAA,KAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;EAAA,KAAA,GAAA,iBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,oBAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,OAAA,wBAAA;;AAEA,IAAA,iBAAA,GAAA,OAAA,uBAAA;;AACA,IAAA,qBAAA,GAAA,OAAA,mCAAA;;;;;;;;eAKe;EACbA,KAAK,EADQ,KAAA;EAEbC,cAAc,EAAE;IAAA;IAAA;MAAA;QAAA;UAAA;YAAQC,SAAR,QAAQA,SAAR;YAAA,iCAAwB;cACtCC,cAAc,EAAE,CAAA,GAAA,kBAAA,CAAA,yBAAA,EAA0B;gBACxCC,OAAO,EACL,OAAOF,SAAS,CAAhB,IAAA,KAAA,QAAA,GACIA,SAAS,CADb,IAAA,GAEIA,SAAS,CAATA,IAAAA,CAJkC,OAAA;gBAKxCG,YAAY,EAAEC,cAAAA,CAAAA,OAAAA,CAAcC;cALY,CAA1B,CADsB;cAStCH,OAAO,EACL,OAAOF,SAAS,CAAhB,IAAA,KAAA,QAAA,GACIA,SAAS,CADb,IAAA,GAEIA,SAAS,CAATA,IAAAA,CAZgC,OAAA;cAatCG,YAAY,EAAEC,cAAAA,CAAAA,OAAAA,CAAcC;YAbU,CAAxB;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAFH;EAiBbC,iBAAiB,EAAE;IAAA;IAAA;MAAA;QAAA;UAAA;YAAQC,MAAR,SAAQA,MAAR;YAAA;YAGTC,YAHS,GAGf,kFAHe;YAKTC,WALS,GAKKC,OAAO,CAAPA,GAAAA,CAAAA,YAAAA,IAJlB,EADa;YAAA;YAAA,iCAOT,CAAA,GAAA,iBAAA,CAAA,gBAAA,EAAiB;cACrBH,MADqB,EACrBA,MADqB;cAErBI,WAAW,EAFU,YAAA;cAGrBC,SAAS,EAHY,KAAA;cAIrBH,WAAAA,EAAAA;YAJqB,CAAjB,CAPS;;UAAA;YAcfF,MAAM,CAANA,IAAAA,GAAAA,gCAAAA;YAEMM,OAhBS,GAgBC,CAAA,GAAA,KAAA,GAAA,IAAA,EAAA,WAAA,EAAhB,YAAgB,CAhBD;YAAA;YAAA,iCAkBT,CAAA,GAAA,qBAAA,CAAA,cAAA,EAAA,WAAA,EAAN,OAAM,CAlBS;;UAAA;YAAA;YAAA,iCAmBT,CAAA,GAAA,qBAAA,CAAA,iBAAA,EAAA,MAAA,EAA0B,CAAA,GAAA,KAAA,GAAA,IAAA,EAAA,OAAA,EAAhC,KAAgC,CAA1B,CAnBS;;UAAA;YAqBfN,MAAM,CAANA,OAAAA,CAAAA,0EAAAA;YArBe;YAAA;;UAAA;YAAA;YAAA;YAyBfA,MAAM,CAANA,IAAAA;;UAzBe;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAjBN;EA6CbO,eAAe,EAAE;IAAA;IAAA;MAAA;QAAA;UAAA;YAAO,qBAAP,SAAO,qBAAP,EAA+BP,MAA/B,SAA+BA,MAA/B;YACfA,MAAM,CAANA,IAAAA;YACAQ,qBAAqB,CAAC;cACpBC,WAAW,EADS,KAAA;cAEpBC,GAAG,EAAE;YAFe,CAAD,CAArBF;;UAFe;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;AA7CJ,C","sourcesContent":["import {join} from 'path';\nimport versionRanges from '../versionRanges';\nimport {doesSoftwareNeedToBeFixed} from '../checkInstallation';\nimport {HealthCheckInterface} from '../../types';\nimport {downloadAndUnzip} from '../downloadAndUnzip';\nimport {\n  setEnvironment,\n  updateEnvironment,\n} from '../windows/environmentVariables';\n\nexport default {\n  label: 'JDK',\n  getDiagnostics: async ({Languages}) => ({\n    needsToBeFixed: doesSoftwareNeedToBeFixed({\n      version:\n        typeof Languages.Java === 'string'\n          ? Languages.Java\n          : Languages.Java.version,\n      versionRange: versionRanges.JAVA,\n    }),\n\n    version:\n      typeof Languages.Java === 'string'\n        ? Languages.Java\n        : Languages.Java.version,\n    versionRange: versionRanges.JAVA,\n  }),\n  win32AutomaticFix: async ({loader}) => {\n    try {\n      // Installing JDK 11 because later versions seem to cause issues with gradle at the moment\n      const installerUrl =\n        'https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_windows-x64_bin.zip';\n      const installPath = process.env.LOCALAPPDATA || ''; // The zip is in a folder `jdk-11.02` so it can be unzipped directly there\n\n      await downloadAndUnzip({\n        loader,\n        downloadUrl: installerUrl,\n        component: 'JDK',\n        installPath,\n      });\n\n      loader.text = 'Updating environment variables';\n\n      const jdkPath = join(installPath, 'jdk-11.0.2');\n\n      await setEnvironment('JAVA_HOME', jdkPath);\n      await updateEnvironment('PATH', join(jdkPath, 'bin'));\n\n      loader.succeed(\n        'JDK installed successfully. Please restart your shell to see the changes',\n      );\n    } catch (e) {\n      loader.fail(e);\n    }\n  },\n  runAutomaticFix: async ({logManualInstallation, loader}) => {\n    loader.fail();\n    logManualInstallation({\n      healthcheck: 'JDK',\n      url: 'https://openjdk.java.net/',\n    });\n  },\n} as HealthCheckInterface;\n"]},"metadata":{},"sourceType":"script"}