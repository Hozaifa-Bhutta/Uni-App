{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _versionRanges = _interopRequireDefault(require(\"../versionRanges\"));\n\nvar _checkInstallation = require(\"../checkInstallation\");\n\nvar _install = require(\"../install\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar label = 'Watchman';\nvar _default = {\n  label: label,\n  description: 'Used for watching changes in the filesystem when in development mode',\n  getDiagnostics: function getDiagnostics(_ref) {\n    var Binaries;\n    return _regeneratorRuntime.async(function getDiagnostics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Binaries = _ref.Binaries;\n            return _context.abrupt(\"return\", {\n              needsToBeFixed: (0, _checkInstallation.doesSoftwareNeedToBeFixed)({\n                version: Binaries.Watchman.version,\n                versionRange: _versionRanges.default.WATCHMAN,\n                looseRange: true\n              }),\n              version: Binaries.Watchman.version,\n              versionRange: _versionRanges.default.WATCHMAN\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  runAutomaticFix: function runAutomaticFix(_ref2) {\n    var loader;\n    return _regeneratorRuntime.async(function runAutomaticFix$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            loader = _ref2.loader;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap((0, _install.install)({\n              pkg: 'watchman',\n              label: label,\n              url: 'https://facebook.github.io/watchman/docs/install.html',\n              loader: loader\n            }));\n\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["../../../src/tools/healthchecks/watchman.ts"],"names":["label","description","getDiagnostics","Binaries","needsToBeFixed","version","versionRange","versionRanges","looseRange","WATCHMAN","runAutomaticFix","loader","pkg","url"],"mappings":";;;;;;;;;AAAA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,oBAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,OAAA,wBAAA;;AACA,IAAA,QAAA,GAAA,OAAA,cAAA;;;;;;;;AAGA,IAAMA,KAAK,GAAX,UAAA;eAEe;EACbA,KADa,EACbA,KADa;EAEbC,WAAW,EAFE,sEAAA;EAIbC,cAAc,EAAE;IAAA;IAAA;MAAA;QAAA;UAAA;YAAQC,QAAR,QAAQA,QAAR;YAAA,iCAAuB;cACrCC,cAAc,EAAE,CAAA,GAAA,kBAAA,CAAA,yBAAA,EAA0B;gBACxCC,OAAO,EAAEF,QAAQ,CAARA,QAAAA,CAD+B,OAAA;gBAExCG,YAAY,EAAEC,cAAAA,CAAAA,OAAAA,CAF0B,QAAA;gBAGxCC,UAAU,EAAE;cAH4B,CAA1B,CADqB;cAMrCH,OAAO,EAAEF,QAAQ,CAARA,QAAAA,CAN4B,OAAA;cAOrCG,YAAY,EAAEC,cAAAA,CAAAA,OAAAA,CAAcE;YAPS,CAAvB;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAJH;EAabC,eAAe,EAAE;IAAA;IAAA;MAAA;QAAA;UAAA;YAAQC,MAAR,SAAQA,MAAR;YAAA;YAAA,iCACT,CAAA,GAAA,QAAA,CAAA,OAAA,EAAQ;cACZC,GAAG,EADS,UAAA;cAEZZ,KAFY,EAEZA,KAFY;cAGZa,GAAG,EAHS,uDAAA;cAIZF,MAAAA,EAAAA;YAJY,CAAR,CADS;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;AAbJ,C","sourcesContent":["import versionRanges from '../versionRanges';\nimport {doesSoftwareNeedToBeFixed} from '../checkInstallation';\nimport {install} from '../install';\nimport {HealthCheckInterface} from '../../types';\n\nconst label = 'Watchman';\n\nexport default {\n  label,\n  description:\n    'Used for watching changes in the filesystem when in development mode',\n  getDiagnostics: async ({Binaries}) => ({\n    needsToBeFixed: doesSoftwareNeedToBeFixed({\n      version: Binaries.Watchman.version,\n      versionRange: versionRanges.WATCHMAN,\n      looseRange: true,\n    }),\n    version: Binaries.Watchman.version,\n    versionRange: versionRanges.WATCHMAN,\n  }),\n  runAutomaticFix: async ({loader}) =>\n    await install({\n      pkg: 'watchman',\n      label,\n      url: 'https://facebook.github.io/watchman/docs/install.html',\n      loader,\n    }),\n} as HealthCheckInterface;\n"]},"metadata":{},"sourceType":"script"}