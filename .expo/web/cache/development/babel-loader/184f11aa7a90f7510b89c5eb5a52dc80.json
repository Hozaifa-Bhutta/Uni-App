{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction walk(current) {\n  if (!_fs().default.lstatSync(current).isDirectory()) {\n    return [current];\n  }\n\n  var files = _fs().default.readdirSync(current).map(function (child) {\n    return walk(_path().default.join(current, child));\n  });\n\n  var result = [];\n  return result.concat.apply([current], files);\n}\n\nvar _default = walk;\nexports.default = _default;","map":{"version":3,"sources":["../../src/tools/walk.ts"],"names":["fs","files","child","walk","path","result"],"mappings":";;;;;;;AAQA,SAAA,GAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;;EAAA,GAAA,GAAA,eAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,SAAA,KAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;EAAA,KAAA,GAAA,iBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;;;;;;;AAEA,SAAA,IAAA,CAAA,OAAA,EAAyC;EACvC,IAAI,CAACA,GAAAA,GAAAA,OAAAA,CAAAA,SAAAA,CAAAA,OAAAA,EAAL,WAAKA,EAAL,EAA0C;IACxC,OAAO,CAAP,OAAO,CAAP;EACD;;EAED,IAAMC,KAAK,GAAGD,GAAAA,GAAAA,OAAAA,CAAAA,WAAAA,CAAAA,OAAAA,EAAAA,GAAAA,CAENE,UAAAA,KAAD;IAAA,OAAWC,IAAI,CAACC,KAAAA,GAAAA,OAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EAFvB,KAEuBA,CAAD,CAAf;EAAA,CAFOJ,CAAd;;EAGA,IAAMK,MAAgB,GAAtB,EAAA;EACA,OAAOA,MAAM,CAANA,MAAAA,CAAAA,KAAAA,CAAoB,CAApBA,OAAoB,CAApBA,EAAP,KAAOA,CAAP;AACD;;eAEcF,I","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nfunction walk(current: string): string[] {\n  if (!fs.lstatSync(current).isDirectory()) {\n    return [current];\n  }\n\n  const files = fs\n    .readdirSync(current)\n    .map((child) => walk(path.join(current, child)));\n  const result: string[] = [];\n  return result.concat.apply([current], files);\n}\n\nexport default walk;\n"]},"metadata":{},"sourceType":"script"}