{"ast":null,"code":"\"use strict\";\n\nvar path = require(\"path\");\n\nvar PATH_RE = /^(.+?)(\\.([^.]+))?\\.([^.]+)$/;\n\nfunction parsePlatformFilePath(filePath, platforms) {\n  var dirPath = path.dirname(filePath);\n  var fileName = path.basename(filePath);\n  var match = fileName.match(PATH_RE);\n\n  if (!match) {\n    return {\n      dirPath: dirPath,\n      baseName: fileName,\n      platform: null,\n      extension: null\n    };\n  }\n\n  var extension = match[4] || null;\n  var platform = match[3] || null;\n\n  if (platform == null || platforms.has(platform)) {\n    return {\n      dirPath: dirPath,\n      baseName: match[1],\n      platform: platform,\n      extension: extension\n    };\n  }\n\n  var baseName = match[1] + \".\" + platform;\n  return {\n    dirPath: dirPath,\n    baseName: baseName,\n    platform: null,\n    extension: extension\n  };\n}\n\nmodule.exports = parsePlatformFilePath;","map":{"version":3,"names":["path","require","PATH_RE","parsePlatformFilePath","filePath","platforms","dirPath","dirname","fileName","basename","match","baseName","platform","extension","has","module","exports"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/metro/src/node-haste/lib/parsePlatformFilePath.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\"use strict\";\n\nconst path = require(\"path\");\n\nconst PATH_RE = /^(.+?)(\\.([^.]+))?\\.([^.]+)$/;\n/**\n * Extract the components of a file path that can have a platform specifier: Ex.\n * `index.ios.js` is specific to the `ios` platform and has the extension `js`.\n */\n\nfunction parsePlatformFilePath(filePath, platforms) {\n  const dirPath = path.dirname(filePath);\n  const fileName = path.basename(filePath);\n  const match = fileName.match(PATH_RE);\n\n  if (!match) {\n    return {\n      dirPath,\n      baseName: fileName,\n      platform: null,\n      extension: null,\n    };\n  }\n\n  const extension = match[4] || null;\n  const platform = match[3] || null;\n\n  if (platform == null || platforms.has(platform)) {\n    return {\n      dirPath,\n      baseName: match[1],\n      platform,\n      extension,\n    };\n  }\n\n  const baseName = `${match[1]}.${platform}`;\n  return {\n    dirPath,\n    baseName,\n    platform: null,\n    extension,\n  };\n}\n\nmodule.exports = parsePlatformFilePath;\n"],"mappings":"AASA;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAMC,OAAO,GAAG,8BAAhB;;AAMA,SAASC,qBAAT,CAA+BC,QAA/B,EAAyCC,SAAzC,EAAoD;EAClD,IAAMC,OAAO,GAAGN,IAAI,CAACO,OAAL,CAAaH,QAAb,CAAhB;EACA,IAAMI,QAAQ,GAAGR,IAAI,CAACS,QAAL,CAAcL,QAAd,CAAjB;EACA,IAAMM,KAAK,GAAGF,QAAQ,CAACE,KAAT,CAAeR,OAAf,CAAd;;EAEA,IAAI,CAACQ,KAAL,EAAY;IACV,OAAO;MACLJ,OAAO,EAAPA,OADK;MAELK,QAAQ,EAAEH,QAFL;MAGLI,QAAQ,EAAE,IAHL;MAILC,SAAS,EAAE;IAJN,CAAP;EAMD;;EAED,IAAMA,SAAS,GAAGH,KAAK,CAAC,CAAD,CAAL,IAAY,IAA9B;EACA,IAAME,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAAL,IAAY,IAA7B;;EAEA,IAAIE,QAAQ,IAAI,IAAZ,IAAoBP,SAAS,CAACS,GAAV,CAAcF,QAAd,CAAxB,EAAiD;IAC/C,OAAO;MACLN,OAAO,EAAPA,OADK;MAELK,QAAQ,EAAED,KAAK,CAAC,CAAD,CAFV;MAGLE,QAAQ,EAARA,QAHK;MAILC,SAAS,EAATA;IAJK,CAAP;EAMD;;EAED,IAAMF,QAAQ,GAAMD,KAAK,CAAC,CAAD,CAAX,SAAkBE,QAAhC;EACA,OAAO;IACLN,OAAO,EAAPA,OADK;IAELK,QAAQ,EAARA,QAFK;IAGLC,QAAQ,EAAE,IAHL;IAILC,SAAS,EAATA;EAJK,CAAP;AAMD;;AAEDE,MAAM,CAACC,OAAP,GAAiBb,qBAAjB"},"metadata":{},"sourceType":"script"}