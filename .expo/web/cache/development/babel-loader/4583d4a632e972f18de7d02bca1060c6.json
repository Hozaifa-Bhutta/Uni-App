{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _adb = _interopRequireDefault(require(\"./adb\"));\n\nvar _tryRunAdbReverse = _interopRequireDefault(require(\"./tryRunAdbReverse\"));\n\nvar _tryLaunchAppOnDevice = _interopRequireDefault(require(\"./tryLaunchAppOnDevice\"));\n\nvar _tryLaunchEmulator = _interopRequireDefault(require(\"./tryLaunchEmulator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getTaskNames(appName, commands) {\n  return appName ? commands.map(function (command) {\n    return appName + \":\" + command;\n  }) : commands;\n}\n\nfunction toPascalCase(value) {\n  return value !== '' ? value[0].toUpperCase() + value.slice(1) : value;\n}\n\nfunction runOnAllDevices(args, cmd, adbPath, androidProject) {\n  var devices, result, tasks, gradleArgs, architectures;\n  return _regeneratorRuntime.async(function runOnAllDevices$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          devices = _adb.default.getDevices(adbPath);\n\n          if (!(devices.length === 0)) {\n            _context.next = 7;\n            break;\n          }\n\n          _cliTools().logger.info('Launching emulator...');\n\n          _context.next = 5;\n          return _regeneratorRuntime.awrap((0, _tryLaunchEmulator.default)(adbPath));\n\n        case 5:\n          result = _context.sent;\n\n          if (result.success) {\n            _cliTools().logger.info('Successfully launched emulator.');\n\n            devices = _adb.default.getDevices(adbPath);\n          } else {\n            _cliTools().logger.error(\"Failed to launch emulator. Reason: \" + _chalk().default.dim(result.error || '') + \".\");\n\n            _cliTools().logger.warn('Please launch an emulator manually or connect a device. Otherwise app may fail to launch.');\n          }\n\n        case 7:\n          _context.prev = 7;\n          tasks = args.tasks || ['install' + toPascalCase(args.variant)];\n          gradleArgs = getTaskNames(androidProject.appName, tasks);\n\n          if (args.port != null) {\n            gradleArgs.push('-PreactNativeDevServerPort=' + args.port);\n          }\n\n          if (args.activeArchOnly) {\n            architectures = devices.map(function (device) {\n              return _adb.default.getCPU(adbPath, device);\n            }).filter(function (arch) {\n              return arch != null;\n            });\n\n            if (architectures.length > 0) {\n              _cliTools().logger.info(\"Detected architectures \" + architectures.join(', '));\n\n              gradleArgs.push('-PreactNativeDebugArchitectures=' + architectures.join(','));\n              gradleArgs.push('-PreactNativeArchitectures=' + architectures.join(','));\n            }\n          }\n\n          _cliTools().logger.info('Installing the app...');\n\n          _cliTools().logger.debug(\"Running command \\\"cd android && \" + cmd + \" \" + gradleArgs.join(' ') + \"\\\"\");\n\n          _context.next = 16;\n          return _regeneratorRuntime.awrap((0, _execa().default)(cmd, gradleArgs, {\n            stdio: ['inherit', 'inherit', 'pipe'],\n            cwd: androidProject.sourceDir\n          }));\n\n        case 16:\n          _context.next = 21;\n          break;\n\n        case 18:\n          _context.prev = 18;\n          _context.t0 = _context[\"catch\"](7);\n          throw createInstallError(_context.t0);\n\n        case 21:\n          (devices.length > 0 ? devices : [undefined]).forEach(function (device) {\n            (0, _tryRunAdbReverse.default)(args.port, device);\n            (0, _tryLaunchAppOnDevice.default)(device, androidProject.packageName, adbPath, args);\n          });\n\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[7, 18]], Promise);\n}\n\nfunction createInstallError(error) {\n  var stderr = (error.stderr || '').toString();\n  var docs = 'https://reactnative.dev/docs/environment-setup';\n\n  var message = \"Make sure you have the Android development environment set up: \" + _chalk().default.underline.dim(docs);\n\n  _cliTools().logger.log(stderr);\n\n  if (stderr.includes('No connected devices')) {\n    message = 'Make sure you have an Android emulator running or a device connected';\n  } else if (stderr.includes('licences have not been accepted') || stderr.includes('accept the SDK license')) {\n    message = \"Please accept all necessary Android SDK licenses using Android SDK Manager: \\\"\" + _chalk().default.bold('$ANDROID_HOME/tools/bin/sdkmanager --licenses') + \"\\\"\";\n  }\n\n  return new (_cliTools().CLIError)(\"Failed to install the app. \" + message + \".\", error);\n}\n\nvar _default = runOnAllDevices;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/runAndroid/runOnAllDevices.ts"],"names":["appName","commands","command","value","devices","adb","logger","result","chalk","tasks","args","toPascalCase","gradleArgs","getTaskNames","androidProject","architectures","device","arch","cmd","stdio","cwd","sourceDir","createInstallError","stderr","error","docs","message","CLIError","runOnAllDevices"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport chalk from 'chalk';\nimport execa from 'execa';\nimport {Config} from '@react-native-community/cli-types';\nimport {logger, CLIError} from '@react-native-community/cli-tools';\nimport adb from './adb';\nimport tryRunAdbReverse from './tryRunAdbReverse';\nimport tryLaunchAppOnDevice from './tryLaunchAppOnDevice';\nimport tryLaunchEmulator from './tryLaunchEmulator';\nimport {Flags} from '.';\n\nfunction getTaskNames(appName: string, commands: Array<string>): Array<string> {\n  return appName\n    ? commands.map((command) => `${appName}:${command}`)\n    : commands;\n}\n\nfunction toPascalCase(value: string) {\n  return value !== '' ? value[0].toUpperCase() + value.slice(1) : value;\n}\n\ntype AndroidProject = NonNullable<Config['project']['android']>;\n\nasync function runOnAllDevices(\n  args: Flags,\n  cmd: string,\n  adbPath: string,\n  androidProject: AndroidProject,\n) {\n  let devices = adb.getDevices(adbPath);\n  if (devices.length === 0) {\n    logger.info('Launching emulator...');\n    const result = await tryLaunchEmulator(adbPath);\n    if (result.success) {\n      logger.info('Successfully launched emulator.');\n      devices = adb.getDevices(adbPath);\n    } else {\n      logger.error(\n        `Failed to launch emulator. Reason: ${chalk.dim(result.error || '')}.`,\n      );\n      logger.warn(\n        'Please launch an emulator manually or connect a device. Otherwise app may fail to launch.',\n      );\n    }\n  }\n\n  try {\n    const tasks = args.tasks || ['install' + toPascalCase(args.variant)];\n    const gradleArgs = getTaskNames(androidProject.appName, tasks);\n\n    if (args.port != null) {\n      gradleArgs.push('-PreactNativeDevServerPort=' + args.port);\n    }\n\n    if (args.activeArchOnly) {\n      const architectures = devices\n        .map((device) => {\n          return adb.getCPU(adbPath, device);\n        })\n        .filter((arch) => arch != null);\n      if (architectures.length > 0) {\n        logger.info(`Detected architectures ${architectures.join(', ')}`);\n        // `reactNativeDebugArchitectures` was renamed to `reactNativeArchitectures` in 0.68.\n        // Can be removed when 0.67 no longer needs to be supported.\n        gradleArgs.push(\n          '-PreactNativeDebugArchitectures=' + architectures.join(','),\n        );\n        gradleArgs.push(\n          '-PreactNativeArchitectures=' + architectures.join(','),\n        );\n      }\n    }\n\n    logger.info('Installing the app...');\n    logger.debug(\n      `Running command \"cd android && ${cmd} ${gradleArgs.join(' ')}\"`,\n    );\n\n    await execa(cmd, gradleArgs, {\n      stdio: ['inherit', 'inherit', 'pipe'],\n      cwd: androidProject.sourceDir,\n    });\n  } catch (error) {\n    throw createInstallError(error);\n  }\n\n  (devices.length > 0 ? devices : [undefined]).forEach(\n    (device: string | void) => {\n      tryRunAdbReverse(args.port, device);\n      tryLaunchAppOnDevice(device, androidProject.packageName, adbPath, args);\n    },\n  );\n}\n\nfunction createInstallError(error: Error & {stderr: string}) {\n  const stderr = (error.stderr || '').toString();\n  const docs = 'https://reactnative.dev/docs/environment-setup';\n  let message = `Make sure you have the Android development environment set up: ${chalk.underline.dim(\n    docs,\n  )}`;\n\n  // Pass the error message from the command to stdout because we pipe it to\n  // parent process so it's not visible\n  logger.log(stderr);\n\n  // Handle some common failures and make the errors more helpful\n  if (stderr.includes('No connected devices')) {\n    message =\n      'Make sure you have an Android emulator running or a device connected';\n  } else if (\n    stderr.includes('licences have not been accepted') ||\n    stderr.includes('accept the SDK license')\n  ) {\n    message = `Please accept all necessary Android SDK licenses using Android SDK Manager: \"${chalk.bold(\n      '$ANDROID_HOME/tools/bin/sdkmanager --licenses',\n    )}\"`;\n  }\n\n  return new CLIError(`Failed to install the app. ${message}.`, error);\n}\n\nexport default runOnAllDevices;\n"]},"metadata":{},"sourceType":"script"}