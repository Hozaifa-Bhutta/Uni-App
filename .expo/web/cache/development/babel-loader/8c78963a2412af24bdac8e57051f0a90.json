{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _excluded = [\"type\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar Bundler = require(\"./Bundler\");\n\nvar DeltaBundler = require(\"./DeltaBundler\");\n\nvar ResourceNotFoundError = require(\"./IncrementalBundler/ResourceNotFoundError\");\n\nvar getGraphId = require(\"./lib/getGraphId\");\n\nvar getPrependedScripts = require(\"./lib/getPrependedScripts\");\n\nvar transformHelpers = require(\"./lib/transformHelpers\");\n\nvar crypto = require(\"crypto\");\n\nvar fs = require(\"fs\");\n\nvar path = require(\"path\");\n\nfunction createRevisionId() {\n  return crypto.randomBytes(8).toString(\"hex\");\n}\n\nfunction revisionIdFromString(str) {\n  return str;\n}\n\nvar IncrementalBundler = function () {\n  function IncrementalBundler(config, options) {\n    _classCallCheck(this, IncrementalBundler);\n\n    this._revisionsById = new Map();\n    this._revisionsByGraphId = new Map();\n    this._config = config;\n    this._bundler = new Bundler(config, options);\n    this._deltaBundler = new DeltaBundler(this._bundler);\n  }\n\n  _createClass(IncrementalBundler, [{\n    key: \"end\",\n    value: function end() {\n      this._deltaBundler.end();\n\n      this._bundler.end();\n    }\n  }, {\n    key: \"getBundler\",\n    value: function getBundler() {\n      return this._bundler;\n    }\n  }, {\n    key: \"getDeltaBundler\",\n    value: function getDeltaBundler() {\n      return this._deltaBundler;\n    }\n  }, {\n    key: \"getRevision\",\n    value: function getRevision(revisionId) {\n      return this._revisionsById.get(revisionId);\n    }\n  }, {\n    key: \"getRevisionByGraphId\",\n    value: function getRevisionByGraphId(graphId) {\n      return this._revisionsByGraphId.get(graphId);\n    }\n  }, {\n    key: \"buildGraphForEntries\",\n    value: function buildGraphForEntries(entryFiles, transformOptions) {\n      var otherOptions,\n          absoluteEntryFiles,\n          graph,\n          _args = arguments;\n      return _regeneratorRuntime.async(function buildGraphForEntries$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              otherOptions = _args.length > 2 && _args[2] !== undefined ? _args[2] : {\n                onProgress: null,\n                shallow: false\n              };\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this._getAbsoluteEntryFiles(entryFiles));\n\n            case 3:\n              absoluteEntryFiles = _context.sent;\n              _context.t0 = _regeneratorRuntime;\n              _context.t1 = this._deltaBundler;\n              _context.t2 = absoluteEntryFiles;\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(transformHelpers.getResolveDependencyFn(this._bundler, transformOptions.platform));\n\n            case 9:\n              _context.t3 = _context.sent;\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(transformHelpers.getTransformFn(absoluteEntryFiles, this._bundler, this._deltaBundler, this._config, transformOptions));\n\n            case 12:\n              _context.t4 = _context.sent;\n              _context.t5 = transformOptions;\n              _context.t6 = otherOptions.onProgress;\n              _context.t7 = this._config.transformer.experimentalImportBundleSupport;\n              _context.t8 = otherOptions.shallow;\n              _context.t9 = {\n                resolve: _context.t3,\n                transform: _context.t4,\n                transformOptions: _context.t5,\n                onProgress: _context.t6,\n                experimentalImportBundleSupport: _context.t7,\n                shallow: _context.t8\n              };\n              _context.t10 = _context.t1.buildGraph.call(_context.t1, _context.t2, _context.t9);\n              _context.next = 21;\n              return _context.t0.awrap.call(_context.t0, _context.t10);\n\n            case 21:\n              graph = _context.sent;\n\n              this._config.serializer.experimentalSerializerHook(graph, {\n                added: graph.dependencies,\n                modified: new Map(),\n                deleted: new Set(),\n                reset: true\n              });\n\n              return _context.abrupt(\"return\", graph);\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getDependencies\",\n    value: function getDependencies(entryFiles, transformOptions) {\n      var otherOptions,\n          absoluteEntryFiles,\n          dependencies,\n          _args2 = arguments;\n      return _regeneratorRuntime.async(function getDependencies$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              otherOptions = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {\n                onProgress: null,\n                shallow: false\n              };\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(this._getAbsoluteEntryFiles(entryFiles));\n\n            case 3:\n              absoluteEntryFiles = _context2.sent;\n              _context2.t0 = _regeneratorRuntime;\n              _context2.t1 = this._deltaBundler;\n              _context2.t2 = absoluteEntryFiles;\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(transformHelpers.getResolveDependencyFn(this._bundler, transformOptions.platform));\n\n            case 9:\n              _context2.t3 = _context2.sent;\n              _context2.next = 12;\n              return _regeneratorRuntime.awrap(transformHelpers.getTransformFn(absoluteEntryFiles, this._bundler, this._deltaBundler, this._config, transformOptions));\n\n            case 12:\n              _context2.t4 = _context2.sent;\n              _context2.t5 = transformOptions;\n              _context2.t6 = otherOptions.onProgress;\n              _context2.t7 = this._config.transformer.experimentalImportBundleSupport;\n              _context2.t8 = otherOptions.shallow;\n              _context2.t9 = {\n                resolve: _context2.t3,\n                transform: _context2.t4,\n                transformOptions: _context2.t5,\n                onProgress: _context2.t6,\n                experimentalImportBundleSupport: _context2.t7,\n                shallow: _context2.t8\n              };\n              _context2.t10 = _context2.t1.getDependencies.call(_context2.t1, _context2.t2, _context2.t9);\n              _context2.next = 21;\n              return _context2.t0.awrap.call(_context2.t0, _context2.t10);\n\n            case 21:\n              dependencies = _context2.sent;\n              return _context2.abrupt(\"return\", dependencies);\n\n            case 23:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"buildGraph\",\n    value: function buildGraph(entryFile, transformOptions) {\n      var otherOptions,\n          graph,\n          _,\n          transformOptionsWithoutType,\n          prepend,\n          _args3 = arguments;\n\n      return _regeneratorRuntime.async(function buildGraph$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              otherOptions = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {\n                onProgress: null,\n                shallow: false\n              };\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(this.buildGraphForEntries([entryFile], transformOptions, otherOptions));\n\n            case 3:\n              graph = _context3.sent;\n              _ = transformOptions.type, transformOptionsWithoutType = _objectWithoutProperties(transformOptions, _excluded);\n              _context3.next = 7;\n              return _regeneratorRuntime.awrap(getPrependedScripts(this._config, transformOptionsWithoutType, this._bundler, this._deltaBundler));\n\n            case 7:\n              prepend = _context3.sent;\n              return _context3.abrupt(\"return\", {\n                prepend: prepend,\n                graph: graph\n              });\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"initializeGraph\",\n    value: function initializeGraph(entryFile, transformOptions) {\n      var _this = this;\n\n      var otherOptions,\n          graphId,\n          revisionId,\n          revisionPromise,\n          revision,\n          delta,\n          _args5 = arguments;\n      return _regeneratorRuntime.async(function initializeGraph$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              otherOptions = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {\n                onProgress: null,\n                shallow: false\n              };\n              graphId = getGraphId(entryFile, transformOptions, {\n                shallow: otherOptions.shallow,\n                experimentalImportBundleSupport: this._config.transformer.experimentalImportBundleSupport\n              });\n              revisionId = createRevisionId();\n\n              revisionPromise = function _callee() {\n                var _await$_this$buildGra, graph, prepend;\n\n                return _regeneratorRuntime.async(function _callee$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        _context4.next = 2;\n                        return _regeneratorRuntime.awrap(_this.buildGraph(entryFile, transformOptions, otherOptions));\n\n                      case 2:\n                        _await$_this$buildGra = _context4.sent;\n                        graph = _await$_this$buildGra.graph;\n                        prepend = _await$_this$buildGra.prepend;\n                        return _context4.abrupt(\"return\", {\n                          id: revisionId,\n                          date: new Date(),\n                          graphId: graphId,\n                          graph: graph,\n                          prepend: prepend\n                        });\n\n                      case 6:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              }();\n\n              this._revisionsById.set(revisionId, revisionPromise);\n\n              this._revisionsByGraphId.set(graphId, revisionPromise);\n\n              _context5.prev = 6;\n              _context5.next = 9;\n              return _regeneratorRuntime.awrap(revisionPromise);\n\n            case 9:\n              revision = _context5.sent;\n              delta = {\n                added: revision.graph.dependencies,\n                modified: new Map(),\n                deleted: new Set(),\n                reset: true\n              };\n              return _context5.abrupt(\"return\", {\n                revision: revision,\n                delta: delta\n              });\n\n            case 14:\n              _context5.prev = 14;\n              _context5.t0 = _context5[\"catch\"](6);\n\n              this._revisionsById.delete(revisionId);\n\n              this._revisionsByGraphId.delete(graphId);\n\n              throw _context5.t0;\n\n            case 19:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, [[6, 14]], Promise);\n    }\n  }, {\n    key: \"updateGraph\",\n    value: function updateGraph(revision, reset) {\n      var delta, revisionPromise;\n      return _regeneratorRuntime.async(function updateGraph$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _regeneratorRuntime.awrap(this._deltaBundler.getDelta(revision.graph, {\n                reset: reset,\n                shallow: false\n              }));\n\n            case 2:\n              delta = _context6.sent;\n\n              this._config.serializer.experimentalSerializerHook(revision.graph, delta);\n\n              if (delta.added.size > 0 || delta.modified.size > 0 || delta.deleted.size > 0) {\n                this._revisionsById.delete(revision.id);\n\n                revision = _objectSpread(_objectSpread({}, revision), {}, {\n                  id: crypto.randomBytes(8).toString(\"hex\"),\n                  date: new Date()\n                });\n                revisionPromise = Promise.resolve(revision);\n\n                this._revisionsById.set(revision.id, revisionPromise);\n\n                this._revisionsByGraphId.set(revision.graphId, revisionPromise);\n              }\n\n              return _context6.abrupt(\"return\", {\n                revision: revision,\n                delta: delta\n              });\n\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"endGraph\",\n    value: function endGraph(graphId) {\n      var revPromise, revision;\n      return _regeneratorRuntime.async(function endGraph$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              revPromise = this._revisionsByGraphId.get(graphId);\n\n              if (revPromise) {\n                _context7.next = 3;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 3:\n              _context7.next = 5;\n              return _regeneratorRuntime.awrap(revPromise);\n\n            case 5:\n              revision = _context7.sent;\n\n              this._deltaBundler.endGraph(revision.graph);\n\n              this._revisionsByGraphId.delete(graphId);\n\n              this._revisionsById.delete(revision.id);\n\n            case 9:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_getAbsoluteEntryFiles\",\n    value: function _getAbsoluteEntryFiles(entryFiles) {\n      var _this2 = this;\n\n      var absoluteEntryFiles;\n      return _regeneratorRuntime.async(function _getAbsoluteEntryFiles$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              absoluteEntryFiles = entryFiles.map(function (entryFile) {\n                var _this$_config$server$;\n\n                return path.resolve((_this$_config$server$ = _this2._config.server.unstable_serverRoot) !== null && _this$_config$server$ !== void 0 ? _this$_config$server$ : _this2._config.projectRoot, entryFile);\n              });\n              _context8.next = 3;\n              return _regeneratorRuntime.awrap(Promise.all(absoluteEntryFiles.map(function (entryFile) {\n                return new Promise(function (resolve, reject) {\n                  fs.realpath(entryFile, function (err) {\n                    if (err) {\n                      reject(new ResourceNotFoundError(entryFile));\n                    } else {\n                      resolve();\n                    }\n                  });\n                });\n              })));\n\n            case 3:\n              return _context8.abrupt(\"return\", absoluteEntryFiles);\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"ready\",\n    value: function ready() {\n      return _regeneratorRuntime.async(function ready$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return _regeneratorRuntime.awrap(this._bundler.ready());\n\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return IncrementalBundler;\n}();\n\nIncrementalBundler.revisionIdFromString = revisionIdFromString;\nmodule.exports = IncrementalBundler;","map":{"version":3,"names":["Bundler","require","DeltaBundler","ResourceNotFoundError","getGraphId","getPrependedScripts","transformHelpers","crypto","fs","path","createRevisionId","randomBytes","toString","revisionIdFromString","str","IncrementalBundler","config","options","_revisionsById","Map","_revisionsByGraphId","_config","_bundler","_deltaBundler","end","revisionId","get","graphId","entryFiles","transformOptions","otherOptions","onProgress","shallow","_getAbsoluteEntryFiles","absoluteEntryFiles","getResolveDependencyFn","platform","getTransformFn","transformer","experimentalImportBundleSupport","resolve","transform","buildGraph","graph","serializer","experimentalSerializerHook","added","dependencies","modified","deleted","Set","reset","getDependencies","entryFile","buildGraphForEntries","_","type","transformOptionsWithoutType","prepend","revisionPromise","id","date","Date","set","revision","delta","delete","getDelta","size","Promise","revPromise","endGraph","map","_this$_config$server$","server","unstable_serverRoot","projectRoot","all","reject","realpath","err","ready","module","exports"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/metro/src/IncrementalBundler.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\"use strict\";\n\nconst Bundler = require(\"./Bundler\");\n\nconst DeltaBundler = require(\"./DeltaBundler\");\n\nconst ResourceNotFoundError = require(\"./IncrementalBundler/ResourceNotFoundError\");\n\nconst getGraphId = require(\"./lib/getGraphId\");\n\nconst getPrependedScripts = require(\"./lib/getPrependedScripts\");\n\nconst transformHelpers = require(\"./lib/transformHelpers\");\n\nconst crypto = require(\"crypto\");\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nfunction createRevisionId() {\n  return crypto.randomBytes(8).toString(\"hex\");\n}\n\nfunction revisionIdFromString(str) {\n  return str;\n}\n\nclass IncrementalBundler {\n  _revisionsById = new Map();\n  _revisionsByGraphId = new Map();\n  static revisionIdFromString = revisionIdFromString;\n\n  constructor(config, options) {\n    this._config = config;\n    this._bundler = new Bundler(config, options);\n    this._deltaBundler = new DeltaBundler(this._bundler);\n  }\n\n  end() {\n    this._deltaBundler.end();\n\n    this._bundler.end();\n  }\n\n  getBundler() {\n    return this._bundler;\n  }\n\n  getDeltaBundler() {\n    return this._deltaBundler;\n  }\n\n  getRevision(revisionId) {\n    return this._revisionsById.get(revisionId);\n  }\n\n  getRevisionByGraphId(graphId) {\n    return this._revisionsByGraphId.get(graphId);\n  }\n\n  async buildGraphForEntries(\n    entryFiles,\n    transformOptions,\n    otherOptions = {\n      onProgress: null,\n      shallow: false,\n    }\n  ) {\n    const absoluteEntryFiles = await this._getAbsoluteEntryFiles(entryFiles);\n    const graph = await this._deltaBundler.buildGraph(absoluteEntryFiles, {\n      resolve: await transformHelpers.getResolveDependencyFn(\n        this._bundler,\n        transformOptions.platform\n      ),\n      transform: await transformHelpers.getTransformFn(\n        absoluteEntryFiles,\n        this._bundler,\n        this._deltaBundler,\n        this._config,\n        transformOptions\n      ),\n      transformOptions,\n      onProgress: otherOptions.onProgress,\n      experimentalImportBundleSupport:\n        this._config.transformer.experimentalImportBundleSupport,\n      shallow: otherOptions.shallow,\n    });\n\n    this._config.serializer.experimentalSerializerHook(graph, {\n      added: graph.dependencies,\n      modified: new Map(),\n      deleted: new Set(),\n      reset: true,\n    });\n\n    return graph;\n  }\n\n  async getDependencies(\n    entryFiles,\n    transformOptions,\n    otherOptions = {\n      onProgress: null,\n      shallow: false,\n    }\n  ) {\n    const absoluteEntryFiles = await this._getAbsoluteEntryFiles(entryFiles);\n    const dependencies = await this._deltaBundler.getDependencies(\n      absoluteEntryFiles,\n      {\n        resolve: await transformHelpers.getResolveDependencyFn(\n          this._bundler,\n          transformOptions.platform\n        ),\n        transform: await transformHelpers.getTransformFn(\n          absoluteEntryFiles,\n          this._bundler,\n          this._deltaBundler,\n          this._config,\n          transformOptions\n        ),\n        transformOptions,\n        onProgress: otherOptions.onProgress,\n        experimentalImportBundleSupport:\n          this._config.transformer.experimentalImportBundleSupport,\n        shallow: otherOptions.shallow,\n      }\n    );\n    return dependencies;\n  }\n\n  async buildGraph(\n    entryFile,\n    transformOptions,\n    otherOptions = {\n      onProgress: null,\n      shallow: false,\n    }\n  ) {\n    const graph = await this.buildGraphForEntries(\n      [entryFile],\n      transformOptions,\n      otherOptions\n    );\n    const { type: _, ...transformOptionsWithoutType } = transformOptions;\n    const prepend = await getPrependedScripts(\n      this._config,\n      transformOptionsWithoutType,\n      this._bundler,\n      this._deltaBundler\n    );\n    return {\n      prepend,\n      graph,\n    };\n  } // TODO T34760750 (alexkirsz) Eventually, I'd like to get to a point where\n  // this class exposes only initializeGraph and updateGraph.\n\n  async initializeGraph(\n    entryFile,\n    transformOptions,\n    otherOptions = {\n      onProgress: null,\n      shallow: false,\n    }\n  ) {\n    const graphId = getGraphId(entryFile, transformOptions, {\n      shallow: otherOptions.shallow,\n      experimentalImportBundleSupport:\n        this._config.transformer.experimentalImportBundleSupport,\n    });\n    const revisionId = createRevisionId();\n\n    const revisionPromise = (async () => {\n      const { graph, prepend } = await this.buildGraph(\n        entryFile,\n        transformOptions,\n        otherOptions\n      );\n      return {\n        id: revisionId,\n        date: new Date(),\n        graphId,\n        graph,\n        prepend,\n      };\n    })();\n\n    this._revisionsById.set(revisionId, revisionPromise);\n\n    this._revisionsByGraphId.set(graphId, revisionPromise);\n\n    try {\n      const revision = await revisionPromise;\n      const delta = {\n        added: revision.graph.dependencies,\n        modified: new Map(),\n        deleted: new Set(),\n        reset: true,\n      };\n      return {\n        revision,\n        delta,\n      };\n    } catch (err) {\n      // Evict a bad revision from the cache since otherwise\n      // we'll keep getting it even after the build is fixed.\n      this._revisionsById.delete(revisionId);\n\n      this._revisionsByGraphId.delete(graphId);\n\n      throw err;\n    }\n  }\n\n  async updateGraph(revision, reset) {\n    const delta = await this._deltaBundler.getDelta(revision.graph, {\n      reset,\n      shallow: false,\n    });\n\n    this._config.serializer.experimentalSerializerHook(revision.graph, delta);\n\n    if (\n      delta.added.size > 0 ||\n      delta.modified.size > 0 ||\n      delta.deleted.size > 0\n    ) {\n      this._revisionsById.delete(revision.id);\n\n      revision = {\n        ...revision,\n        // Generate a new revision id, to be used to verify the next incremental\n        // request.\n        id: crypto.randomBytes(8).toString(\"hex\"),\n        date: new Date(),\n      };\n      const revisionPromise = Promise.resolve(revision);\n\n      this._revisionsById.set(revision.id, revisionPromise);\n\n      this._revisionsByGraphId.set(revision.graphId, revisionPromise);\n    }\n\n    return {\n      revision,\n      delta,\n    };\n  }\n\n  async endGraph(graphId) {\n    const revPromise = this._revisionsByGraphId.get(graphId);\n\n    if (!revPromise) {\n      return;\n    }\n\n    const revision = await revPromise;\n\n    this._deltaBundler.endGraph(revision.graph);\n\n    this._revisionsByGraphId.delete(graphId);\n\n    this._revisionsById.delete(revision.id);\n  }\n\n  async _getAbsoluteEntryFiles(entryFiles) {\n    const absoluteEntryFiles = entryFiles.map((entryFile) => {\n      var _this$_config$server$;\n\n      return path.resolve(\n        (_this$_config$server$ = this._config.server.unstable_serverRoot) !==\n          null && _this$_config$server$ !== void 0\n          ? _this$_config$server$\n          : this._config.projectRoot,\n        entryFile\n      );\n    });\n    await Promise.all(\n      absoluteEntryFiles.map(\n        (entryFile) =>\n          new Promise((resolve, reject) => {\n            // This should throw an error if the file doesn't exist.\n            // Using this instead of fs.exists to account for SimLinks.\n            fs.realpath(entryFile, (err) => {\n              if (err) {\n                reject(new ResourceNotFoundError(entryFile));\n              } else {\n                resolve();\n              }\n            });\n          })\n      )\n    );\n    return absoluteEntryFiles;\n  } // Wait for the bundler to become ready.\n\n  async ready() {\n    await this._bundler.ready();\n  }\n}\n\nmodule.exports = IncrementalBundler;\n"],"mappings":"AASA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,aAAvB;;AAEA,IAAMC,YAAY,GAAGD,OAAO,kBAA5B;;AAEA,IAAME,qBAAqB,GAAGF,OAAO,8CAArC;;AAEA,IAAMG,UAAU,GAAGH,OAAO,oBAA1B;;AAEA,IAAMI,mBAAmB,GAAGJ,OAAO,6BAAnC;;AAEA,IAAMK,gBAAgB,GAAGL,OAAO,0BAAhC;;AAEA,IAAMM,MAAM,GAAGN,OAAO,CAAC,QAAD,CAAtB;;AAEA,IAAMO,EAAE,GAAGP,OAAO,CAAC,IAAD,CAAlB;;AAEA,IAAMQ,IAAI,GAAGR,OAAO,CAAC,MAAD,CAApB;;AAEA,SAASS,gBAAT,GAA4B;EAC1B,OAAOH,MAAM,CAACI,WAAP,CAAmB,CAAnB,EAAsBC,QAAtB,CAA+B,KAA/B,CAAP;AACD;;AAED,SAASC,oBAAT,CAA8BC,GAA9B,EAAmC;EACjC,OAAOA,GAAP;AACD;;IAEKC,kB;EAKJ,4BAAYC,MAAZ,EAAoBC,OAApB,EAA6B;IAAA;;IAAA,KAJ7BC,cAI6B,GAJZ,IAAIC,GAAJ,EAIY;IAAA,KAH7BC,mBAG6B,GAHP,IAAID,GAAJ,EAGO;IAC3B,KAAKE,OAAL,GAAeL,MAAf;IACA,KAAKM,QAAL,GAAgB,IAAItB,OAAJ,CAAYgB,MAAZ,EAAoBC,OAApB,CAAhB;IACA,KAAKM,aAAL,GAAqB,IAAIrB,YAAJ,CAAiB,KAAKoB,QAAtB,CAArB;EACD;;;;WAED,eAAM;MACJ,KAAKC,aAAL,CAAmBC,GAAnB;;MAEA,KAAKF,QAAL,CAAcE,GAAd;IACD;;;WAED,sBAAa;MACX,OAAO,KAAKF,QAAZ;IACD;;;WAED,2BAAkB;MAChB,OAAO,KAAKC,aAAZ;IACD;;;WAED,qBAAYE,UAAZ,EAAwB;MACtB,OAAO,KAAKP,cAAL,CAAoBQ,GAApB,CAAwBD,UAAxB,CAAP;IACD;;;WAED,8BAAqBE,OAArB,EAA8B;MAC5B,OAAO,KAAKP,mBAAL,CAAyBM,GAAzB,CAA6BC,OAA7B,CAAP;IACD;;;WAED,8BACEC,UADF,EAEEC,gBAFF;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAGEC,YAHF,2DAGiB;gBACbC,UAAU,EAAE,IADC;gBAEbC,OAAO,EAAE;cAFI,CAHjB;cAAA;cAAA,iCAQmC,KAAKC,sBAAL,CAA4BL,UAA5B,CARnC;;YAAA;cAQQM,kBARR;cAAA;cAAA,cASsB,KAAKX,aAT3B;cAAA,cASoDW,kBATpD;cAAA;cAAA,iCAUmB5B,gBAAgB,CAAC6B,sBAAjB,CACb,KAAKb,QADQ,EAEbO,gBAAgB,CAACO,QAFJ,CAVnB;;YAAA;cAAA;cAAA;cAAA,iCAcqB9B,gBAAgB,CAAC+B,cAAjB,CACfH,kBADe,EAEf,KAAKZ,QAFU,EAGf,KAAKC,aAHU,EAIf,KAAKF,OAJU,EAKfQ,gBALe,CAdrB;;YAAA;cAAA;cAAA,cAqBIA,gBArBJ;cAAA,cAsBgBC,YAAY,CAACC,UAtB7B;cAAA,cAwBM,KAAKV,OAAL,CAAaiB,WAAb,CAAyBC,+BAxB/B;cAAA,cAyBaT,YAAY,CAACE,OAzB1B;cAAA;gBAUIQ,OAVJ;gBAcIC,SAdJ;gBAqBIZ,gBArBJ;gBAsBIE,UAtBJ;gBAuBIQ,+BAvBJ;gBAyBIP,OAzBJ;cAAA;cAAA,2BASyCU,UATzC;cAAA;cAAA;;YAAA;cASQC,KATR;;cA4BE,KAAKtB,OAAL,CAAauB,UAAb,CAAwBC,0BAAxB,CAAmDF,KAAnD,EAA0D;gBACxDG,KAAK,EAAEH,KAAK,CAACI,YAD2C;gBAExDC,QAAQ,EAAE,IAAI7B,GAAJ,EAF8C;gBAGxD8B,OAAO,EAAE,IAAIC,GAAJ,EAH+C;gBAIxDC,KAAK,EAAE;cAJiD,CAA1D;;cA5BF,iCAmCSR,KAnCT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;WAsCA,yBACEf,UADF,EAEEC,gBAFF;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAGEC,YAHF,8DAGiB;gBACbC,UAAU,EAAE,IADC;gBAEbC,OAAO,EAAE;cAFI,CAHjB;cAAA;cAAA,iCAQmC,KAAKC,sBAAL,CAA4BL,UAA5B,CARnC;;YAAA;cAQQM,kBARR;cAAA;cAAA,eAS6B,KAAKX,aATlC;cAAA,eAUIW,kBAVJ;cAAA;cAAA,iCAYqB5B,gBAAgB,CAAC6B,sBAAjB,CACb,KAAKb,QADQ,EAEbO,gBAAgB,CAACO,QAFJ,CAZrB;;YAAA;cAAA;cAAA;cAAA,iCAgBuB9B,gBAAgB,CAAC+B,cAAjB,CACfH,kBADe,EAEf,KAAKZ,QAFU,EAGf,KAAKC,aAHU,EAIf,KAAKF,OAJU,EAKfQ,gBALe,CAhBvB;;YAAA;cAAA;cAAA,eAuBMA,gBAvBN;cAAA,eAwBkBC,YAAY,CAACC,UAxB/B;cAAA,eA0BQ,KAAKV,OAAL,CAAaiB,WAAb,CAAyBC,+BA1BjC;cAAA,eA2BeT,YAAY,CAACE,OA3B5B;cAAA;gBAYMQ,OAZN;gBAgBMC,SAhBN;gBAuBMZ,gBAvBN;gBAwBME,UAxBN;gBAyBMQ,+BAzBN;gBA2BMP,OA3BN;cAAA;cAAA,6BASgDoB,eAThD;cAAA;cAAA;;YAAA;cASQL,YATR;cAAA,kCA8BSA,YA9BT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;WAiCA,oBACEM,SADF,EAEExB,gBAFF;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAGEC,YAHF,8DAGiB;gBACbC,UAAU,EAAE,IADC;gBAEbC,OAAO,EAAE;cAFI,CAHjB;cAAA;cAAA,iCAQsB,KAAKsB,oBAAL,CAClB,CAACD,SAAD,CADkB,EAElBxB,gBAFkB,EAGlBC,YAHkB,CARtB;;YAAA;cAQQa,KARR;cAagBY,CAbhB,GAasD1B,gBAbtD,CAaU2B,IAbV,EAasBC,2BAbtB,4BAasD5B,gBAbtD;cAAA;cAAA,iCAcwBxB,mBAAmB,CACvC,KAAKgB,OADkC,EAEvCoC,2BAFuC,EAGvC,KAAKnC,QAHkC,EAIvC,KAAKC,aAJkC,CAd3C;;YAAA;cAcQmC,OAdR;cAAA,kCAoBS;gBACLA,OAAO,EAAPA,OADK;gBAELf,KAAK,EAALA;cAFK,CApBT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;WA2BA,yBACEU,SADF,EAEExB,gBAFF;MAAA;;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAGEC,YAHF,8DAGiB;gBACbC,UAAU,EAAE,IADC;gBAEbC,OAAO,EAAE;cAFI,CAHjB;cAQQL,OARR,GAQkBvB,UAAU,CAACiD,SAAD,EAAYxB,gBAAZ,EAA8B;gBACtDG,OAAO,EAAEF,YAAY,CAACE,OADgC;gBAEtDO,+BAA+B,EAC7B,KAAKlB,OAAL,CAAaiB,WAAb,CAAyBC;cAH2B,CAA9B,CAR5B;cAaQd,UAbR,GAaqBf,gBAAgB,EAbrC;;cAeQiD,eAfR,GAe2B;gBAAA;;gBAAA;kBAAA;oBAAA;sBAAA;wBAAA;wBAAA,iCACU,KAAI,CAACjB,UAAL,CAC/BW,SAD+B,EAE/BxB,gBAF+B,EAG/BC,YAH+B,CADV;;sBAAA;wBAAA;wBACfa,KADe,yBACfA,KADe;wBACRe,OADQ,yBACRA,OADQ;wBAAA,kCAMhB;0BACLE,EAAE,EAAEnC,UADC;0BAELoC,IAAI,EAAE,IAAIC,IAAJ,EAFD;0BAGLnC,OAAO,EAAPA,OAHK;0BAILgB,KAAK,EAALA,KAJK;0BAKLe,OAAO,EAAPA;wBALK,CANgB;;sBAAA;sBAAA;wBAAA;oBAAA;kBAAA;gBAAA;cAAA,CAAD,EAf1B;;cA8BE,KAAKxC,cAAL,CAAoB6C,GAApB,CAAwBtC,UAAxB,EAAoCkC,eAApC;;cAEA,KAAKvC,mBAAL,CAAyB2C,GAAzB,CAA6BpC,OAA7B,EAAsCgC,eAAtC;;cAhCF;cAAA;cAAA,iCAmC2BA,eAnC3B;;YAAA;cAmCUK,QAnCV;cAoCUC,KApCV,GAoCkB;gBACZnB,KAAK,EAAEkB,QAAQ,CAACrB,KAAT,CAAeI,YADV;gBAEZC,QAAQ,EAAE,IAAI7B,GAAJ,EAFE;gBAGZ8B,OAAO,EAAE,IAAIC,GAAJ,EAHG;gBAIZC,KAAK,EAAE;cAJK,CApClB;cAAA,kCA0CW;gBACLa,QAAQ,EAARA,QADK;gBAELC,KAAK,EAALA;cAFK,CA1CX;;YAAA;cAAA;cAAA;;cAiDI,KAAK/C,cAAL,CAAoBgD,MAApB,CAA2BzC,UAA3B;;cAEA,KAAKL,mBAAL,CAAyB8C,MAAzB,CAAgCvC,OAAhC;;cAnDJ;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;WAyDA,qBAAkBqC,QAAlB,EAA4Bb,KAA5B;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCACsB,KAAK5B,aAAL,CAAmB4C,QAAnB,CAA4BH,QAAQ,CAACrB,KAArC,EAA4C;gBAC9DQ,KAAK,EAALA,KAD8D;gBAE9DnB,OAAO,EAAE;cAFqD,CAA5C,CADtB;;YAAA;cACQiC,KADR;;cAME,KAAK5C,OAAL,CAAauB,UAAb,CAAwBC,0BAAxB,CAAmDmB,QAAQ,CAACrB,KAA5D,EAAmEsB,KAAnE;;cAEA,IACEA,KAAK,CAACnB,KAAN,CAAYsB,IAAZ,GAAmB,CAAnB,IACAH,KAAK,CAACjB,QAAN,CAAeoB,IAAf,GAAsB,CADtB,IAEAH,KAAK,CAAChB,OAAN,CAAcmB,IAAd,GAAqB,CAHvB,EAIE;gBACA,KAAKlD,cAAL,CAAoBgD,MAApB,CAA2BF,QAAQ,CAACJ,EAApC;;gBAEAI,QAAQ,mCACHA,QADG;kBAINJ,EAAE,EAAErD,MAAM,CAACI,WAAP,CAAmB,CAAnB,EAAsBC,QAAtB,CAA+B,KAA/B,CAJE;kBAKNiD,IAAI,EAAE,IAAIC,IAAJ;gBALA,EAAR;gBAOMH,eAVN,GAUwBU,OAAO,CAAC7B,OAAR,CAAgBwB,QAAhB,CAVxB;;gBAYA,KAAK9C,cAAL,CAAoB6C,GAApB,CAAwBC,QAAQ,CAACJ,EAAjC,EAAqCD,eAArC;;gBAEA,KAAKvC,mBAAL,CAAyB2C,GAAzB,CAA6BC,QAAQ,CAACrC,OAAtC,EAA+CgC,eAA/C;cACD;;cA3BH,kCA6BS;gBACLK,QAAQ,EAARA,QADK;gBAELC,KAAK,EAALA;cAFK,CA7BT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;WAmCA,kBAAetC,OAAf;MAAA;MAAA;QAAA;UAAA;YAAA;cACQ2C,UADR,GACqB,KAAKlD,mBAAL,CAAyBM,GAAzB,CAA6BC,OAA7B,CADrB;;cAAA,IAGO2C,UAHP;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAAA;cAAA,iCAOyBA,UAPzB;;YAAA;cAOQN,QAPR;;cASE,KAAKzC,aAAL,CAAmBgD,QAAnB,CAA4BP,QAAQ,CAACrB,KAArC;;cAEA,KAAKvB,mBAAL,CAAyB8C,MAAzB,CAAgCvC,OAAhC;;cAEA,KAAKT,cAAL,CAAoBgD,MAApB,CAA2BF,QAAQ,CAACJ,EAApC;;YAbF;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;WAgBA,gCAA6BhC,UAA7B;MAAA;;MAAA;MAAA;QAAA;UAAA;YAAA;cACQM,kBADR,GAC6BN,UAAU,CAAC4C,GAAX,CAAe,UAACnB,SAAD,EAAe;gBACvD,IAAIoB,qBAAJ;;gBAEA,OAAOhE,IAAI,CAAC+B,OAAL,CACL,CAACiC,qBAAqB,GAAG,MAAI,CAACpD,OAAL,CAAaqD,MAAb,CAAoBC,mBAA7C,MACE,IADF,IACUF,qBAAqB,KAAK,KAAK,CADzC,GAEIA,qBAFJ,GAGI,MAAI,CAACpD,OAAL,CAAauD,WAJZ,EAKLvB,SALK,CAAP;cAOD,CAV0B,CAD7B;cAAA;cAAA,iCAYQgB,OAAO,CAACQ,GAAR,CACJ3C,kBAAkB,CAACsC,GAAnB,CACE,UAACnB,SAAD;gBAAA,OACE,IAAIgB,OAAJ,CAAY,UAAC7B,OAAD,EAAUsC,MAAV,EAAqB;kBAG/BtE,EAAE,CAACuE,QAAH,CAAY1B,SAAZ,EAAuB,UAAC2B,GAAD,EAAS;oBAC9B,IAAIA,GAAJ,EAAS;sBACPF,MAAM,CAAC,IAAI3E,qBAAJ,CAA0BkD,SAA1B,CAAD,CAAN;oBACD,CAFD,MAEO;sBACLb,OAAO;oBACR;kBACF,CAND;gBAOD,CAVD,CADF;cAAA,CADF,CADI,CAZR;;YAAA;cAAA,kCA4BSN,kBA5BT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;WA+BA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCACQ,KAAKZ,QAAL,CAAc2D,KAAd,EADR;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;;;;AA9QIlE,kB,CAGGF,oB,GAAuBA,oB;AAgRhCqE,MAAM,CAACC,OAAP,GAAiBpE,kBAAjB"},"metadata":{},"sourceType":"script"}