{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar URLS = {\n  darwin: 'https://stackoverflow.com/a/28296325/4252781',\n  win32: 'https://stackoverflow.com/a/54888107/4252781',\n  linux: 'https://stackoverflow.com/a/39228100/4252781'\n};\nvar label = 'ANDROID_HOME';\nvar platform = process.platform;\n\nvar message = \"Read more about how to set the \" + label + \" at \" + _chalk().default.dim(URLS[platform]);\n\nvar _default = {\n  label: label,\n  getDiagnostics: function getDiagnostics() {\n    return _regeneratorRuntime.async(function getDiagnostics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              needsToBeFixed: !process.env.ANDROID_HOME\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  runAutomaticFix: function runAutomaticFix(_ref) {\n    var loader, logManualInstallation;\n    return _regeneratorRuntime.async(function runAutomaticFix$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            loader = _ref.loader, logManualInstallation = _ref.logManualInstallation;\n\n            if (!process.env.ANDROID_HOME) {\n              _context2.next = 4;\n              break;\n            }\n\n            loader.succeed();\n            return _context2.abrupt(\"return\");\n\n          case 4:\n            loader.fail();\n            logManualInstallation({\n              message: message\n            });\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["../../../src/tools/healthchecks/androidHomeEnvVariable.ts"],"names":["URLS","darwin","win32","linux","label","platform","process","message","chalk","getDiagnostics","needsToBeFixed","ANDROID_HOME","runAutomaticFix","logManualInstallation","loader"],"mappings":";;;;;;;;;AAAA,SAAA,MAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;EAAA,MAAA,GAAA,kBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;;;;;;;AAIA,IAAMA,IAAI,GAAG;EACXC,MAAM,EADK,8CAAA;EAEXC,KAAK,EAFM,8CAAA;EAGXC,KAAK,EAAE;AAHI,CAAb;AAMA,IAAMC,KAAK,GAAX,cAAA;AAIA,IAAMC,QAAQ,GAAGC,OAAO,CAAxB,QAAA;;AAEA,IAAMC,OAAO,uCAAqCH,KAArC,YAAiDI,MAAAA,GAAAA,OAAAA,CAAAA,GAAAA,CAC5DR,IAAI,CADN,QACM,CADwDQ,CAA9D;;eAIe;EACbJ,KADa,EACbA,KADa;EAEbK,cAAc,EAAE;IAAA;MAAA;QAAA;UAAA;YAAA,iCAAa;cAC3BC,cAAc,EAAE,CAACJ,OAAO,CAAPA,GAAAA,CAAYK;YADF,CAAb;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAFH;EAKbC,eAAe,EAAE;IAAA;IAAA;MAAA;QAAA;UAAA;YAAO,MAAP,QAAO,MAAP,EAAgBC,qBAAhB,QAAgBA,qBAAhB;;YAAA,KAEXP,OAAO,CAAPA,GAAAA,CAAJ,YAFe;cAAA;cAAA;YAAA;;YAGbQ,MAAM,CAANA,OAAAA;YAHa;;UAAA;YAQfA,MAAM,CAANA,IAAAA;YAEAD,qBAAqB,CAAC;cACpBN,OAAAA,EAAAA;YADoB,CAAD,CAArBM;;UAVe;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;AALJ,C","sourcesContent":["import chalk from 'chalk';\nimport {HealthCheckInterface} from '../../types';\n\n// List of answers on how to set `ANDROID_HOME` for each platform\nconst URLS = {\n  darwin: 'https://stackoverflow.com/a/28296325/4252781',\n  win32: 'https://stackoverflow.com/a/54888107/4252781',\n  linux: 'https://stackoverflow.com/a/39228100/4252781',\n};\n\nconst label = 'ANDROID_HOME';\n\n// Force the options for the platform to avoid providing a link\n// for `ANDROID_HOME` for every platform NodeJS supports\nconst platform = process.platform as 'darwin' | 'win32' | 'linux';\n\nconst message = `Read more about how to set the ${label} at ${chalk.dim(\n  URLS[platform],\n)}`;\n\nexport default {\n  label,\n  getDiagnostics: async () => ({\n    needsToBeFixed: !process.env.ANDROID_HOME,\n  }),\n  runAutomaticFix: async ({loader, logManualInstallation}) => {\n    // Variable could have been added if installing Android Studio so double checking\n    if (process.env.ANDROID_HOME) {\n      loader.succeed();\n\n      return;\n    }\n\n    loader.fail();\n\n    logManualInstallation({\n      message,\n    });\n  },\n} as HealthCheckInterface;\n"]},"metadata":{},"sourceType":"script"}