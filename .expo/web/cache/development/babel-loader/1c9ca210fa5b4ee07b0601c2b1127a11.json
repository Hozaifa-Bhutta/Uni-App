{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _require = require(\"../cli-utils\"),\n    makeAsyncCommand = _require.makeAsyncCommand;\n\nvar Server = require(\"../Server\");\n\nvar denodeify = require(\"denodeify\");\n\nvar fs = require(\"fs\");\n\nvar _require2 = require(\"metro-config\"),\n    loadConfig = _require2.loadConfig;\n\nvar path = require(\"path\");\n\nfunction dependencies(args, config) {\n  var _config$server$unstab, rootModuleAbsolutePath, relativePath, options, writeToFile, outStream, server, deps;\n\n  return _regeneratorRuntime.async(function dependencies$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          rootModuleAbsolutePath = args.entryFile;\n\n          if (fs.existsSync(rootModuleAbsolutePath)) {\n            _context.next = 3;\n            break;\n          }\n\n          return _context.abrupt(\"return\", Promise.reject(new Error(\"File \" + rootModuleAbsolutePath + \" does not exist\")));\n\n        case 3:\n          config.cacheStores = [];\n          relativePath = path.relative((_config$server$unstab = config.server.unstable_serverRoot) !== null && _config$server$unstab !== void 0 ? _config$server$unstab : config.projectRoot, rootModuleAbsolutePath);\n          options = {\n            platform: args.platform,\n            entryFile: relativePath,\n            dev: args.dev,\n            minify: false,\n            generateSourceMaps: !args.dev\n          };\n          writeToFile = args.output;\n          outStream = writeToFile ? fs.createWriteStream(args.output) : process.stdout;\n          server = new Server(config);\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(server.getOrderedDependencyPaths(options));\n\n        case 11:\n          deps = _context.sent;\n          deps.forEach(function (modulePath) {\n            var isInsideProjectRoots = config.watchFolders.filter(function (root) {\n              return modulePath.startsWith(root);\n            }).length > 0;\n\n            if (isInsideProjectRoots) {\n              outStream.write(modulePath + \"\\n\");\n            }\n          });\n          server.end();\n          return _context.abrupt(\"return\", writeToFile ? denodeify(outStream.end).bind(outStream)() : Promise.resolve());\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nmodule.exports = function () {\n  return {\n    command: \"get-dependencies\",\n    description: \"List dependencies\",\n    builder: function builder(yargs) {\n      yargs.option(\"entry-file\", {\n        type: \"string\",\n        demandOption: true,\n        describe: \"Absolute path to the root JS file\"\n      });\n      yargs.option(\"output\", {\n        type: \"string\",\n        describe: \"File name where to store the output, ex. /tmp/dependencies.txt\"\n      });\n      yargs.option(\"platform\", {\n        type: \"string\",\n        describe: \"The platform extension used for selecting modules\"\n      });\n      yargs.option(\"transformer\", {\n        type: \"string\",\n        describe: \"Specify a custom transformer to be used\"\n      });\n      yargs.option(\"max-workers\", {\n        type: \"number\",\n        describe: \"Specifies the maximum number of workers the worker-pool \" + \"will spawn for transforming files. This defaults to the number of the \" + \"cores available on your machine.\"\n      });\n      yargs.option(\"dev\", {\n        type: \"boolean\",\n        default: true,\n        describe: \"If false, skip all dev-only code path\"\n      });\n      yargs.option(\"verbose\", {\n        type: \"boolean\",\n        default: false,\n        description: \"Enables logging\"\n      });\n    },\n    handler: makeAsyncCommand(function _callee(argv) {\n      var config;\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(loadConfig(argv));\n\n            case 2:\n              config = _context2.sent;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(dependencies(argv, config));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })\n  };\n};","map":{"version":3,"names":["require","makeAsyncCommand","Server","denodeify","fs","loadConfig","path","dependencies","args","config","rootModuleAbsolutePath","entryFile","existsSync","Promise","reject","Error","cacheStores","relativePath","relative","_config$server$unstab","server","unstable_serverRoot","projectRoot","options","platform","dev","minify","generateSourceMaps","writeToFile","output","outStream","createWriteStream","process","stdout","getOrderedDependencyPaths","deps","forEach","modulePath","isInsideProjectRoots","watchFolders","filter","root","startsWith","length","write","end","bind","resolve","module","exports","command","description","builder","yargs","option","type","demandOption","describe","default","handler","argv"],"sources":["/Users/hozaifa/Documents/Uni App Github/node_modules/@react-native-community/cli-plugin-metro/node_modules/metro/src/commands/dependencies.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\"use strict\";\n\nconst { makeAsyncCommand } = require(\"../cli-utils\");\n\nconst Server = require(\"../Server\");\n\nconst denodeify = require(\"denodeify\");\n\nconst fs = require(\"fs\");\n\nconst { loadConfig } = require(\"metro-config\");\n\nconst path = require(\"path\");\n\nasync function dependencies(args, config) {\n  var _config$server$unstab;\n\n  const rootModuleAbsolutePath = args.entryFile;\n\n  if (!fs.existsSync(rootModuleAbsolutePath)) {\n    return Promise.reject(\n      new Error(`File ${rootModuleAbsolutePath} does not exist`)\n    );\n  }\n\n  config.cacheStores = [];\n  const relativePath = path.relative(\n    (_config$server$unstab = config.server.unstable_serverRoot) !== null &&\n      _config$server$unstab !== void 0\n      ? _config$server$unstab\n      : config.projectRoot,\n    rootModuleAbsolutePath\n  );\n  const options = {\n    platform: args.platform,\n    entryFile: relativePath,\n    dev: args.dev,\n    minify: false,\n    generateSourceMaps: !args.dev,\n  };\n  const writeToFile = args.output;\n  const outStream = writeToFile\n    ? fs.createWriteStream(args.output)\n    : process.stdout;\n  const server = new Server(config);\n  const deps = await server.getOrderedDependencyPaths(options);\n  deps.forEach((modulePath) => {\n    // Temporary hack to disable listing dependencies not under this directory.\n    // Long term, we need either\n    // (a) JS code to not depend on anything outside this directory, or\n    // (b) Come up with a way to declare this dependency in Buck.\n    const isInsideProjectRoots =\n      config.watchFolders.filter((root) => modulePath.startsWith(root)).length >\n      0;\n\n    if (isInsideProjectRoots) {\n      outStream.write(modulePath + \"\\n\");\n    }\n  });\n  server.end();\n  return writeToFile\n    ? denodeify(outStream.end).bind(outStream)()\n    : Promise.resolve();\n}\n\nmodule.exports = () => ({\n  command: \"get-dependencies\",\n  description: \"List dependencies\",\n  builder: (yargs) => {\n    yargs.option(\"entry-file\", {\n      type: \"string\",\n      demandOption: true,\n      describe: \"Absolute path to the root JS file\",\n    });\n    yargs.option(\"output\", {\n      type: \"string\",\n      describe:\n        \"File name where to store the output, ex. /tmp/dependencies.txt\",\n    });\n    yargs.option(\"platform\", {\n      type: \"string\",\n      describe: \"The platform extension used for selecting modules\",\n    });\n    yargs.option(\"transformer\", {\n      type: \"string\",\n      describe: \"Specify a custom transformer to be used\",\n    });\n    yargs.option(\"max-workers\", {\n      type: \"number\",\n      describe:\n        \"Specifies the maximum number of workers the worker-pool \" +\n        \"will spawn for transforming files. This defaults to the number of the \" +\n        \"cores available on your machine.\",\n    });\n    yargs.option(\"dev\", {\n      type: \"boolean\",\n      default: true,\n      describe: \"If false, skip all dev-only code path\",\n    });\n    yargs.option(\"verbose\", {\n      type: \"boolean\",\n      default: false,\n      description: \"Enables logging\",\n    });\n  },\n  handler: makeAsyncCommand(async (argv) => {\n    const config = await loadConfig(argv);\n    await dependencies(argv, config);\n  }),\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}