{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _filterPlatformAssetScales = _interopRequireDefault(require(\"./filterPlatformAssetScales\"));\n\nvar _getAssetDestPathAndroid = _interopRequireDefault(require(\"./getAssetDestPathAndroid\"));\n\nvar _getAssetDestPathIOS = _interopRequireDefault(require(\"./getAssetDestPathIOS\"));\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction saveAssets(assets, platform, assetsDest) {\n  if (!assetsDest) {\n    _cliTools().logger.warn('Assets destination folder is not set, skipping...');\n\n    return Promise.resolve();\n  }\n\n  var getAssetDestPath = platform === 'android' ? _getAssetDestPathAndroid.default : _getAssetDestPathIOS.default;\n  var filesToCopy = Object.create(null);\n  assets.forEach(function (asset) {\n    var validScales = new Set((0, _filterPlatformAssetScales.default)(platform, asset.scales));\n    asset.scales.forEach(function (scale, idx) {\n      if (!validScales.has(scale)) {\n        return;\n      }\n\n      var src = asset.files[idx];\n\n      var dest = _path().default.join(assetsDest, getAssetDestPath(asset, scale));\n\n      filesToCopy[src] = dest;\n    });\n  });\n  return copyAll(filesToCopy);\n}\n\nfunction copyAll(filesToCopy) {\n  var queue = Object.keys(filesToCopy);\n\n  if (queue.length === 0) {\n    return Promise.resolve();\n  }\n\n  _cliTools().logger.info(\"Copying \" + queue.length + \" asset files\");\n\n  return new Promise(function (resolve, reject) {\n    var copyNext = function copyNext(error) {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      if (queue.length === 0) {\n        _cliTools().logger.info('Done copying assets');\n\n        resolve();\n      } else {\n        var src = queue.shift();\n        var dest = filesToCopy[src];\n        copy(src, dest, copyNext);\n      }\n    };\n\n    copyNext();\n  });\n}\n\nfunction copy(src, dest, callback) {\n  var destDir = _path().default.dirname(dest);\n\n  _fs().default.mkdir(destDir, {\n    recursive: true\n  }, function (err) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    _fs().default.createReadStream(src).pipe(_fs().default.createWriteStream(dest)).on('finish', callback);\n  });\n}\n\nvar _default = saveAssets;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/bundle/saveAssets.ts"],"names":["logger","Promise","getAssetDestPath","platform","getAssetDestPathAndroid","getAssetDestPathIOS","filesToCopy","Object","assets","asset","validScales","src","dest","path","copyAll","queue","copyNext","error","reject","resolve","copy","destDir","fs","recursive","err","callback","saveAssets"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport path from 'path';\nimport fs from 'fs';\n\nimport filterPlatformAssetScales from './filterPlatformAssetScales';\nimport getAssetDestPathAndroid from './getAssetDestPathAndroid';\nimport getAssetDestPathIOS from './getAssetDestPathIOS';\nimport {logger} from '@react-native-community/cli-tools';\nimport type {AssetData} from './buildBundle';\n\ninterface CopiedFiles {\n  [src: string]: string;\n}\n\nfunction saveAssets(\n  assets: AssetData[],\n  platform: string,\n  assetsDest: string | undefined,\n) {\n  if (!assetsDest) {\n    logger.warn('Assets destination folder is not set, skipping...');\n    return Promise.resolve();\n  }\n\n  const getAssetDestPath =\n    platform === 'android' ? getAssetDestPathAndroid : getAssetDestPathIOS;\n\n  const filesToCopy: CopiedFiles = Object.create(null); // Map src -> dest\n  assets.forEach((asset) => {\n    const validScales = new Set(\n      filterPlatformAssetScales(platform, asset.scales),\n    );\n    asset.scales.forEach((scale, idx) => {\n      if (!validScales.has(scale)) {\n        return;\n      }\n      const src = asset.files[idx];\n      const dest = path.join(assetsDest, getAssetDestPath(asset, scale));\n      filesToCopy[src] = dest;\n    });\n  });\n\n  return copyAll(filesToCopy);\n}\n\nfunction copyAll(filesToCopy: CopiedFiles) {\n  const queue = Object.keys(filesToCopy);\n  if (queue.length === 0) {\n    return Promise.resolve();\n  }\n\n  logger.info(`Copying ${queue.length} asset files`);\n  return new Promise((resolve, reject) => {\n    const copyNext = (error?: NodeJS.ErrnoException) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n      if (queue.length === 0) {\n        logger.info('Done copying assets');\n        resolve();\n      } else {\n        // queue.length === 0 is checked in previous branch, so this is string\n        const src = queue.shift() as string;\n        const dest = filesToCopy[src];\n        copy(src, dest, copyNext);\n      }\n    };\n    copyNext();\n  });\n}\n\nfunction copy(\n  src: string,\n  dest: string,\n  callback: (error: NodeJS.ErrnoException) => void,\n): void {\n  const destDir = path.dirname(dest);\n  fs.mkdir(destDir, {recursive: true}, (err?) => {\n    if (err) {\n      callback(err);\n      return;\n    }\n    fs.createReadStream(src)\n      .pipe(fs.createWriteStream(dest))\n      .on('finish', callback);\n  });\n}\n\nexport default saveAssets;\n"]},"metadata":{},"sourceType":"script"}