{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction parseIOSDevicesList(text) {\n  var devices = [];\n  text.split('\\n').forEach(function (line) {\n    var device = line.match(/(.*?) (\\(([0-9.]+)\\) )?\\[([0-9A-F-]+)\\]( \\(Simulator\\))?/i);\n\n    if (device) {\n      var _device = _slicedToArray(device, 6),\n          name = _device[1],\n          version = _device[3],\n          udid = _device[4],\n          isSimulator = _device[5];\n\n      var metadata = {\n        name: name,\n        udid: udid\n      };\n\n      if (version) {\n        metadata.version = version;\n        metadata.type = isSimulator ? 'simulator' : 'device';\n      } else {\n        metadata.type = 'catalyst';\n      }\n\n      devices.push(metadata);\n    }\n  });\n  return devices;\n}\n\nvar _default = parseIOSDevicesList;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/runIOS/parseIOSDevicesList.ts"],"names":["devices","text","line","device","metadata","name","udid","isSimulator","parseIOSDevicesList"],"mappings":";;;;;;;;;AAuBA,SAAA,mBAAA,CAAA,IAAA,EAA0D;EACxD,IAAMA,OAAsB,GAA5B,EAAA;EAEAC,IAAI,CAAJA,KAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CAA0BC,UAAAA,IAAD,EAAU;IACjC,IAAMC,MAAM,GAAGD,IAAI,CAAJA,KAAAA,CAAf,2DAAeA,CAAf;;IAGA,IAAA,MAAA,EAAY;MACV,6BAAA,MAAA;MAAA,IAAM,IAAN;MAAA,IAAM,OAAN;MAAA,IAAM,IAAN;MAAA,IAAM,WAAN;;MACA,IAAME,QAAgB,GAAG;QAACC,IAAD,EAACA,IAAD;QAAOC,IAAAA,EAAAA;MAAP,CAAzB;;MACA,IAAA,OAAA,EAAa;QACXF,QAAQ,CAARA,OAAAA,GAAAA,OAAAA;QACAA,QAAQ,CAARA,IAAAA,GAAgBG,WAAW,GAAA,WAAA,GAA3BH,QAAAA;MAFF,CAAA,MAGO;QACLA,QAAQ,CAARA,IAAAA,GAAAA,UAAAA;MACD;;MACDJ,OAAO,CAAPA,IAAAA,CAAAA,QAAAA;IACD;EAdHC,CAAAA;EAiBA,OAAA,OAAA;AACD;;eAEcO,mB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport {Device} from '../../types';\n\n/**\n * Parses the output of the `xcrun instruments -s` command and returns metadata\n * about available iOS simulators and physical devices, as well as host Mac for\n * Catalyst purposes.\n *\n * Expected text looks roughly like this:\n *\n * ```\n * Known Devices:\n * this-mac-device [UDID]\n * A Physical Device (OS Version) [UDID]\n * A Simulator Device (OS Version) [UDID] (Simulator)\n * ```\n */\nfunction parseIOSDevicesList(text: string): Array<Device> {\n  const devices: Array<Device> = [];\n\n  text.split('\\n').forEach((line) => {\n    const device = line.match(\n      /(.*?) (\\(([0-9.]+)\\) )?\\[([0-9A-F-]+)\\]( \\(Simulator\\))?/i,\n    );\n    if (device) {\n      const [, name, , version, udid, isSimulator] = device;\n      const metadata: Device = {name, udid};\n      if (version) {\n        metadata.version = version;\n        metadata.type = isSimulator ? 'simulator' : 'device';\n      } else {\n        metadata.type = 'catalyst';\n      }\n      devices.push(metadata);\n    }\n  });\n\n  return devices;\n}\n\nexport default parseIOSDevicesList;\n"]},"metadata":{},"sourceType":"script"}