{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.executeCommand = void 0;\n\nfunction _fs() {\n  var data = require(\"fs\");\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _os() {\n  var data = require(\"os\");\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = require(\"path\");\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar runElevated = function runElevated(command) {\n  var script = \"If WScript.Arguments.length = 0 Then\\n  Set objShell = CreateObject(\\\"Shell.Application\\\")\\n  'Pass a bogus argument, say [ uac]\\n  objShell.ShellExecute \\\"wscript.exe\\\", Chr(34) & _\\n    WScript.ScriptFullName & Chr(34) & \\\" uac\\\", \\\"\\\", \\\"runas\\\", 1\\nElse\\n  Dim oShell\\n  Set oShell = WScript.CreateObject (\\\"WSCript.shell\\\")\\n  oShell.run \\\"\" + command + \"\\\"\\n  Set oShell = Nothing\\nEnd If\";\n  var elevatedPath = (0, _path().join)((0, _os().tmpdir)(), \"elevated-\" + Math.random() + \".vbs\");\n  (0, _fs().writeFileSync)(elevatedPath, script, 'utf-8');\n  return (0, _execa().default)(elevatedPath);\n};\n\nvar groupArgs = function groupArgs(args) {\n  var isStringArgument = false;\n  var newArgs = args.reduce(function (acum, current) {\n    if (isStringArgument) {\n      var last = acum[acum.length - 1];\n      acum[acum.length - 1] = last + \" \" + current;\n\n      if (current.endsWith('\"')) {\n        isStringArgument = false;\n      }\n\n      return acum;\n    }\n\n    if (current.startsWith('\"')) {\n      if (!current.endsWith('\"')) {\n        isStringArgument = true;\n        acum.push(current);\n        return acum;\n      }\n\n      acum.push(current.replace(/\"/g, ''));\n      return acum;\n    }\n\n    acum.push(current);\n    return acum;\n  }, []);\n  return newArgs;\n};\n\nvar executeShellCommand = function executeShellCommand(command) {\n  var elevated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var args = groupArgs(command.split(' '));\n  var program = args.shift();\n\n  if (elevated) {\n    return runElevated(command);\n  }\n\n  return (0, _execa().default)(program, args, {\n    shell: true\n  });\n};\n\nexports.executeCommand = executeShellCommand;","map":{"version":3,"sources":["../../../src/tools/windows/executeWinCommand.ts"],"names":["runElevated","command","script","elevatedPath","Math","groupArgs","args","isStringArgument","newArgs","last","acum","current","executeShellCommand","elevated","program","shell"],"mappings":"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","sourcesContent":["import {writeFileSync} from 'fs';\nimport {tmpdir} from 'os';\nimport {join} from 'path';\n\nimport execa from 'execa';\n\n/** Runs a command requestion permission to run elevated. */\nconst runElevated = (command: string) => {\n  // TODO: escape double quotes in args\n  // https://www.winhelponline.com/blog/vbscripts-and-uac-elevation/\n  /**\n   * Need to use a couple of intermediary files to make this work as\n   * `ShellExecute` only accepts a command so\n   */\n\n  // prettier-ignore\n  const script =\n`If WScript.Arguments.length = 0 Then\n  Set objShell = CreateObject(\"Shell.Application\")\n  'Pass a bogus argument, say [ uac]\n  objShell.ShellExecute \"wscript.exe\", Chr(34) & _\n    WScript.ScriptFullName & Chr(34) & \" uac\", \"\", \"runas\", 1\nElse\n  Dim oShell\n  Set oShell = WScript.CreateObject (\"WSCript.shell\")\n  oShell.run \"${command}\"\n  Set oShell = Nothing\nEnd If`;\n\n  const elevatedPath = join(tmpdir(), `elevated-${Math.random()}.vbs`);\n\n  writeFileSync(elevatedPath, script, 'utf-8');\n\n  return execa(elevatedPath);\n};\n\n/**\n * Groups all string arguments into a single one. E.g.:\n * ```js\n * ['-m', '\"Upgrade:', 'to', 'latest', 'version\"'] --> ['-m', '\"Upgrade: to latest version\"']`\n * ```\n * @param args The arguments\n * Â© webhint project\n * (https://github.com/webhintio/hint/blob/30b8ba74f122d8b66fc5596d788dd1c7738f2d83/release/lib/utils.ts#L82)\n * License: Apache-2\n */\nconst groupArgs = (args: string[]) => {\n  let isStringArgument = false;\n  const newArgs = args.reduce((acum: string[], current) => {\n    if (isStringArgument) {\n      const last = acum[acum.length - 1];\n\n      acum[acum.length - 1] = `${last} ${current}`;\n\n      if (current.endsWith('\"')) {\n        isStringArgument = false;\n      }\n\n      return acum;\n    }\n\n    if (current.startsWith('\"')) {\n      /**\n       * Argument is split. I.e.: `['\"part1', 'part2\"'];`\n       */\n      if (!current.endsWith('\"')) {\n        isStringArgument = true;\n\n        acum.push(current);\n\n        return acum;\n      }\n\n      /**\n       * Argument is surrounded by \"\" that need to be removed.\n       * We just remove all the quotes because we don't escape any in our commands\n       */\n      acum.push(current.replace(/\"/g, ''));\n\n      return acum;\n    }\n\n    acum.push(current);\n\n    return acum;\n  }, []);\n\n  return newArgs;\n};\n\n/**\n * Executes the given `command` on a shell taking care of slicing the parameters\n * if needed.\n */\nconst executeShellCommand = (command: string, elevated = false) => {\n  const args = groupArgs(command.split(' '));\n  const program = args.shift()!;\n\n  if (elevated) {\n    return runElevated(command);\n  }\n\n  return execa(program, args, {shell: true});\n};\n\nexport {executeShellCommand as executeCommand};\n"]},"metadata":{},"sourceType":"script"}