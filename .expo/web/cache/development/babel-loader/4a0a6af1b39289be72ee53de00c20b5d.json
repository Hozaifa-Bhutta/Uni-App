{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction findMatchingSimulator(simulators, findOptions) {\n  if (!simulators.devices) {\n    return null;\n  }\n\n  var devices = simulators.devices;\n  var simulatorVersion;\n  var simulatorName = null;\n\n  if (findOptions && findOptions.simulator) {\n    var parsedSimulatorName = findOptions.simulator.match(/(.*)? (?:\\((\\d+\\.\\d+)?\\))$/);\n\n    if (parsedSimulatorName && parsedSimulatorName[2] !== undefined) {\n      simulatorVersion = parsedSimulatorName[2];\n      simulatorName = parsedSimulatorName[1];\n    } else {\n      simulatorName = findOptions.simulator;\n    }\n  }\n\n  var match;\n\n  for (var versionDescriptor in devices) {\n    var device = devices[versionDescriptor];\n    var version = versionDescriptor;\n\n    if (/^com\\.apple\\.CoreSimulator\\.SimRuntime\\./g.test(version)) {\n      version = version.replace(/^com\\.apple\\.CoreSimulator\\.SimRuntime\\.([^-]+)-([^-]+)-([^-]+)$/g, '$1 $2.$3');\n    }\n\n    if (!version.includes('iOS') && !version.includes('tvOS')) {\n      continue;\n    }\n\n    if (simulatorVersion && !version.endsWith(simulatorVersion)) {\n      continue;\n    }\n\n    for (var i in device) {\n      var simulator = device[i];\n\n      if (simulator.availability !== '(available)' && simulator.isAvailable !== 'YES' && simulator.isAvailable !== true) {\n        continue;\n      }\n\n      var booted = simulator.state === 'Booted';\n      var simulatorDescriptor = {\n        udid: simulator.udid,\n        name: simulator.name,\n        booted: booted,\n        version: version\n      };\n\n      if (findOptions && findOptions.udid) {\n        if (simulator.udid === findOptions.udid) {\n          return simulatorDescriptor;\n        }\n      } else {\n        if (booted && simulatorName === null) {\n          return simulatorDescriptor;\n        }\n\n        if (simulator.name === simulatorName && !match) {\n          match = simulatorDescriptor;\n        }\n\n        if (simulatorName === null && !match) {\n          match = simulatorDescriptor;\n        }\n      }\n    }\n  }\n\n  if (match) {\n    return match;\n  }\n\n  return null;\n}\n\nvar _default = findMatchingSimulator;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/runIOS/findMatchingSimulator.ts"],"names":["simulators","devices","simulatorName","findOptions","parsedSimulatorName","simulatorVersion","device","version","simulator","booted","simulatorDescriptor","udid","name","match","findMatchingSimulator"],"mappings":";;;;;;;AAsBA,SAAA,qBAAA,CAAA,UAAA,EAAA,WAAA,EAGE;EACA,IAAI,CAACA,UAAU,CAAf,OAAA,EAAyB;IACvB,OAAA,IAAA;EACD;;EACD,IAAMC,OAAO,GAAGD,UAAU,CAA1B,OAAA;EACA,IAAA,gBAAA;EACA,IAAIE,aAAa,GAAjB,IAAA;;EAEA,IAAIC,WAAW,IAAIA,WAAW,CAA9B,SAAA,EAA0C;IACxC,IAAMC,mBAAmB,GAAGD,WAAW,CAAXA,SAAAA,CAAAA,KAAAA,CAA5B,4BAA4BA,CAA5B;;IAGA,IAAIC,mBAAmB,IAAIA,mBAAmB,CAAnBA,CAAmB,CAAnBA,KAA3B,SAAA,EAAiE;MAC/DC,gBAAgB,GAAGD,mBAAmB,CAAtCC,CAAsC,CAAtCA;MACAH,aAAa,GAAGE,mBAAmB,CAAnCF,CAAmC,CAAnCA;IAFF,CAAA,MAGO;MACLA,aAAa,GAAGC,WAAW,CAA3BD,SAAAA;IACD;EACF;;EAED,IAAA,KAAA;;EACA,KAAK,IAAL,iBAAA,IAAA,OAAA,EAAyC;IACvC,IAAMI,MAAM,GAAGL,OAAO,CAAtB,iBAAsB,CAAtB;IACA,IAAIM,OAAO,GAAX,iBAAA;;IAEA,IAAI,4CAAA,IAAA,CAAJ,OAAI,CAAJ,EAA+D;MAE7DA,OAAO,GAAGA,OAAO,CAAPA,OAAAA,CAAAA,mEAAAA,EAAVA,UAAUA,CAAVA;IANqC;;IAavC,IAAI,CAACA,OAAO,CAAPA,QAAAA,CAAD,KAACA,CAAD,IAA4B,CAACA,OAAO,CAAPA,QAAAA,CAAjC,MAAiCA,CAAjC,EAA2D;MACzD;IACD;;IACD,IAAIF,gBAAgB,IAAI,CAACE,OAAO,CAAPA,QAAAA,CAAzB,gBAAyBA,CAAzB,EAA6D;MAC3D;IACD;;IACD,KAAK,IAAL,CAAA,IAAA,MAAA,EAAwB;MACtB,IAAMC,SAAS,GAAGF,MAAM,CADF,CACE,CAAxB;;MAEA,IACEE,SAAS,CAATA,YAAAA,KAAAA,aAAAA,IAEAA,SAAS,CAATA,WAAAA,KAFAA,KAAAA,IAGAA,SAAS,CAATA,WAAAA,KAJF,IAAA,EAKE;QACA;MACD;;MACD,IAAMC,MAAM,GAAGD,SAAS,CAATA,KAAAA,KAAf,QAAA;MACA,IAAME,mBAAmB,GAAG;QAC1BC,IAAI,EAAEH,SAAS,CADW,IAAA;QAE1BI,IAAI,EAAEJ,SAAS,CAFW,IAAA;QAG1BC,MAH0B,EAG1BA,MAH0B;QAI1BF,OAAAA,EAAAA;MAJ0B,CAA5B;;MAMA,IAAIJ,WAAW,IAAIA,WAAW,CAA9B,IAAA,EAAqC;QACnC,IAAIK,SAAS,CAATA,IAAAA,KAAmBL,WAAW,CAAlC,IAAA,EAAyC;UACvC,OAAA,mBAAA;QACD;MAHH,CAAA,MAIO;QACL,IAAIM,MAAM,IAAIP,aAAa,KAA3B,IAAA,EAAsC;UACpC,OAAA,mBAAA;QACD;;QACD,IAAIM,SAAS,CAATA,IAAAA,KAAAA,aAAAA,IAAoC,CAAxC,KAAA,EAAgD;UAC9CK,KAAK,GAALA,mBAAAA;QALG;;QAQL,IAAIX,aAAa,KAAbA,IAAAA,IAA0B,CAA9B,KAAA,EAAsC;UACpCW,KAAK,GAALA,mBAAAA;QACD;MACF;IACF;EACF;;EACD,IAAA,KAAA,EAAW;IACT,OAAA,KAAA;EACD;;EACD,OAAA,IAAA;AACD;;eAEcC,qB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport {Device} from '../../types';\n\n/**\n * Takes in a parsed simulator list and a desired name, and returns an object with the matching simulator. The desired\n * name can optionally include the iOS version in between parenthesis after the device name. Ex: \"iPhone 6 (9.2)\" in\n * which case it'll attempt to find a simulator with the exact version specified.\n *\n * If the simulatorString argument is null, we'll go into default mode and return the currently booted simulator, or if\n * none is booted, it will be the first in the list.\n *\n * @param simulators a parsed list from `xcrun simctl list --json devices` command\n * @param simulatorString the string with the name of desired simulator. If null, it will use the currently\n *        booted simulator, or if none are booted, the first in the list.\n */\nfunction findMatchingSimulator(\n  simulators: {devices: {[index: string]: Array<Device>}},\n  findOptions?: null | {simulator?: string; udid?: string},\n) {\n  if (!simulators.devices) {\n    return null;\n  }\n  const devices = simulators.devices;\n  let simulatorVersion;\n  let simulatorName = null;\n\n  if (findOptions && findOptions.simulator) {\n    const parsedSimulatorName = findOptions.simulator.match(\n      /(.*)? (?:\\((\\d+\\.\\d+)?\\))$/,\n    );\n    if (parsedSimulatorName && parsedSimulatorName[2] !== undefined) {\n      simulatorVersion = parsedSimulatorName[2];\n      simulatorName = parsedSimulatorName[1];\n    } else {\n      simulatorName = findOptions.simulator;\n    }\n  }\n\n  let match;\n  for (const versionDescriptor in devices) {\n    const device = devices[versionDescriptor];\n    let version = versionDescriptor;\n\n    if (/^com\\.apple\\.CoreSimulator\\.SimRuntime\\./g.test(version)) {\n      // Transform \"com.apple.CoreSimulator.SimRuntime.iOS-12-2\" into \"iOS 12.2\"\n      version = version.replace(\n        /^com\\.apple\\.CoreSimulator\\.SimRuntime\\.([^-]+)-([^-]+)-([^-]+)$/g,\n        '$1 $2.$3',\n      );\n    }\n\n    // Making sure the version of the simulator is an iOS or tvOS (Removes Apple Watch, etc)\n    if (!version.includes('iOS') && !version.includes('tvOS')) {\n      continue;\n    }\n    if (simulatorVersion && !version.endsWith(simulatorVersion)) {\n      continue;\n    }\n    for (const i in device) {\n      const simulator = device[i];\n      // Skipping non-available simulator\n      if (\n        simulator.availability !== '(available)' &&\n        // @ts-ignore verify isAvailable parameter\n        simulator.isAvailable !== 'YES' &&\n        simulator.isAvailable !== true\n      ) {\n        continue;\n      }\n      const booted = simulator.state === 'Booted';\n      const simulatorDescriptor = {\n        udid: simulator.udid,\n        name: simulator.name,\n        booted,\n        version,\n      };\n      if (findOptions && findOptions.udid) {\n        if (simulator.udid === findOptions.udid) {\n          return simulatorDescriptor;\n        }\n      } else {\n        if (booted && simulatorName === null) {\n          return simulatorDescriptor;\n        }\n        if (simulator.name === simulatorName && !match) {\n          match = simulatorDescriptor;\n        }\n        // Keeps track of the first available simulator for use if we can't find one above.\n        if (simulatorName === null && !match) {\n          match = simulatorDescriptor;\n        }\n      }\n    }\n  }\n  if (match) {\n    return match;\n  }\n  return null;\n}\n\nexport default findMatchingSimulator;\n"]},"metadata":{},"sourceType":"script"}