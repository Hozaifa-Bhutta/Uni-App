{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.doesSoftwareNeedToBeFixed = exports.isSoftwareNotInstalled = exports.PACKAGE_MANAGERS = void 0;\n\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n\n  _semver = function _semver() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _commandExists() {\n  var data = _interopRequireDefault(require(\"command-exists\"));\n\n  _commandExists = function _commandExists() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar PACKAGE_MANAGERS;\nexports.PACKAGE_MANAGERS = PACKAGE_MANAGERS;\n\n(function (PACKAGE_MANAGERS) {\n  PACKAGE_MANAGERS[\"YARN\"] = \"YARN\";\n  PACKAGE_MANAGERS[\"NPM\"] = \"NPM\";\n})(PACKAGE_MANAGERS || (exports.PACKAGE_MANAGERS = PACKAGE_MANAGERS = {}));\n\nvar isSoftwareNotInstalled = function _callee(command) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap((0, _commandExists().default)(command));\n\n        case 3:\n          return _context.abrupt(\"return\", false);\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", true);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\n\nexports.isSoftwareNotInstalled = isSoftwareNotInstalled;\n\nvar doesSoftwareNeedToBeFixed = function doesSoftwareNeedToBeFixed(_ref) {\n  var version = _ref.version,\n      versionRange = _ref.versionRange,\n      _ref$looseRange = _ref.looseRange,\n      looseRange = _ref$looseRange === void 0 ? false : _ref$looseRange;\n\n  var coercedVersion = _semver().default.coerce(version, {\n    loose: looseRange\n  });\n\n  return version === 'Not Found' || coercedVersion === null || !_semver().default.satisfies(coercedVersion, versionRange);\n};\n\nexports.doesSoftwareNeedToBeFixed = doesSoftwareNeedToBeFixed;","map":{"version":3,"sources":["../../src/tools/checkInstallation.ts"],"names":["PACKAGE_MANAGERS","isSoftwareNotInstalled","doesSoftwareNeedToBeFixed","looseRange","coercedVersion","loose","version","semver"],"mappings":";;;;;;;;;AAAA,SAAA,OAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;EAAA,OAAA,GAAA,mBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,SAAA,cAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;EAAA,cAAA,GAAA,0BAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;;;;;;;IAEYA,gB;;;WAAAA,gB;EAAAA,gB,QAAAA,G,MAAAA;EAAAA,gB,OAAAA,G,KAAAA;GAAAA,gB,gCAAAA,gB;;AAKZ,IAAMC,sBAAsB,GAAG,iBAAA,OAAA;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA;UAAA,iCAErB,CAAA,GAAA,cAAA,GAAA,OAAA,EAAN,OAAM,CAFqB;;QAAA;UAAA,iCAI3B,KAJ2B;;QAAA;UAAA;UAAA;UAAA,iCAM3B,IAN2B;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAA/B;;;;AAUA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,OAQnB;EAAA,IARoB,OAQpB,QARoB,OAQpB;EAAA,IARoB,YAQpB,QARoB,YAQpB;EAAA,2BALbC,UAKa;EAAA,IALbA,UAKa,gCALA,KAKA;;EACb,IAAMC,cAAc,GAAG,OAAA,GAAA,OAAA,CAAA,MAAA,CAAA,OAAA,EAAuB;IAACC,KAAK,EAAEF;EAAR,CAAvB,CAAvB;;EAEA,OACEG,OAAO,KAAPA,WAAAA,IACAF,cAAc,KADdE,IAAAA,IAEA,CAACC,OAAAA,GAAAA,OAAAA,CAAAA,SAAAA,CAAAA,cAAAA,EAHH,YAGGA,CAHH;AAXF,CAAA","sourcesContent":["import semver from 'semver';\nimport commandExists from 'command-exists';\n\nexport enum PACKAGE_MANAGERS {\n  YARN = 'YARN',\n  NPM = 'NPM',\n}\n\nconst isSoftwareNotInstalled = async (command: string): Promise<boolean> => {\n  try {\n    await commandExists(command);\n\n    return false;\n  } catch (_ignored) {\n    return true;\n  }\n};\n\nconst doesSoftwareNeedToBeFixed = ({\n  version,\n  versionRange,\n  looseRange = false,\n}: {\n  version: string;\n  versionRange: string;\n  looseRange?: boolean;\n}): boolean => {\n  const coercedVersion = semver.coerce(version, {loose: looseRange});\n\n  return (\n    version === 'Not Found' ||\n    coercedVersion === null ||\n    !semver.satisfies(coercedVersion, versionRange)\n  );\n};\n\nexport {isSoftwareNotInstalled, doesSoftwareNeedToBeFixed};\n"]},"metadata":{},"sourceType":"script"}