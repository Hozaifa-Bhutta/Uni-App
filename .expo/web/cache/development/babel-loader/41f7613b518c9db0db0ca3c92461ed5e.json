{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _metro() {\n  var data = _interopRequireDefault(require(\"metro\"));\n\n  _metro = function _metro() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _metroCore() {\n  var data = require(\"metro-core\");\n\n  _metroCore = function _metroCore() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliServerApi() {\n  var data = require(\"@react-native-community/cli-server-api\");\n\n  _cliServerApi = function _cliServerApi() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _loadMetroConfig = _interopRequireDefault(require(\"../../tools/loadMetroConfig\"));\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _watchMode = _interopRequireDefault(require(\"./watchMode\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction runServer(_argv, ctx, args) {\n  var reportEvent, terminal, ReporterImpl, terminalReporter, reporter, metroConfig, _ref, middleware, websocketEndpoints, messageSocketEndpoint, eventsSocketEndpoint, customEnhanceMiddleware, serverInstance;\n\n  return _regeneratorRuntime.async(function runServer$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          terminal = new (_metroCore().Terminal)(process.stdout);\n          ReporterImpl = getReporterImpl(args.customLogReporterPath);\n          terminalReporter = new ReporterImpl(terminal);\n          reporter = {\n            update: function update(event) {\n              terminalReporter.update(event);\n\n              if (reportEvent) {\n                reportEvent(event);\n              }\n            }\n          };\n          _context.next = 6;\n          return _regeneratorRuntime.awrap((0, _loadMetroConfig.default)(ctx, {\n            config: args.config,\n            maxWorkers: args.maxWorkers,\n            port: args.port,\n            resetCache: args.resetCache,\n            watchFolders: args.watchFolders,\n            projectRoot: args.projectRoot,\n            sourceExts: args.sourceExts,\n            reporter: reporter\n          }));\n\n        case 6:\n          metroConfig = _context.sent;\n\n          if (args.assetPlugins) {\n            metroConfig.transformer.assetPlugins = args.assetPlugins.map(function (plugin) {\n              return require.resolve(plugin);\n            });\n          }\n\n          _ref = (0, _cliServerApi().createDevServerMiddleware)({\n            host: args.host,\n            port: metroConfig.server.port,\n            watchFolders: metroConfig.watchFolders\n          }), middleware = _ref.middleware, websocketEndpoints = _ref.websocketEndpoints, messageSocketEndpoint = _ref.messageSocketEndpoint, eventsSocketEndpoint = _ref.eventsSocketEndpoint;\n          middleware.use(_cliServerApi().indexPageMiddleware);\n          customEnhanceMiddleware = metroConfig.server.enhanceMiddleware;\n\n          metroConfig.server.enhanceMiddleware = function (metroMiddleware, server) {\n            if (customEnhanceMiddleware) {\n              metroMiddleware = customEnhanceMiddleware(metroMiddleware, server);\n            }\n\n            return middleware.use(metroMiddleware);\n          };\n\n          _context.next = 14;\n          return _regeneratorRuntime.awrap(_metro().default.runServer(metroConfig, {\n            host: args.host,\n            secure: args.https,\n            secureCert: args.cert,\n            secureKey: args.key,\n            hmrEnabled: true,\n            websocketEndpoints: websocketEndpoints\n          }));\n\n        case 14:\n          serverInstance = _context.sent;\n          reportEvent = eventsSocketEndpoint.reportEvent;\n\n          if (args.interactive) {\n            (0, _watchMode.default)(messageSocketEndpoint);\n          }\n\n          serverInstance.keepAliveTimeout = 30000;\n          _context.next = 20;\n          return _regeneratorRuntime.awrap((0, _cliTools().releaseChecker)(ctx.root));\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getReporterImpl(customLogReporterPath) {\n  if (customLogReporterPath === undefined) {\n    return require('metro/src/lib/TerminalReporter');\n  }\n\n  try {\n    return require(customLogReporterPath);\n  } catch (e) {\n    if (e.code !== 'MODULE_NOT_FOUND') {\n      throw e;\n    }\n\n    return require(_path().default.resolve(customLogReporterPath));\n  }\n}\n\nvar _default = runServer;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/commands/start/runServer.ts"],"names":["terminal","Terminal","process","ReporterImpl","getReporterImpl","args","terminalReporter","reporter","update","reportEvent","metroConfig","config","maxWorkers","port","resetCache","watchFolders","projectRoot","sourceExts","plugin","require","eventsSocketEndpoint","host","middleware","indexPageMiddleware","customEnhanceMiddleware","metroMiddleware","serverInstance","secure","secureCert","secureKey","hmrEnabled","websocketEndpoints","ctx","customLogReporterPath","e","path","runServer"],"mappings":";;;;;;;;;AAQA,SAAA,MAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;EAAA,MAAA,GAAA,kBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AAEA,SAAA,UAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;EAAA,UAAA,GAAA,sBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,SAAA,KAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;EAAA,KAAA,GAAA,iBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,SAAA,aAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,wCAAA,CAAA;;EAAA,aAAA,GAAA,yBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AAMA,IAAA,gBAAA,GAAA,sBAAA,CAAA,OAAA,+BAAA,CAAA;;AACA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;;EAAA,OAAA,IAAA;AAAA;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,eAAA,CAAA;;;;;;;;AAqBA,SAAA,SAAA,CAAA,KAAA,EAAA,GAAA,EAAA,IAAA;EAAA;;EAAA;IAAA;MAAA;QAAA;UAEQA,QAFR,GAEmB,KAAIC,UAAAA,GAAJ,QAAA,EAAaC,OAAO,CAArC,MAAiB,CAFnB;UAGQC,YAHR,GAGuBC,eAAe,CAACC,IAAI,CAAzC,qBAAoC,CAHtC;UAIQC,gBAJR,GAI2B,IAAA,YAAA,CAAzB,QAAyB,CAJ3B;UAKQC,QALR,GAKmB;YACfC,MADe,kBACT,KADS,EACI;cACjBF,gBAAgB,CAAhBA,MAAAA,CAAAA,KAAAA;;cACA,IAAA,WAAA,EAAiB;gBACfG,WAAW,CAAXA,KAAW,CAAXA;cACD;YACF;UANc,CALnB;UAAA;UAAA,iCAc4B,CAAA,GAAA,gBAAA,CAAA,OAAA,EAAA,GAAA,EAAqB;YAC7CE,MAAM,EAAEN,IAAI,CADiC,MAAA;YAE7CO,UAAU,EAAEP,IAAI,CAF6B,UAAA;YAG7CQ,IAAI,EAAER,IAAI,CAHmC,IAAA;YAI7CS,UAAU,EAAET,IAAI,CAJ6B,UAAA;YAK7CU,YAAY,EAAEV,IAAI,CAL2B,YAAA;YAM7CW,WAAW,EAAEX,IAAI,CAN4B,WAAA;YAO7CY,UAAU,EAAEZ,IAAI,CAP6B,UAAA;YAQ7CE,QAAAA,EAAAA;UAR6C,CAArB,CAd5B;;QAAA;UAcQG,WAdR;;UAyBE,IAAIL,IAAI,CAAR,YAAA,EAAuB;YACrBK,WAAW,CAAXA,WAAAA,CAAAA,YAAAA,GAAuCL,IAAI,CAAJA,YAAAA,CAAAA,GAAAA,CAAuBa,UAAAA,MAAD;cAAA,OAC3DC,OAAO,CAAPA,OAAAA,CADFT,MACES,CAD2D;YAAA,CAAtBd,CAAvCK;UAGD;;UA7BH,OAoCM,CAAA,GAAA,aAAA,GAAA,yBAAA,EAA0B;YAC5BW,IAAI,EAAEhB,IAAI,CADkB,IAAA;YAE5BQ,IAAI,EAAEH,WAAW,CAAXA,MAAAA,CAFsB,IAAA;YAG5BK,YAAY,EAAEL,WAAW,CAACK;UAHE,CAA1B,CApCN,EA+BQ,UA/BR,QA+BQ,UA/BR,EA+BQ,kBA/BR,QA+BQ,kBA/BR,EA+BQ,qBA/BR,QA+BQ,qBA/BR,EAmCIK,oBAnCJ,QAmCIA,oBAnCJ;UAyCEE,UAAU,CAAVA,GAAAA,CAAeC,aAAAA,GAAfD,mBAAAA;UAEME,uBA3CR,GA2CkCd,WAAW,CAAXA,MAAAA,CAAhC,iBA3CF;;UA4CEA,WAAW,CAAXA,MAAAA,CAAAA,iBAAAA,GAAuC,UAAA,eAAA,EAAA,MAAA,EAGlC;YACH,IAAA,uBAAA,EAA6B;cAC3Be,eAAe,GAAGD,uBAAuB,CAAA,eAAA,EAAzCC,MAAyC,CAAzCA;YACD;;YACD,OAAOH,UAAU,CAAVA,GAAAA,CAAP,eAAOA,CAAP;UAPFZ,CAAAA;;UA5CF;UAAA,iCAsD+B,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA,WAAA,EAA6B;YACxDW,IAAI,EAAEhB,IAAI,CAD8C,IAAA;YAExDsB,MAAM,EAAEtB,IAAI,CAF4C,KAAA;YAGxDuB,UAAU,EAAEvB,IAAI,CAHwC,IAAA;YAIxDwB,SAAS,EAAExB,IAAI,CAJyC,GAAA;YAKxDyB,UAAU,EAL8C,IAAA;YAMxDC,kBAAAA,EAAAA;UANwD,CAA7B,CAtD/B;;QAAA;UAsDQL,cAtDR;UA+DEjB,WAAW,GAAGW,oBAAoB,CAAlCX,WAAAA;;UAEA,IAAIJ,IAAI,CAAR,WAAA,EAAsB;YACpB,CAAA,GAAA,UAAA,CAAA,OAAA,EAAA,qBAAA;UAlEoE;;UA+EtEqB,cAAc,CAAdA,gBAAAA,GAAAA,KAAAA;UA/EF;UAAA,iCAiFQ,CAAA,GAAA,SAAA,GAAA,cAAA,EAAeM,GAAG,CAAxB,IAAM,CAjFR;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAoFA,SAAA,eAAA,CAAA,qBAAA,EAAoE;EAClE,IAAIC,qBAAqB,KAAzB,SAAA,EAAyC;IACvC,OAAOd,OAAO,CAAd,gCAAc,CAAd;EACD;;EACD,IAAI;IAGF,OAAOA,OAAO,CAAd,qBAAc,CAAd;EAHF,CAAA,CAIE,OAAA,CAAA,EAAU;IACV,IAAUe,CAAN,CAAA,IAAMA,KAAV,kBAAA,EAA0C;MACxC,MAAA,CAAA;IAFQ;;IAMV,OAAOf,OAAO,CAACgB,KAAAA,GAAAA,OAAAA,CAAAA,OAAAA,CAAf,qBAAeA,CAAD,CAAd;EACD;AACF;;eAEcC,S","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// @ts-ignore untyped metro\nimport Metro from 'metro';\n// @ts-ignore untyped metro\nimport {Terminal} from 'metro-core';\nimport path from 'path';\nimport {\n  createDevServerMiddleware,\n  indexPageMiddleware,\n} from '@react-native-community/cli-server-api';\nimport {Config} from '@react-native-community/cli-types';\n\nimport loadMetroConfig from '../../tools/loadMetroConfig';\nimport {releaseChecker} from '@react-native-community/cli-tools';\nimport enableWatchMode from './watchMode';\n\nexport type Args = {\n  assetPlugins?: string[];\n  cert?: string;\n  customLogReporterPath?: string;\n  host?: string;\n  https?: boolean;\n  maxWorkers?: number;\n  key?: string;\n  platforms?: string[];\n  port?: number;\n  resetCache?: boolean;\n  sourceExts?: string[];\n  transformer?: string;\n  watchFolders?: string[];\n  config?: string;\n  projectRoot?: string;\n  interactive: boolean;\n};\n\nasync function runServer(_argv: Array<string>, ctx: Config, args: Args) {\n  let reportEvent: ((event: any) => void) | undefined;\n  const terminal = new Terminal(process.stdout);\n  const ReporterImpl = getReporterImpl(args.customLogReporterPath);\n  const terminalReporter = new ReporterImpl(terminal);\n  const reporter = {\n    update(event: any) {\n      terminalReporter.update(event);\n      if (reportEvent) {\n        reportEvent(event);\n      }\n    },\n  };\n\n  const metroConfig = await loadMetroConfig(ctx, {\n    config: args.config,\n    maxWorkers: args.maxWorkers,\n    port: args.port,\n    resetCache: args.resetCache,\n    watchFolders: args.watchFolders,\n    projectRoot: args.projectRoot,\n    sourceExts: args.sourceExts,\n    reporter,\n  });\n\n  if (args.assetPlugins) {\n    metroConfig.transformer.assetPlugins = args.assetPlugins.map((plugin) =>\n      require.resolve(plugin),\n    );\n  }\n\n  const {\n    middleware,\n    websocketEndpoints,\n    messageSocketEndpoint,\n    eventsSocketEndpoint,\n  } = createDevServerMiddleware({\n    host: args.host,\n    port: metroConfig.server.port,\n    watchFolders: metroConfig.watchFolders,\n  });\n  middleware.use(indexPageMiddleware);\n\n  const customEnhanceMiddleware = metroConfig.server.enhanceMiddleware;\n  metroConfig.server.enhanceMiddleware = (\n    metroMiddleware: any,\n    server: unknown,\n  ) => {\n    if (customEnhanceMiddleware) {\n      metroMiddleware = customEnhanceMiddleware(metroMiddleware, server);\n    }\n    return middleware.use(metroMiddleware);\n  };\n\n  const serverInstance = await Metro.runServer(metroConfig, {\n    host: args.host,\n    secure: args.https,\n    secureCert: args.cert,\n    secureKey: args.key,\n    hmrEnabled: true,\n    websocketEndpoints,\n  });\n\n  reportEvent = eventsSocketEndpoint.reportEvent;\n\n  if (args.interactive) {\n    enableWatchMode(messageSocketEndpoint);\n  }\n\n  // In Node 8, the default keep-alive for an HTTP connection is 5 seconds. In\n  // early versions of Node 8, this was implemented in a buggy way which caused\n  // some HTTP responses (like those containing large JS bundles) to be\n  // terminated early.\n  //\n  // As a workaround, arbitrarily increase the keep-alive from 5 to 30 seconds,\n  // which should be enough to send even the largest of JS bundles.\n  //\n  // For more info: https://github.com/nodejs/node/issues/13391\n  //\n  serverInstance.keepAliveTimeout = 30000;\n\n  await releaseChecker(ctx.root);\n}\n\nfunction getReporterImpl(customLogReporterPath: string | undefined) {\n  if (customLogReporterPath === undefined) {\n    return require('metro/src/lib/TerminalReporter');\n  }\n  try {\n    // First we let require resolve it, so we can require packages in node_modules\n    // as expected. eg: require('my-package/reporter');\n    return require(customLogReporterPath);\n  } catch (e) {\n    if ((<any>e).code !== 'MODULE_NOT_FOUND') {\n      throw e;\n    }\n    // If that doesn't work, then we next try relative to the cwd, eg:\n    // require('./reporter');\n    return require(path.resolve(customLogReporterPath));\n  }\n}\n\nexport default runServer;\n"]},"metadata":{},"sourceType":"script"}